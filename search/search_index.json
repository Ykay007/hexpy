{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python Client for the Crimson Hexagon API hexpy is a simple python package for working with the Crimson Hexagon API Why use this client? Easily and securely manage account authentication. Automatically abide by Crimson Hexagon's rate limits. Automatically convert python data to/from JSON strings. Automatically check requests success. Make it easy to do common tasks like exporting and uploading content. Easily create shell scripts to work with API data. Requirements hexpy is compatible with Python 3.6 and higher Installation To install the most recent stable release run pip install hexpy . To install the latest version: $ git clone https://github.com/sullivancolin/hexpy.git $ pip install hexpy/ Project Homepage Visit hexpy for full Documenation Visit Github project page for full source code. Quick Start >>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . login ( username = \"user@email.com\" , password = \"crimson_login\" ) >>> monitor_results_client = MonitorAPI ( session ) >>> monitor_results_client . details ( monitor_id ) { 'categories' : [{ 'hidden' : False , 'id' : 6054759055 , 'name' : 'Basic Positive' , 'sortOrder' : 100 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759059 , 'name' : 'Basic Neutral' , 'sortOrder' : 101 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759051 , 'name' : 'Basic Negative' , 'sortOrder' : 102 , ... }","title":"Home"},{"location":"#a-python-client-for-the-crimson-hexagon-api","text":"hexpy is a simple python package for working with the Crimson Hexagon API","title":"A Python Client for the Crimson Hexagon API"},{"location":"#why-use-this-client","text":"Easily and securely manage account authentication. Automatically abide by Crimson Hexagon's rate limits. Automatically convert python data to/from JSON strings. Automatically check requests success. Make it easy to do common tasks like exporting and uploading content. Easily create shell scripts to work with API data.","title":"Why use this client?"},{"location":"#requirements","text":"hexpy is compatible with Python 3.6 and higher","title":"Requirements"},{"location":"#installation","text":"To install the most recent stable release run pip install hexpy . To install the latest version: $ git clone https://github.com/sullivancolin/hexpy.git $ pip install hexpy/","title":"Installation"},{"location":"#project-homepage","text":"Visit hexpy for full Documenation Visit Github project page for full source code.","title":"Project Homepage"},{"location":"#quick-start","text":">>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . login ( username = \"user@email.com\" , password = \"crimson_login\" ) >>> monitor_results_client = MonitorAPI ( session ) >>> monitor_results_client . details ( monitor_id ) { 'categories' : [{ 'hidden' : False , 'id' : 6054759055 , 'name' : 'Basic Positive' , 'sortOrder' : 100 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759059 , 'name' : 'Basic Neutral' , 'sortOrder' : 101 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759051 , 'name' : 'Basic Negative' , 'sortOrder' : 102 , ... }","title":"Quick Start"},{"location":"Activity/","text":"Activity API Class for working with Crimson Hexagon Activity Report API. Example Usage >>> from hexpy import HexpySession , ActivityAPI >>> session = HexpySession . load_auth_from_file () >>> activity_client = ActivityAPI ( session ) >>> activity_client . monitor_creation ( organization_id ) Methods monitor_creation monitor_creation ( organization_id : int ) -> Dict [ str , Any ] Get Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period. Arguments organiztion_id: Integer, the id of the organization being requested. social_sites social_sites ( organization_id : int ) -> Dict [ str , Any ] Get Social Site Report and associated usernames for Teams within an Organization. Arguments organiztion_id: Integer, the id of the organization being requested. user_activity user_activity ( organization_id : int ) -> Dict [ str , Any ] Get a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed. Arguments organiztion_id: Integer, the id of the organization being requested. user_invitations user_invitations ( organization_id : int ) -> Dict [ str , Any ] Get a list of users within an Organization and which Team(s) they were invited to. Arguments organiztion_id: Integer, the id of the organization being requested.","title":"Activty Reports"},{"location":"Activity/#activity-api","text":"","title":"Activity API"},{"location":"Activity/#class-for-working-with-crimson-hexagon-activity-report-api","text":"","title":"Class for working with Crimson Hexagon Activity Report API."},{"location":"Activity/#example-usage","text":">>> from hexpy import HexpySession , ActivityAPI >>> session = HexpySession . load_auth_from_file () >>> activity_client = ActivityAPI ( session ) >>> activity_client . monitor_creation ( organization_id )","title":"Example Usage"},{"location":"Activity/#methods","text":"","title":"Methods"},{"location":"Activity/#monitor_creation","text":"monitor_creation ( organization_id : int ) -> Dict [ str , Any ] Get Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period.","title":"monitor_creation"},{"location":"Activity/#arguments","text":"organiztion_id: Integer, the id of the organization being requested.","title":"Arguments"},{"location":"Activity/#social_sites","text":"social_sites ( organization_id : int ) -> Dict [ str , Any ] Get Social Site Report and associated usernames for Teams within an Organization.","title":"social_sites"},{"location":"Activity/#arguments_1","text":"organiztion_id: Integer, the id of the organization being requested.","title":"Arguments"},{"location":"Activity/#user_activity","text":"user_activity ( organization_id : int ) -> Dict [ str , Any ] Get a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed.","title":"user_activity"},{"location":"Activity/#arguments_2","text":"organiztion_id: Integer, the id of the organization being requested.","title":"Arguments"},{"location":"Activity/#user_invitations","text":"user_invitations ( organization_id : int ) -> Dict [ str , Any ] Get a list of users within an Organization and which Team(s) they were invited to.","title":"user_invitations"},{"location":"Activity/#arguments_3","text":"organiztion_id: Integer, the id of the organization being requested.","title":"Arguments"},{"location":"Analysis/","text":"Analysis API Class for working with Crimson Hexagon Analysis API. Example Usage >>> from hexpy import HexpySession , AnalysisAPI >>> session = HexpySession . load_auth_from_file () >>> analysis_client = AnalysisAPI ( session ) >>> analysis_client . results ( request_id ) Methods analysis_request analysis_request ( data : Dict [ str , Any ]) -> Dict [ str , Any ] Submit a query task against 24 hours of social data. Arguments data: Dictionary, query and filter parameters results results ( request_id : int ) -> Dict [ str , Any ] Retrieve the status of the analysis request and the results. Arguments request_id: Integer, the identifier given for the analysis, generated via the Analysis Request endpoints image_analysis image_analysis ( url : str ) -> Dict [ str , Any ] Get object, scene, activity predictions for image from public url. Arguments url: String, the url of the image to analyze","title":"Analysis"},{"location":"Analysis/#analysis-api","text":"","title":"Analysis API"},{"location":"Analysis/#class-for-working-with-crimson-hexagon-analysis-api","text":"","title":"Class for working with Crimson Hexagon Analysis API."},{"location":"Analysis/#example-usage","text":">>> from hexpy import HexpySession , AnalysisAPI >>> session = HexpySession . load_auth_from_file () >>> analysis_client = AnalysisAPI ( session ) >>> analysis_client . results ( request_id )","title":"Example Usage"},{"location":"Analysis/#methods","text":"","title":"Methods"},{"location":"Analysis/#analysis_request","text":"analysis_request ( data : Dict [ str , Any ]) -> Dict [ str , Any ] Submit a query task against 24 hours of social data.","title":"analysis_request"},{"location":"Analysis/#arguments","text":"data: Dictionary, query and filter parameters","title":"Arguments"},{"location":"Analysis/#results","text":"results ( request_id : int ) -> Dict [ str , Any ] Retrieve the status of the analysis request and the results.","title":"results"},{"location":"Analysis/#arguments_1","text":"request_id: Integer, the identifier given for the analysis, generated via the Analysis Request endpoints","title":"Arguments"},{"location":"Analysis/#image_analysis","text":"image_analysis ( url : str ) -> Dict [ str , Any ] Get object, scene, activity predictions for image from public url.","title":"image_analysis"},{"location":"Analysis/#arguments_2","text":"url: String, the url of the image to analyze","title":"Arguments"},{"location":"CLI/","text":"Hexpy Command Line Interface hexpy comes with a console script for conveniently automating several common tasks Helpful Commands Export sample of monitor posts to a spreadsheet. Easily upload a spreadsheet as custom content for analysis in ForSight. Quickly get multiple metrics from monitor results as JSON. Compose powerful shell scripts with pipe-able commands such as jq , and xargs . Usage Basic $ hexpy Usage: hexpy [ OPTIONS ] COMMAND [ ARGS ] ... Command Line interface for working with Crimson Hexagon API. Options: --version Show the version and exit. --help Show this message and exit. Commands: api-documentation Get API documentation for all endpoints. export Export monitor posts as json or to a spreadsheet. login Session login credentials. metadata Get Metadata for account team, monitors, and geography. results Get Monitor results for 1 or more metrics. stream-posts Stream posts in real time, stop after a maximum of 10K. train Upload spreadsheet file of training examples for ... upload Upload spreadsheet file as custom content. See how each hexpy command works by running hexpy COMMAND --help Examples Login to Crimson API with you credentials and save your token $ hexpy login --force Enter username: username@email.com Enter password: *********** Success! Get Up-to-date API documentation as an html file $ hexpy api-documentation -o html Get list of all the user's teams using jq . $ hexpy metadata team_list | jq -r '.teams[] | [.name, .id] | @tsv' | column -t -s $'\\t' Get list of monitors for a user's team using jq . $ hexpy metadata monitor_list --team_id TEAM_ID | jq -r '.monitors[] | [.id, .name] | @tsv' | column -t -s $'\\t' Upload TSV file as my_custom_type with English as the language that has tab delimited columns. $ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator '\\t' Train a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories. $ hexpy train training_data.csv MONITOR_ID Get word cloud and volume information from the monitor in the specified date range. $ hexpy results MONITOR_ID volume word_cloud --date_range 2017 -01-01 2017 -02-01 Get monitor volume information for each day as a CSV using jq $ hexpy results MONITOR_ID volume | jq -r '.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv' \"2017-01-04T00:00:00\" ,74 \"2017-01-05T00:00:00\" ,101 \"2017-01-06T00:00:00\" ,67 \"2017-01-07T00:00:00\" ,58 \"2017-01-08T00:00:00\" ,64 \"2017-01-09T00:00:00\" ,72 \"2017-01-10T00:00:00\" ,92 \"2017-01-11T00:00:00\" ,72 \"2017-01-12T00:00:00\" ,133 \"2017-01-13T00:00:00\" ,67 ... Export Monitor posts to excel file called my_export.xlsx $ hexpy export MONITOR_ID --output_type excel --filename my_export Export Monitor posts as json and redirect to my_export.json $ hexpy export MONITOR_ID --output_type json > my_export.json Export posts to excel for multiple monitors in parallel from a file containing a list of monitor ids $ cat monitor_ids.txt | xargs -n 1 -P 4 hexpy export -o excel Stream 1K real-time posts to json in the terminal $ hexpy stream-posts STREAM_ID --max_docs 1000 --output_type json Stream up to 10K real-time posts to a csv file with tab delimiter $ hexpy stream-posts STREAM_ID --output_type csv --max_docs 10000 --separator '\\t' | pv -s 10000 -l > streamed_posts.csv","title":"Command Line Interface"},{"location":"CLI/#hexpy-command-line-interface","text":"hexpy comes with a console script for conveniently automating several common tasks","title":"Hexpy Command Line Interface"},{"location":"CLI/#helpful-commands","text":"Export sample of monitor posts to a spreadsheet. Easily upload a spreadsheet as custom content for analysis in ForSight. Quickly get multiple metrics from monitor results as JSON. Compose powerful shell scripts with pipe-able commands such as jq , and xargs .","title":"Helpful Commands"},{"location":"CLI/#usage","text":"","title":"Usage"},{"location":"CLI/#basic","text":"$ hexpy Usage: hexpy [ OPTIONS ] COMMAND [ ARGS ] ... Command Line interface for working with Crimson Hexagon API. Options: --version Show the version and exit. --help Show this message and exit. Commands: api-documentation Get API documentation for all endpoints. export Export monitor posts as json or to a spreadsheet. login Session login credentials. metadata Get Metadata for account team, monitors, and geography. results Get Monitor results for 1 or more metrics. stream-posts Stream posts in real time, stop after a maximum of 10K. train Upload spreadsheet file of training examples for ... upload Upload spreadsheet file as custom content. See how each hexpy command works by running hexpy COMMAND --help","title":"Basic"},{"location":"CLI/#examples","text":"Login to Crimson API with you credentials and save your token $ hexpy login --force Enter username: username@email.com Enter password: *********** Success! Get Up-to-date API documentation as an html file $ hexpy api-documentation -o html Get list of all the user's teams using jq . $ hexpy metadata team_list | jq -r '.teams[] | [.name, .id] | @tsv' | column -t -s $'\\t' Get list of monitors for a user's team using jq . $ hexpy metadata monitor_list --team_id TEAM_ID | jq -r '.monitors[] | [.id, .name] | @tsv' | column -t -s $'\\t' Upload TSV file as my_custom_type with English as the language that has tab delimited columns. $ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator '\\t' Train a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories. $ hexpy train training_data.csv MONITOR_ID Get word cloud and volume information from the monitor in the specified date range. $ hexpy results MONITOR_ID volume word_cloud --date_range 2017 -01-01 2017 -02-01 Get monitor volume information for each day as a CSV using jq $ hexpy results MONITOR_ID volume | jq -r '.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv' \"2017-01-04T00:00:00\" ,74 \"2017-01-05T00:00:00\" ,101 \"2017-01-06T00:00:00\" ,67 \"2017-01-07T00:00:00\" ,58 \"2017-01-08T00:00:00\" ,64 \"2017-01-09T00:00:00\" ,72 \"2017-01-10T00:00:00\" ,92 \"2017-01-11T00:00:00\" ,72 \"2017-01-12T00:00:00\" ,133 \"2017-01-13T00:00:00\" ,67 ... Export Monitor posts to excel file called my_export.xlsx $ hexpy export MONITOR_ID --output_type excel --filename my_export Export Monitor posts as json and redirect to my_export.json $ hexpy export MONITOR_ID --output_type json > my_export.json Export posts to excel for multiple monitors in parallel from a file containing a list of monitor ids $ cat monitor_ids.txt | xargs -n 1 -P 4 hexpy export -o excel Stream 1K real-time posts to json in the terminal $ hexpy stream-posts STREAM_ID --max_docs 1000 --output_type json Stream up to 10K real-time posts to a csv file with tab delimiter $ hexpy stream-posts STREAM_ID --output_type csv --max_docs 10000 --separator '\\t' | pv -s 10000 -l > streamed_posts.csv","title":"Examples"},{"location":"Custom/","text":"Custom API Class for creating a custom API Example usage. >>> from hexpy import HexpySession , CustomAPI >>> session = HexpySession . load_auth_from_file () >>> custom_client = CustomAPI ( session , \"/some/endpoint/\" ) >>> custom_client . get ( url_params = \"<url_param1>/path\" , params = { \"query_string_param\" : some_value }) Methods get get ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> Dict [ str , Any ] Send get request using URL parameters and query-string parameters. Arguments: url_params: String, url params and endpoints concatenated. params: Dict, querystring params. post post ( url_params : str = \"\" , params : Dict [ str , Any ] = None , data : Dict [ str , Any ] = None , ) -> Dict [ str , Any ] Send post request using URL parameters and query-string parameters, and json data. Arguments url_params: String, url params and endpoints concatenated. params: Dict, querystring params. data: Dict, json data to post. delete delete ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> Dict [ str , Any ] Send delete request using URL parameters and query-string parameters. Arguments url_params: String, url params and endpoints concatenated. params: Dict, querystring params.","title":"Custom"},{"location":"Custom/#custom-api","text":"","title":"Custom API"},{"location":"Custom/#class-for-creating-a-custom-api","text":"","title":"Class for creating a custom API"},{"location":"Custom/#example-usage","text":">>> from hexpy import HexpySession , CustomAPI >>> session = HexpySession . load_auth_from_file () >>> custom_client = CustomAPI ( session , \"/some/endpoint/\" ) >>> custom_client . get ( url_params = \"<url_param1>/path\" , params = { \"query_string_param\" : some_value })","title":"Example usage."},{"location":"Custom/#methods","text":"","title":"Methods"},{"location":"Custom/#get","text":"get ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> Dict [ str , Any ] Send get request using URL parameters and query-string parameters.","title":"get"},{"location":"Custom/#arguments","text":"url_params: String, url params and endpoints concatenated. params: Dict, querystring params.","title":"Arguments:"},{"location":"Custom/#post","text":"post ( url_params : str = \"\" , params : Dict [ str , Any ] = None , data : Dict [ str , Any ] = None , ) -> Dict [ str , Any ] Send post request using URL parameters and query-string parameters, and json data.","title":"post"},{"location":"Custom/#arguments_1","text":"url_params: String, url params and endpoints concatenated. params: Dict, querystring params. data: Dict, json data to post.","title":"Arguments"},{"location":"Custom/#delete","text":"delete ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> Dict [ str , Any ] Send delete request using URL parameters and query-string parameters.","title":"delete"},{"location":"Custom/#arguments_2","text":"url_params: String, url params and endpoints concatenated. params: Dict, querystring params.","title":"Arguments"},{"location":"Metadata/","text":"Metadata API Class for working with Crimson Hexagon account and analysis metadata. Example usage. >>> from hexpy import HexpySession , MetadataAPI >>> session = HexpySession . load_auth_from_file () >>> metadata_client = MetadataAPI ( session ) >>> metadata_client . team_list () Methods team_list team_list () -> Dict [ str , Any ] Return a list of teams accessible to the requesting user. monitor_list monitor_list ( team_id : int ) -> Dict [ str , Any ] Returns a list of monitors accessible to the user team along with metadata related to those monitors. Arguments team_id: integer id number for a team geography geography () -> Dict [ str , Any ] Return all the geographical locations that you may use to filter monitor results and to upload documents with location information. states states ( country : str ) -> Dict [ str , Any ] Return all the states for a given country that you may use to filter monitor results and to upload documents with location information. Arguments country: country code to filter states cities cities ( country : str ) -> Dict [ str , Any ] Returns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information. Arguments country: country: country code to filter states countries countries () -> Dict [ str , Any ] Returns all the countries that you may use to filter monitor results and to upload documents with location information. image_classes image_classes () -> Dict [ str , Any ] Return list of all class IDs and names. api_documentation api_documentation () -> Dict [ str , Any ] Return latest JSON version of Crimson Hexagon API endpoint documentation.","title":"Metadata"},{"location":"Metadata/#metadata-api","text":"","title":"Metadata API"},{"location":"Metadata/#class-for-working-with-crimson-hexagon-account-and-analysis-metadata","text":"","title":"Class for working with Crimson Hexagon account and analysis metadata."},{"location":"Metadata/#example-usage","text":">>> from hexpy import HexpySession , MetadataAPI >>> session = HexpySession . load_auth_from_file () >>> metadata_client = MetadataAPI ( session ) >>> metadata_client . team_list ()","title":"Example usage."},{"location":"Metadata/#methods","text":"","title":"Methods"},{"location":"Metadata/#team_list","text":"team_list () -> Dict [ str , Any ] Return a list of teams accessible to the requesting user.","title":"team_list"},{"location":"Metadata/#monitor_list","text":"monitor_list ( team_id : int ) -> Dict [ str , Any ] Returns a list of monitors accessible to the user team along with metadata related to those monitors.","title":"monitor_list"},{"location":"Metadata/#arguments","text":"team_id: integer id number for a team","title":"Arguments"},{"location":"Metadata/#geography","text":"geography () -> Dict [ str , Any ] Return all the geographical locations that you may use to filter monitor results and to upload documents with location information.","title":"geography"},{"location":"Metadata/#states","text":"states ( country : str ) -> Dict [ str , Any ] Return all the states for a given country that you may use to filter monitor results and to upload documents with location information.","title":"states"},{"location":"Metadata/#arguments_1","text":"country: country code to filter states","title":"Arguments"},{"location":"Metadata/#cities","text":"cities ( country : str ) -> Dict [ str , Any ] Returns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information.","title":"cities"},{"location":"Metadata/#arguments_2","text":"country: country: country code to filter states","title":"Arguments"},{"location":"Metadata/#countries","text":"countries () -> Dict [ str , Any ] Returns all the countries that you may use to filter monitor results and to upload documents with location information.","title":"countries"},{"location":"Metadata/#image_classes","text":"image_classes () -> Dict [ str , Any ] Return list of all class IDs and names.","title":"image_classes"},{"location":"Metadata/#api_documentation","text":"api_documentation () -> Dict [ str , Any ] Return latest JSON version of Crimson Hexagon API endpoint documentation.","title":"api_documentation"},{"location":"Monitor/","text":"Monitor API Class for working with Crimson Hexagon Monitor API. Example usage. >>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . load_auth_from_file () >>> monitor_client = MonitorAPI ( session ) >>> details = monitor_client . details ( monitor_id ) >>> start = details [ \"resultsStart\" ] >>> end = details [ \"resultsEnd\" ] >>> monitor_client . posts ( monitor_id , start , end ) Methods details details ( monitor_id : int ) -> Dict [ str , Any ] Return detailed metadata about the selected monitor, including category metadata. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested audit audit ( monitor_id : int ) -> Dict [ str , Any ] Return audit information about the selected monitor, sorted from most to least recent. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested word_cloud word_cloud ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> Dict [ str , Any ] Return an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts training_posts training_posts ( monitor_id : int , category : int = None ) -> Dict [ str , Any ] Return a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested category: Integer, category id to target training posts from a specific category train_monitor train_monitor ( monitor_id : int , category_id : int , data : List [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload individual training document monitors programmatically. Upload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option. Reference Arguments monitor_id: Integer, id of the monitor or monitor filter being requested category_id: Integer, the category this content should belong to data: List of document dictionaries with required fields interest_affinities interest_affinities ( monitor_id : int , start : str , end : str , daily : bool = False , document_source : str = None ) -> Dict [ str , Any ] Return information about the authors in a monitor and their affinity with a range of pre-defined topics. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD daily: Boolean, if true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range document_source: String, document source for affinities. valid params include TWITTER or TUMBLR topics topics ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> Dict [ str , Any ]: Return the XML data that can be used to generate clustering visualizations using third-party software. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts topic_waves topic_waves ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the Topic waves information for a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts top_sources top_sources ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD image_results image_results ( monitor_id : int , start : str , end : str , object_type : str = \"\" , top : int = 100 ) -> Dict [ str , Any ] Return a breakdown of the top image classes within a provided monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD object_type: String, specifies type of image classes, valid values [object, scene, action, logo] top : Integer, if defined, only the selected number of classes will be returned volume volume ( monitor_id : int , start : str , end : str , group_by : str = \"DAILY\" ) -> Dict [ str , Any ] Return volume of total posts in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD group_by: String, specifies how the volume data over the date range will be grouped. [HOURLY, DAILY, WEEKLY, MONTHLY] dayandtime dayandtime ( monitor_id : int , start : str , end : str , aggregate_by_day : bool = False , use_local_time : bool = False ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by date. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD aggregate_by_day: Boolean, if True, volume information will be aggregated by day of the week instead of time of day use_local_time: if True, volume aggregation will use the time local to the publishing author of a post, instead of converting that time to the timezone of the selected monitor sentiment_and_categories sentiment_and_categories ( monitor_id : int , start : str , end : str , hide_excluded : bool = False ) -> Dict [ str , Any ] Return aggregate volume, sentiment, emotion and opinion category analysis for a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD hide_excluded: Boolean, if True, categories set as hidden will not be included in category proportion calculations. aggregate aggregate ( monitor_ids : Union [ Sequence [ int ], int ], dates : Union [ Sequence [ str ], Sequence [ Sequence [ str ]]], metrics : Union [ Sequence [ str ], str ]) -> Sequence [ Dict [ str , Any ]] Return aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics. Valid metrics 'volume' 'word_cloud' 'top_sources' 'interest_affinities' 'sentiment_and_categories' Arguments monitor_ids: Integer or list of Integers, id(s) of the monitor(s) being requested dates: Tuple of Strings or list of Tuples, pair(s) of 'YYYY-MM-DD' date strings metrics: String or list of Strings, metric(s) to aggregate upon posts posts ( monitor_id : int , start : str , end : str , filter_string : str = None , extend_limit : bool = False , full_contents : bool = False , geotagged : bool = False ) -> Dict [ str , Any ] Return post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts extend_limit: Boolean if True increase limit of returned posts from 500 per call to 10000 per call full_contents: Boolean, if True, the contents field will return the original, complete posts contents instead of truncating around search terms geotagged: Boolean, if True, returns only geotagged documents matching the given filter Demographics This collection of endpoints provide demographic volume metrics for users within a given monitor. age age ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by age bracket. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD ethnicity ethnicity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by ethnicity. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD gender gender ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by gender. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Geography cities cities ( monitor_id : int , start : str , end : str , country : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by city. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter cities states states ( monitor_id : int , start : str , end : str , country : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by state. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter states countries countries ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by country. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Twitter This collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors. twitter_authors twitter_authors ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information related to the Twitter authors who have posted in a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_metrics twitter_metrics ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about the top hashtags, mentions, and retweets in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_followers twitter_followers ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_sent_posts twitter_sent_posts ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_engagement twitter_engagement ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about retweets, replies, and @mentions for a Twitter Social Account monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Facebook facebook_admin_posts facebook_admin_posts ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD facebook_likes facebook_likes ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD facebook_activity facebook_activity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about actions (likes, comments, shares) made by users and admins for a given page. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Instagram instagram_top_hashtags instagram_top_hashtags ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight). Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_followers instagram_followers ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_sent_media instagram_sent_media ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return media sent by admins in a targeted Instagram account. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_activity instagram_activity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about actions (likes, comments) made by users and admins for a given account. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Monitor"},{"location":"Monitor/#monitor-api","text":"","title":"Monitor API"},{"location":"Monitor/#class-for-working-with-crimson-hexagon-monitor-api","text":"","title":"Class for working with Crimson Hexagon Monitor API."},{"location":"Monitor/#example-usage","text":">>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . load_auth_from_file () >>> monitor_client = MonitorAPI ( session ) >>> details = monitor_client . details ( monitor_id ) >>> start = details [ \"resultsStart\" ] >>> end = details [ \"resultsEnd\" ] >>> monitor_client . posts ( monitor_id , start , end )","title":"Example usage."},{"location":"Monitor/#methods","text":"","title":"Methods"},{"location":"Monitor/#details","text":"details ( monitor_id : int ) -> Dict [ str , Any ] Return detailed metadata about the selected monitor, including category metadata.","title":"details"},{"location":"Monitor/#arguments","text":"monitor_id: Integer, id of the monitor or monitor filter being requested","title":"Arguments"},{"location":"Monitor/#audit","text":"audit ( monitor_id : int ) -> Dict [ str , Any ] Return audit information about the selected monitor, sorted from most to least recent.","title":"audit"},{"location":"Monitor/#arguments_1","text":"monitor_id: Integer, id of the monitor or monitor filter being requested","title":"Arguments"},{"location":"Monitor/#word_cloud","text":"word_cloud ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> Dict [ str , Any ] Return an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters.","title":"word_cloud"},{"location":"Monitor/#arguments_2","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts","title":"Arguments"},{"location":"Monitor/#training_posts","text":"training_posts ( monitor_id : int , category : int = None ) -> Dict [ str , Any ] Return a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category.","title":"training_posts"},{"location":"Monitor/#arguments_3","text":"monitor_id: Integer, id of the monitor or monitor filter being requested category: Integer, category id to target training posts from a specific category","title":"Arguments"},{"location":"Monitor/#train_monitor","text":"train_monitor ( monitor_id : int , category_id : int , data : List [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload individual training document monitors programmatically. Upload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option. Reference","title":"train_monitor"},{"location":"Monitor/#arguments_4","text":"monitor_id: Integer, id of the monitor or monitor filter being requested category_id: Integer, the category this content should belong to data: List of document dictionaries with required fields","title":"Arguments"},{"location":"Monitor/#interest_affinities","text":"interest_affinities ( monitor_id : int , start : str , end : str , daily : bool = False , document_source : str = None ) -> Dict [ str , Any ] Return information about the authors in a monitor and their affinity with a range of pre-defined topics.","title":"interest_affinities"},{"location":"Monitor/#arguments_5","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD daily: Boolean, if true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range document_source: String, document source for affinities. valid params include TWITTER or TUMBLR","title":"Arguments"},{"location":"Monitor/#topics","text":"topics ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> Dict [ str , Any ]: Return the XML data that can be used to generate clustering visualizations using third-party software.","title":"topics"},{"location":"Monitor/#arguments_6","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts","title":"Arguments"},{"location":"Monitor/#topic_waves","text":"topic_waves ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the Topic waves information for a monitor.","title":"topic_waves"},{"location":"Monitor/#arguments_7","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts","title":"Arguments"},{"location":"Monitor/#top_sources","text":"top_sources ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor.","title":"top_sources"},{"location":"Monitor/#arguments_8","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#image_results","text":"image_results ( monitor_id : int , start : str , end : str , object_type : str = \"\" , top : int = 100 ) -> Dict [ str , Any ] Return a breakdown of the top image classes within a provided monitor.","title":"image_results"},{"location":"Monitor/#arguments_9","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD object_type: String, specifies type of image classes, valid values [object, scene, action, logo] top : Integer, if defined, only the selected number of classes will be returned","title":"Arguments"},{"location":"Monitor/#volume","text":"volume ( monitor_id : int , start : str , end : str , group_by : str = \"DAILY\" ) -> Dict [ str , Any ] Return volume of total posts in a monitor.","title":"volume"},{"location":"Monitor/#arguments_10","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD group_by: String, specifies how the volume data over the date range will be grouped. [HOURLY, DAILY, WEEKLY, MONTHLY]","title":"Arguments"},{"location":"Monitor/#dayandtime","text":"dayandtime ( monitor_id : int , start : str , end : str , aggregate_by_day : bool = False , use_local_time : bool = False ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by date.","title":"dayandtime"},{"location":"Monitor/#arguments_11","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD aggregate_by_day: Boolean, if True, volume information will be aggregated by day of the week instead of time of day use_local_time: if True, volume aggregation will use the time local to the publishing author of a post, instead of converting that time to the timezone of the selected monitor","title":"Arguments"},{"location":"Monitor/#sentiment_and_categories","text":"sentiment_and_categories ( monitor_id : int , start : str , end : str , hide_excluded : bool = False ) -> Dict [ str , Any ] Return aggregate volume, sentiment, emotion and opinion category analysis for a given monitor.","title":"sentiment_and_categories"},{"location":"Monitor/#arguments_12","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD hide_excluded: Boolean, if True, categories set as hidden will not be included in category proportion calculations.","title":"Arguments"},{"location":"Monitor/#aggregate","text":"aggregate ( monitor_ids : Union [ Sequence [ int ], int ], dates : Union [ Sequence [ str ], Sequence [ Sequence [ str ]]], metrics : Union [ Sequence [ str ], str ]) -> Sequence [ Dict [ str , Any ]] Return aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics.","title":"aggregate"},{"location":"Monitor/#valid-metrics","text":"'volume' 'word_cloud' 'top_sources' 'interest_affinities' 'sentiment_and_categories'","title":"Valid metrics"},{"location":"Monitor/#arguments_13","text":"monitor_ids: Integer or list of Integers, id(s) of the monitor(s) being requested dates: Tuple of Strings or list of Tuples, pair(s) of 'YYYY-MM-DD' date strings metrics: String or list of Strings, metric(s) to aggregate upon","title":"Arguments"},{"location":"Monitor/#posts","text":"posts ( monitor_id : int , start : str , end : str , filter_string : str = None , extend_limit : bool = False , full_contents : bool = False , geotagged : bool = False ) -> Dict [ str , Any ] Return post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor.","title":"posts"},{"location":"Monitor/#arguments_14","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts extend_limit: Boolean if True increase limit of returned posts from 500 per call to 10000 per call full_contents: Boolean, if True, the contents field will return the original, complete posts contents instead of truncating around search terms geotagged: Boolean, if True, returns only geotagged documents matching the given filter","title":"Arguments"},{"location":"Monitor/#demographics","text":"This collection of endpoints provide demographic volume metrics for users within a given monitor.","title":"Demographics"},{"location":"Monitor/#age","text":"age ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by age bracket.","title":"age"},{"location":"Monitor/#arguments_15","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#ethnicity","text":"ethnicity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by ethnicity.","title":"ethnicity"},{"location":"Monitor/#arguments_16","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#gender","text":"gender ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by gender.","title":"gender"},{"location":"Monitor/#arguments_17","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#geography","text":"","title":"Geography"},{"location":"Monitor/#cities","text":"cities ( monitor_id : int , start : str , end : str , country : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by city.","title":"cities"},{"location":"Monitor/#arguments_18","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter cities","title":"Arguments"},{"location":"Monitor/#states","text":"states ( monitor_id : int , start : str , end : str , country : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by state.","title":"states"},{"location":"Monitor/#arguments_19","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter states","title":"Arguments"},{"location":"Monitor/#countries","text":"countries ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return volume metrics for a given monitor split by country.","title":"countries"},{"location":"Monitor/#arguments_20","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#twitter","text":"This collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors.","title":"Twitter"},{"location":"Monitor/#twitter_authors","text":"twitter_authors ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information related to the Twitter authors who have posted in a given monitor.","title":"twitter_authors"},{"location":"Monitor/#arguments_21","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#twitter_metrics","text":"twitter_metrics ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about the top hashtags, mentions, and retweets in a monitor.","title":"twitter_metrics"},{"location":"Monitor/#arguments_22","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#twitter_followers","text":"twitter_followers ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates.","title":"twitter_followers"},{"location":"Monitor/#arguments_23","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#twitter_sent_posts","text":"twitter_sent_posts ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor.","title":"twitter_sent_posts"},{"location":"Monitor/#arguments_24","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#twitter_engagement","text":"twitter_engagement ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about retweets, replies, and @mentions for a Twitter Social Account monitor.","title":"twitter_engagement"},{"location":"Monitor/#arguments_25","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#facebook","text":"","title":"Facebook"},{"location":"Monitor/#facebook_admin_posts","text":"facebook_admin_posts ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor.","title":"facebook_admin_posts"},{"location":"Monitor/#arguments_26","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#facebook_likes","text":"facebook_likes ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates.","title":"facebook_likes"},{"location":"Monitor/#arguments_27","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#facebook_activity","text":"facebook_activity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about actions (likes, comments, shares) made by users and admins for a given page.","title":"facebook_activity"},{"location":"Monitor/#arguments_28","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#instagram","text":"","title":"Instagram"},{"location":"Monitor/#instagram_top_hashtags","text":"instagram_top_hashtags ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight).","title":"instagram_top_hashtags"},{"location":"Monitor/#arguments_29","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#instagram_followers","text":"instagram_followers ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates.","title":"instagram_followers"},{"location":"Monitor/#arguments_30","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#instagram_sent_media","text":"instagram_sent_media ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return media sent by admins in a targeted Instagram account.","title":"instagram_sent_media"},{"location":"Monitor/#arguments_31","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Monitor/#instagram_activity","text":"instagram_activity ( monitor_id : int , start : str , end : str ) -> Dict [ str , Any ] Return information about actions (likes, comments) made by users and admins for a given account.","title":"instagram_activity"},{"location":"Monitor/#arguments_32","text":"monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Arguments"},{"location":"Realtime/","text":"Realtime API Class for working with Realtime Results API. Example usage. >>> from hexpy import HexpySession , RealtimeAPI >>> session = HexpySession . load_auth_from_file () >>> realtime_client = RealtimeAPI ( session ) >>> realtime_client . list ( team_id ) >>> session . close () Methods list list ( team_id : int ) -> Dict [ str , Any ] Get the Monitors which are in Proteus Arguments team_id: Integer, The id of the team to which the listed monitors belong. configure configure ( monitor_id : int ) -> Dict [ str , Any ] Configure the Realtime evaluators for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. enable enable ( monitor_id : int ) -> Dict [ str , Any ] Enable Realtime Data. Arguments monitor_id: Integer, the id of the monitor being requested. disbale disbale ( monitor_id : int ) -> Dict [ str , Any ] Disable Realtime Data. Arguments monitor_id: Integer, the id of the monitor being requested. detail detail ( monitor_id : int ) -> Dict [ str , Any ] Get the Realtime evaluators details for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. cashtags cashtags ( monitor_id : int , start : int = None , top : int = None ) -> Dict [ str , Any ] Get Cashtags associated to a Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N cashtags to retrieve. hashtags hashtags ( monitor_id : int , start : int = None , top : int = None ) -> Dict [ str , Any ] Get Hashtags associated to a Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N hashtags to retrieve. retweets retweets ( monitor_id : int ) -> Dict [ str , Any ] Get the Realtime retweets for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. social_guids social_guids ( monitor_id : int , doc_type : str , start : int = None , received_after : int = None ) -> Dict [ str , Any ] Get the Realtime social guids for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. doct_type: String, Specifies the document type. start: Integer, specifies inclusive start date in epoch seconds. received_after: Integer, Specifies inclusive received after date in epoch seconds. maxresults: Integer, Specifies maximum results to fetch. tweets tweets ( monitor_id : int , start : int = None ) -> Dict [ str , Any ] Get the Realtime tweets for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. volume volume ( monitor_id : int , start : int = None , doc_type : List = None ) -> Dict [ str , Any ] Get the Realtime volume for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: List, specifies the document type to filter. volume_by_sentiment volume_by_sentiment ( monitor_id : int , start : int , doc_type : str ) -> Dict [ str , Any ] Get the Realtime volume by sentiment for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter. volume_by_emotion volume_by_emotion ( monitor_id : int , start : int , doc_type : str ) -> Dict [ str , Any ] Get the Realtime volume by emotion for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter.","title":"Realtime"},{"location":"Realtime/#realtime-api","text":"","title":"Realtime API"},{"location":"Realtime/#class-for-working-with-realtime-results-api","text":"","title":"Class for working with Realtime Results API."},{"location":"Realtime/#example-usage","text":">>> from hexpy import HexpySession , RealtimeAPI >>> session = HexpySession . load_auth_from_file () >>> realtime_client = RealtimeAPI ( session ) >>> realtime_client . list ( team_id ) >>> session . close ()","title":"Example usage."},{"location":"Realtime/#methods","text":"","title":"Methods"},{"location":"Realtime/#list","text":"list ( team_id : int ) -> Dict [ str , Any ] Get the Monitors which are in Proteus","title":"list"},{"location":"Realtime/#arguments","text":"team_id: Integer, The id of the team to which the listed monitors belong.","title":"Arguments"},{"location":"Realtime/#configure","text":"configure ( monitor_id : int ) -> Dict [ str , Any ] Configure the Realtime evaluators for the Monitor.","title":"configure"},{"location":"Realtime/#arguments_1","text":"monitor_id: Integer, the id of the monitor being requested.","title":"Arguments"},{"location":"Realtime/#enable","text":"enable ( monitor_id : int ) -> Dict [ str , Any ] Enable Realtime Data.","title":"enable"},{"location":"Realtime/#arguments_2","text":"monitor_id: Integer, the id of the monitor being requested.","title":"Arguments"},{"location":"Realtime/#disbale","text":"disbale ( monitor_id : int ) -> Dict [ str , Any ] Disable Realtime Data.","title":"disbale"},{"location":"Realtime/#arguments_3","text":"monitor_id: Integer, the id of the monitor being requested.","title":"Arguments"},{"location":"Realtime/#detail","text":"detail ( monitor_id : int ) -> Dict [ str , Any ] Get the Realtime evaluators details for the Monitor.","title":"detail"},{"location":"Realtime/#arguments_4","text":"monitor_id: Integer, the id of the monitor being requested.","title":"Arguments"},{"location":"Realtime/#cashtags","text":"cashtags ( monitor_id : int , start : int = None , top : int = None ) -> Dict [ str , Any ] Get Cashtags associated to a Monitor.","title":"cashtags"},{"location":"Realtime/#arguments_5","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N cashtags to retrieve.","title":"Arguments"},{"location":"Realtime/#hashtags","text":"hashtags ( monitor_id : int , start : int = None , top : int = None ) -> Dict [ str , Any ] Get Hashtags associated to a Monitor.","title":"hashtags"},{"location":"Realtime/#arguments_6","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N hashtags to retrieve.","title":"Arguments"},{"location":"Realtime/#retweets","text":"retweets ( monitor_id : int ) -> Dict [ str , Any ] Get the Realtime retweets for the Monitor.","title":"retweets"},{"location":"Realtime/#arguments_7","text":"monitor_id: Integer, the id of the monitor being requested.","title":"Arguments"},{"location":"Realtime/#social_guids","text":"social_guids ( monitor_id : int , doc_type : str , start : int = None , received_after : int = None ) -> Dict [ str , Any ] Get the Realtime social guids for the Monitor.","title":"social_guids"},{"location":"Realtime/#arguments_8","text":"monitor_id: Integer, the id of the monitor being requested. doct_type: String, Specifies the document type. start: Integer, specifies inclusive start date in epoch seconds. received_after: Integer, Specifies inclusive received after date in epoch seconds. maxresults: Integer, Specifies maximum results to fetch.","title":"Arguments"},{"location":"Realtime/#tweets","text":"tweets ( monitor_id : int , start : int = None ) -> Dict [ str , Any ] Get the Realtime tweets for the Monitor.","title":"tweets"},{"location":"Realtime/#arguments_9","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds.","title":"Arguments"},{"location":"Realtime/#volume","text":"volume ( monitor_id : int , start : int = None , doc_type : List = None ) -> Dict [ str , Any ] Get the Realtime volume for the Monitor.","title":"volume"},{"location":"Realtime/#arguments_10","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: List, specifies the document type to filter.","title":"Arguments"},{"location":"Realtime/#volume_by_sentiment","text":"volume_by_sentiment ( monitor_id : int , start : int , doc_type : str ) -> Dict [ str , Any ] Get the Realtime volume by sentiment for the Monitor.","title":"volume_by_sentiment"},{"location":"Realtime/#arguments_11","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter.","title":"Arguments"},{"location":"Realtime/#volume_by_emotion","text":"volume_by_emotion ( monitor_id : int , start : int , doc_type : str ) -> Dict [ str , Any ] Get the Realtime volume by emotion for the Monitor.","title":"volume_by_emotion"},{"location":"Realtime/#arguments_12","text":"monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter.","title":"Arguments"},{"location":"Session/","text":"Session Creating a session and generating a token for API requests. Login using token, or username. Optionally include password, or enter it at the prompt. >>> from hexpy import HexpySession >>> session = HexpySession . login ( username = \"username@gmail.com\" , password = \"secretpassword\" ) >>> session . save_token () # saving token to ~/.hexpy/credentials.json or >>> session = HexpySession . login ( username = \"username@email.com\" ) Enter password : ********* >>> session . save_token () or instantiate a session using a token >>> session = HexpySession ( token = \"previously_saved_token\" ) Create instance by loading token from file. Default is ~/.hexpy/credentials.json >>> session = HexpySession . load_auth_from_file () Create instance with context manager to close TCP session automatically when finished >>> with HexpySession . load_auth_from_file () as session : ... : client = MonitorAPI ( session ) ... : # use client to call API multiple times with same session >>> # session TCP connection is closed until next call to API Methods login login ( username : str , password : str = None , no_expiration : bool = False ) -> HexpySession Instantiate class from username and password. Arguments username: account username. password: account password. no_expiration: True/False token with 24 expiration. save_token save_token ( path : str = None ) -> None Save authorization token. Arguments path: String, path to store credentials. default is ~/.hexpy/credentials.json load_auth_from_file load_auth_from_file ( path : str = None ) -> HexpySession Instantiate class from previously saved credentials file. Arguments path: String, path to store credentials. default is ~/.hexpy/credentials.json close close () -> None Close open connection to API server.","title":"Session"},{"location":"Session/#session","text":"","title":"Session"},{"location":"Session/#creating-a-session-and-generating-a-token-for-api-requests","text":"Login using token, or username. Optionally include password, or enter it at the prompt. >>> from hexpy import HexpySession >>> session = HexpySession . login ( username = \"username@gmail.com\" , password = \"secretpassword\" ) >>> session . save_token () # saving token to ~/.hexpy/credentials.json or >>> session = HexpySession . login ( username = \"username@email.com\" ) Enter password : ********* >>> session . save_token () or instantiate a session using a token >>> session = HexpySession ( token = \"previously_saved_token\" ) Create instance by loading token from file. Default is ~/.hexpy/credentials.json >>> session = HexpySession . load_auth_from_file () Create instance with context manager to close TCP session automatically when finished >>> with HexpySession . load_auth_from_file () as session : ... : client = MonitorAPI ( session ) ... : # use client to call API multiple times with same session >>> # session TCP connection is closed until next call to API","title":"Creating a session and generating a token for API requests."},{"location":"Session/#methods","text":"","title":"Methods"},{"location":"Session/#login","text":"login ( username : str , password : str = None , no_expiration : bool = False ) -> HexpySession Instantiate class from username and password.","title":"login"},{"location":"Session/#arguments","text":"username: account username. password: account password. no_expiration: True/False token with 24 expiration.","title":"Arguments"},{"location":"Session/#save_token","text":"save_token ( path : str = None ) -> None Save authorization token.","title":"save_token"},{"location":"Session/#arguments_1","text":"path: String, path to store credentials. default is ~/.hexpy/credentials.json","title":"Arguments"},{"location":"Session/#load_auth_from_file","text":"load_auth_from_file ( path : str = None ) -> HexpySession Instantiate class from previously saved credentials file.","title":"load_auth_from_file"},{"location":"Session/#arguments_2","text":"path: String, path to store credentials. default is ~/.hexpy/credentials.json","title":"Arguments"},{"location":"Session/#close","text":"close () -> None Close open connection to API server.","title":"close"},{"location":"Streams/","text":"Streams API Class for working with Streams API. Example usage. >>> from hexpy import HexpySession , StreamsAPI >>> session = HexpySession . load_auth_from_file () >>> streams_client = StreamsAPI ( session ) >>> streams_client . stream_list ( team_id ) Methods posts posts ( stream_id : int , count : int = 100 ) -> Dict [ str , Any ] Return posts from a stream. Arguments: stream_id: Integer, the id of the stream containing the posts. count: Integer, the count of posts to retrieve from the stream, max = 100. stream_list stream_list ( team_id : int ) -> Dict [ str , Any ] List all available Streams for a team. Arguments team_id: Integer the id of the team. create_stream create_stream ( team_id : int , name : str ) -> Dict [ str , Any ] Create new stream for a team. System Admin Only. Arguments team_id: Integer, the id of the team to associate created stream with. name: String, the name to associate with the newly created stream. delete_stream delete_stream ( stream_id : int ) -> Dict [ str , Any ] Delete a stream. System Admin Only. Arguments stream_id: Integer, the id of the stream to be deleted. add_monitor_to_stream add_monitor_to_stream ( stream_id : int , monitor_id : int ) -> Dict [ str , Any ] Associate a monitor with a stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be modified. monitor_id: Integer, the id to be associated with the stream. remove_monitor_from_stream remove_monitor_from_stream ( stream_id : int , monitor_id : int ) -> Dict [ str , Any ] Remove association between monitor and stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be updated. monitor_id: Integer, the id to be removed from the stream. update_stream update_stream ( stream_id : int , name : str ) -> Dict [ str , Any ] Update name of stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be updated. name: String, the new name to be associated with the stream.","title":"Streams"},{"location":"Streams/#streams-api","text":"","title":"Streams API"},{"location":"Streams/#class-for-working-with-streams-api","text":"","title":"Class for working with Streams API."},{"location":"Streams/#example-usage","text":">>> from hexpy import HexpySession , StreamsAPI >>> session = HexpySession . load_auth_from_file () >>> streams_client = StreamsAPI ( session ) >>> streams_client . stream_list ( team_id )","title":"Example usage."},{"location":"Streams/#methods","text":"","title":"Methods"},{"location":"Streams/#posts","text":"posts ( stream_id : int , count : int = 100 ) -> Dict [ str , Any ] Return posts from a stream.","title":"posts"},{"location":"Streams/#arguments","text":"stream_id: Integer, the id of the stream containing the posts. count: Integer, the count of posts to retrieve from the stream, max = 100.","title":"Arguments:"},{"location":"Streams/#stream_list","text":"stream_list ( team_id : int ) -> Dict [ str , Any ] List all available Streams for a team.","title":"stream_list"},{"location":"Streams/#arguments_1","text":"team_id: Integer the id of the team.","title":"Arguments"},{"location":"Streams/#create_stream","text":"create_stream ( team_id : int , name : str ) -> Dict [ str , Any ] Create new stream for a team. System Admin Only.","title":"create_stream"},{"location":"Streams/#arguments_2","text":"team_id: Integer, the id of the team to associate created stream with. name: String, the name to associate with the newly created stream.","title":"Arguments"},{"location":"Streams/#delete_stream","text":"delete_stream ( stream_id : int ) -> Dict [ str , Any ] Delete a stream. System Admin Only.","title":"delete_stream"},{"location":"Streams/#arguments_3","text":"stream_id: Integer, the id of the stream to be deleted.","title":"Arguments"},{"location":"Streams/#add_monitor_to_stream","text":"add_monitor_to_stream ( stream_id : int , monitor_id : int ) -> Dict [ str , Any ] Associate a monitor with a stream. System Admin Only.","title":"add_monitor_to_stream"},{"location":"Streams/#arguments_4","text":"stream_id: Integer, the id of stream to be modified. monitor_id: Integer, the id to be associated with the stream.","title":"Arguments"},{"location":"Streams/#remove_monitor_from_stream","text":"remove_monitor_from_stream ( stream_id : int , monitor_id : int ) -> Dict [ str , Any ] Remove association between monitor and stream. System Admin Only.","title":"remove_monitor_from_stream"},{"location":"Streams/#arguments_5","text":"stream_id: Integer, the id of stream to be updated. monitor_id: Integer, the id to be removed from the stream.","title":"Arguments"},{"location":"Streams/#update_stream","text":"update_stream ( stream_id : int , name : str ) -> Dict [ str , Any ] Update name of stream. System Admin Only.","title":"update_stream"},{"location":"Streams/#arguments_6","text":"stream_id: Integer, the id of stream to be updated. name: String, the new name to be associated with the stream.","title":"Arguments"},{"location":"Upload/","text":"Upload API Class for working with Content Upload API. You may use the Content Upload endpoint to upload documents for analysis. In the past, users have uploaded survey responses, proprietary content, and other types of data not available in the Crimson Hexagon data library. To use this endpoint, please contact support and they will create a new custom content type for you. Reference Example Usage >>> from hexpy import HexpySession , ContentUploadAPI >>> session = HexpySession . load_auth_from_file () >>> upload_client = ContentUploadAPI ( session ) >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } }, ] >>> upload_client . upload ( items ) Methods upload upload ( data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload list of document dictionaries to Crimson Hexagon platform. If greater than 1000 items passed, reverts to batch upload. Arguments data: list of document dictionaries to upload. batch_upload batch_upload ( data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Batch upload list of document dictionaries to Crimson Hexagon platform. Arguments data: list of document dictionaries to upload in batches of 1000. custom_field_upload custom_field_upload ( document_type : int , batch : int , data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload content via the API w/ custom fields support. Arguments document_type: Integer, The id of the document type to which the uploading docs will belong batch: Integer, The id of the batch to which the uploading docs will belong. data: list of document dictionaries to upload. delete_content delete_content ( document_type : int ) -> Dict [ str , Any ] Content deletion via the API. Arguments documentType: Integer, The id of the document type to delete. removeResults: Boolean, If true, removes the results associated with the documentType. delete_content_batch delete_content_batch ( document_type : int , batch : int ) -> Dict [ str , Any ] Delete batch content via the API. Arguments documentType: Integer, The id of the document type to delete documents from. batch: String, The id of the document batch to delete. create_content_source create_content_source ( content_source ) -> Dict [ str , Any ] Content Source creation. delete_content_source delete_content_type ( document_type : int , remove_results : bool ) -> Dict [ str , Any ] Content Source deletion. list_content_sources list_content_sources ( team_id : int ) -> Dict [ str , Any ] Content Source list. Arguments team: Integer, The id of the team to which the listed content sources belong.","title":"Upload"},{"location":"Upload/#upload-api","text":"","title":"Upload API"},{"location":"Upload/#class-for-working-with-content-upload-api","text":"You may use the Content Upload endpoint to upload documents for analysis. In the past, users have uploaded survey responses, proprietary content, and other types of data not available in the Crimson Hexagon data library. To use this endpoint, please contact support and they will create a new custom content type for you. Reference","title":"Class for working with Content Upload API."},{"location":"Upload/#example-usage","text":">>> from hexpy import HexpySession , ContentUploadAPI >>> session = HexpySession . load_auth_from_file () >>> upload_client = ContentUploadAPI ( session ) >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } }, ] >>> upload_client . upload ( items )","title":"Example Usage"},{"location":"Upload/#methods","text":"","title":"Methods"},{"location":"Upload/#upload","text":"upload ( data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload list of document dictionaries to Crimson Hexagon platform. If greater than 1000 items passed, reverts to batch upload.","title":"upload"},{"location":"Upload/#arguments","text":"data: list of document dictionaries to upload.","title":"Arguments"},{"location":"Upload/#batch_upload","text":"batch_upload ( data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Batch upload list of document dictionaries to Crimson Hexagon platform.","title":"batch_upload"},{"location":"Upload/#arguments_1","text":"data: list of document dictionaries to upload in batches of 1000.","title":"Arguments"},{"location":"Upload/#custom_field_upload","text":"custom_field_upload ( document_type : int , batch : int , data : Sequence [ Dict [ str , Any ]]) -> Dict [ str , Any ] Upload content via the API w/ custom fields support.","title":"custom_field_upload"},{"location":"Upload/#arguments_2","text":"document_type: Integer, The id of the document type to which the uploading docs will belong batch: Integer, The id of the batch to which the uploading docs will belong. data: list of document dictionaries to upload.","title":"Arguments"},{"location":"Upload/#delete_content","text":"delete_content ( document_type : int ) -> Dict [ str , Any ] Content deletion via the API.","title":"delete_content"},{"location":"Upload/#arguments_3","text":"documentType: Integer, The id of the document type to delete. removeResults: Boolean, If true, removes the results associated with the documentType.","title":"Arguments"},{"location":"Upload/#delete_content_batch","text":"delete_content_batch ( document_type : int , batch : int ) -> Dict [ str , Any ] Delete batch content via the API.","title":"delete_content_batch"},{"location":"Upload/#arguments_4","text":"documentType: Integer, The id of the document type to delete documents from. batch: String, The id of the document batch to delete.","title":"Arguments"},{"location":"Upload/#create_content_source","text":"create_content_source ( content_source ) -> Dict [ str , Any ] Content Source creation.","title":"create_content_source"},{"location":"Upload/#delete_content_source","text":"delete_content_type ( document_type : int , remove_results : bool ) -> Dict [ str , Any ] Content Source deletion.","title":"delete_content_source"},{"location":"Upload/#list_content_sources","text":"list_content_sources ( team_id : int ) -> Dict [ str , Any ] Content Source list.","title":"list_content_sources"},{"location":"Upload/#arguments_5","text":"team: Integer, The id of the team to which the listed content sources belong.","title":"Arguments"},{"location":"crimson_api_docs/","text":"Crimson Hexagon API Documentation ROOT_URL = https://api.crimsonhexagon.com/api/ Endpoints Analysis Request Analysis Results Authentication Authors Content Delete Content Delete Content Source Create Content Source Delete Content Source List Content Upload Content Upload Custom Fields Support Day and Time Demographics - Age Demographics - Gender Facebook Admin Posts Facebook Page Likes Facebook Total Activity Geography - All Resources Geography - Cities Geography - Countries Geography - States Get Monitor Creation Report Get Social Site Report Get User Activity Report Get User Invitation Report Image Analysis Request Image Analysis Request Image analysis Instagram Followers Instagram Hashtags Instagram Sent Media Instagram Total Activity Interest Affinities Monitor Audit Monitor Detail Monitor Dump Monitor Image Results Monitor List Monitor Results Monitor Results by City Monitor Results by Country Monitor Results by State Monitor Training Posts Posts Realtime Cashtags Realtime Configure Realtime Details Realtime Disable Realtime Enable Realtime Hashtags Realtime Monitor List Realtime Retweets Realtime SocialGuids Realtime Tweets Realtime Volume Realtime Volume by Emotion Realtime Volume by Sentiment Stream Add Monitor Stream Create Stream Delete Stream List Stream Posts Stream Remove Monitor Stream Update Monitor Team List Top Sites and Content Sources Topic Clustering Topic Waves Training Document Upload Twitter Engagement Metrics Twitter Followers Twitter Sent Posts Twitter Total Engagement Volume WhitelistBlacklist Word Cloud Analysis Request To submit an analysis task for asynchronous processing - Category: results /results - POST Parameters Response status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False Analysis Results To retrieve the status of the analysis task and the results - Category: results /results/{resultId} - GET Parameters Response status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False resultId - Identificator of the task response Type: long Restricted = False status - Current status of analysis task Type: Status Restricted = False analysisResults - Analysis result Type: AnalysisResults Restricted = False message - Result message Type: String Restricted = False request - Related task request Type: ApiAnalysisTaskRequest Restricted = False Authentication Generate authentication tokens for use in API requests - Category: admin /authenticate - GET Parameters username - Username of the requesting user Type: String Required = True password - Password of the requesting user Type: String Required = True force - If true, forces authentication token update for the requesting user Type: boolean Required = False noExpiration - If true, the authentication token returned will not expire Type: boolean Required = False Response auth - Authentication token Type: String Restricted = False expires - Token expiration date (24 hours from token creation). If noExpiration = true, this field will not be returned Type: Date Restricted = False Authors Information about Twitter authors in a monitor - Category: results /monitor/authors - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response authors - JSON array of zero or more authors objects that contain author-specific attributes Type: List Restricted = False Content Delete Delete content via the API - Category: admin /content/delete - POST Parameters documentType - The id of the document type to delete documents from Type: long Required = True Response Content Delete Delete batch content via the API - Category: admin /content/delete - POST Parameters documentType - The id of the document type to delete documents from Type: long Required = True batch - The id of the document batch to delete Type: String Required = True Response Content Source Create Content Source creation - Category: admin /content/sources - POST Parameters Response contentSource - Content Source Type: ContentSourceModel Restricted = False Content Source Delete Content Source deletion - Category: admin /content/sources - DELETE Parameters documentType - The id of the document type to delete Type: long Required = True removeResults - If true, removes the results associated with the documentType Type: boolean Required = True Response Content Source List Content Source list - Category: admin /content/sources/list - GET Parameters team - The id of the team to which the listed content sources belong Type: Long Required = True Response contentSources - Content Sources Type: List Restricted = False Content Upload Upload content via the API - Category: admin /content/upload - POST Parameters Response uploadCount - The number of posts that were successfully uploaded Type: Integer Restricted = False DocumentsUploadedInLastTwentyFourHours - If requested, the number of documents this organization has uploaded in the last twenty four hours. Type: Long Restricted = False ContractedDocumentsWithinTwentyFourHours - If requested, the number of documents this organization can upload in a rolling twenty four hour period. Type: Long Restricted = False Content Upload Custom Fields Support Upload content via the API w/ custom fields support - Category: admin /content/upload - POST Parameters documentType - The id of the document type to which the uploading docs will belong Type: Long Required = True batch - The id of the batch to which the uploading docs will belong Type: String Required = False Response batchId - The id of the batch to which these docs belong Type: String Restricted = False Day and Time Volume information for a monitor aggregated by time of day or day of week) - Category: results /monitor/dayandtime - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True aggregatebyday - If true, volume information will be aggregated by day of the week instead of time of day Type: boolean Required = False uselocaltime - If true, volume aggregation will use the time local to the publishing author of a post when determining counts by day/time, instead of converting that time to the timezone of the selected monitor Type: boolean Required = False Response volumes - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False Demographics - Age Daily volume information for age in a monitor - Category: results /monitor/demographics/age - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response ageCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False Demographics - Gender Daily volume information for gender in a monitor - Category: results /monitor/demographics/gender - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response genderCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False Facebook Admin Posts Daily likes, comments, and shares for individual admin posts made by a Facebook account in a Facebook social account monitor - Category: social /monitor/facebook/adminposts - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Facebook Page Likes Total page likes as of the requested dates for a Facebook social monitor - Category: social /monitor/facebook/pagelikes - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Facebook Total Activity Daily total likes, comments, and shares on admin and user posts for a Facebook account in a Facebook social monitor - Category: social /monitor/facebook/totalactivity - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Geography - All Resources Returns all the available geolocation resources - Category: util /geography/info/all - GET Parameters Response resources - JSON array with the geography resources Type: List Restricted = False Geography - Cities Returns all the available cities / urban areas in the given country - Category: util /geography/info/cities - GET Parameters country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response resources - JSON array with the geography resources Type: List Restricted = False Geography - Countries Returns all the available countries - Category: util /geography/info/countries - GET Parameters Response resources - JSON array with the geography resources Type: List Restricted = False Geography - States Returns all the available states / regions in the given country - Category: util /geography/info/states - GET Parameters country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response resources - JSON array with the geography resources Type: List Restricted = False Get Monitor Creation Report Returns a list of Teams within an Organization and how many monitors were created during a given time period - Category: reports /report/monitorCreation - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n monitor creation report rows Type: List Restricted = False Get Social Site Report Returns a list of social sites and associated usernames for Teams within an Organization. Also indicates which of the social sites have failed and when - Category: reports /report/socialSites - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n social site report rows Type: List Restricted = False Get User Activity Report Returns a list of users within an Organization including information on when they last logged into the platform, the last monitor they created, and the last monitor they viewed - Category: reports /report/userActivity - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n user activity report rows Type: List Restricted = False Get User Invitation Report Returns a list of users within an Organization and which Team(s) they were invited to. Also indicates when the invitation was sent and when it was accepted - Category: reports /report/userInvitations - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n user invitation report rows Type: List Restricted = False Image Analysis Request To return list of class IDs and names with specified class type. - Category: results /imageanalysis/resources/classes/type - GET Parameters Response Image Analysis Request To return list of all class IDs and names. - Category: results /imageanalysis/resources/classes - GET Parameters Response Image analysis To return image classification data - Category: util /imageanalysis - GET Parameters url - Image URL Type: String Required = True Response imgData - Message object contains request parameters and image classification result Type: ImageAnalysisData Restricted = False Instagram Followers Total daily follower counts for Instagram social account monitors - Category: social /monitor/instagram/followers - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Instagram Hashtags Total daily volume by Instagram hashtags for specific monitor - Category: social /monitor/instagram/hashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Instagram Sent Media Daily likes, comments, and tags for individual media posted by an Instagram account in an Instagram social account monitor - Category: social /monitor/instagram/sentmedia - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Instagram Total Activity Daily likes, comments, and shares for individual admin posts made by an Instagram account in an Instagram social account monitor - Category: social /monitor/instagram/totalactivity - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Interest Affinities Aggregate affinities for the selected monitor over a given date range - Category: visualizations /monitor/interestaffinities - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True daily - If true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range. Type: boolean Required = False documentsource - document source for affinities. valid params [TWITTER, TUMBLR] Type: String Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False affinityInfo - JSON array of affinity objects containing information about the top affinities for the date range selected Type: List Restricted = False Monitor Audit Audit information about the selected monitor - Category: admin /monitor/audit - GET Parameters id - The id of the monitor to be audited Type: long Required = True Response auditInfo - JSON array of audit events pertaining to the selected monitor Type: List Restricted = False Monitor Detail Attributes of the specified monitor - Category: admin /monitor/detail - GET Parameters id - The id of the monitor being requested Type: long Required = True Response monitorDetail - JSON array of monitor details Type: MonitorDetailModel Restricted = False Monitor Dump Get detailed information of the monitor - Category: admin /monitor/dump - GET Parameters id - The id of the monitor being requested Type: long Required = True Response monitorDump - Monitor dump Type: MonitorDumpModel Restricted = False Monitor Image Results Daily image results for a monitor - Category: results /monitor/imageresults - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True type - Specifies type of image classes, valid values [object, scene, action, logo] Type: String Required = False top - If defined, only the top number of results will be returned Type: Integer Required = False Response results - JSON array of zero or more daily image results objects that contain endpoint-specific attributes Type: List Restricted = False Monitor List List of monitors available to the passed in username - Category: admin /monitor/list - GET Parameters team - The id of the team to which the listed monitors belong Type: Long Required = False Response monitors - JSON array of monitors viewable by the user Type: List Restricted = False Monitor Results Daily results for a monitor - Category: results /monitor/results - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True hideExcluded - If true, categories set as hidden will not be included in category proportion calculations Type: boolean Required = False Response results - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Monitor Results by City Returns all the monitor results grouped by the cities / urban areas in a given country (if given) - Category: results /monitor/geography/cities - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code, if not given all cities in the world will be returned Type: String Required = False Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False Monitor Results by Country Returns all the monitor results grouped by country - Category: results /monitor/geography/countries - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False Monitor Results by State Returns all the monitor results grouped by the country states / regions - Category: results /monitor/geography/states - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False Monitor Training Posts Download training posts for a monitor - Category: admin /monitor/trainingposts - GET Parameters id - The id of the monitor being requested Type: long Required = True category - Category id to target training posts from a specific category Type: Long Required = False Response trainingPosts - JSON array of training posts for the selected monitor or category in a monitor Type: List Restricted = False Posts Information about posts in a monitor - Category: visualizations /monitor/posts - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False extendLimit - If true, increases the limit of returned posts from 500 per call to 10,000 per call Type: boolean Required = False fullContents - If true, the contents field will return the original, complete post contents instead of truncating around search terms Type: boolean Required = False geotagged - If true, returns only geotagged documents matching and the given filter, if false or undefined any post matching the given filter Type: boolean Required = False Response posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False Realtime Cashtags Get Cashtags associated to a Monitor - Category: monitors /realtime/monitor/cashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N cashtags to retrieve Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Configure Configure the Realtime evaluators for the Monitor - Category: monitors /realtime/monitor/configure - POST Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Details Get the Realtime evaluators details for the Monitor - Category: monitors /realtime/monitor/detail - GET Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Disable Disable Realtime Data - Category: monitors /realtime/monitor/disable - GET Parameters id - The id of the monitor being requested Type: long Required = True Response Realtime Enable Enable Realtime Data - Category: monitors /realtime/monitor/enable - GET Parameters id - The id of the monitor being requested Type: long Required = True Response Realtime Hashtags Get Hashtags associated to a Monitor - Category: monitors /realtime/monitor/hashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N hashtags to retrieve Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Monitor List Get the Monitors which are in Proteus - Category: monitors /realtime/monitor/list - GET Parameters team - The id of the team to which the listed monitors belong Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Retweets Get the Realtime retweets for the Monitor - Category: monitors /realtime/monitor/retweets - GET Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime SocialGuids Get the Realtime social guids for the Monitor - Category: monitors /realtime/monitor/socialguids - GET Parameters id - The id of the monitor being requested Type: long Required = True type - Specifies the document type Type: String Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False receivedafter - Specifies inclusive receivedafter date in epoch seconds Type: Long Required = False maxresults - Specifies maximum results to fetch Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Tweets Get the Realtime tweets for the Monitor - Category: monitors /realtime/monitor/tweets - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume Get the Realtime volume for the Monitor - Category: monitors /realtime/monitor/volume - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume by Emotion Get the Realtime volume by emotion for the Monitor - Category: monitors /realtime/monitor/volumebyemotion - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume by Sentiment Get the Realtime volume by sentiment for the Monitor - Category: monitors /realtime/monitor/volumebysentiment - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Stream Add Monitor Stream Add Monitor Association - Category: admin /stream/{streamid}/monitor/{monitorid} - POST Parameters streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be created Type: Long Required = True Response Stream Create Stream creation - Category: admin /stream - POST Parameters Response stream - Stream information Type: StreamModel Restricted = False path - Stream path Type: String Restricted = False Stream Delete Stream deletion - Category: admin /stream/{streamid} - DELETE Parameters streamId - The id of the stream to delete Type: Long Required = True Response Stream List List of streams available to the passed in username - Category: admin /stream/list - GET Parameters teamid - The id of the team to which the listed streams belong Type: Long Required = False Response streams - JSON array of streams viewable by the user Type: List Restricted = False Stream Posts Information about posts in a stream - Category: results /stream/{streamid}/posts - GET Parameters streamId - The id of the stream to which the realtime information belongs Type: Long Required = True count - The maximum number of posts to fetch from the stream Type: Integer Required = False Response posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False Stream Remove Monitor Stream Remove Monitor Association - Category: admin /stream/{streamid}/monitor/{monitorid} - DELETE Parameters streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be removed Type: Long Required = True Response Stream Update Monitor Stream Update Monitor Data - Category: admin /stream/{streamid} - POST Parameters streamId - The id of the stream Type: Long Required = True Response Team List List of teams accessible to the current user - Category: admin /team/list - GET Parameters Response teams - JSON array of teams accessible by the user Type: List Restricted = False Top Sites and Content Sources Content source breakdown and top sites - Category: results /monitor/sources - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response contentSources - JSON array of zero or more content sources objects that contain results for each date requested Type: List Restricted = False Topic Clustering XML data that can be used to generate clustering visualizations using third-party software - Category: visualizations /monitor/topics - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False Response clustering - XML string for generating visualizations Type: String Restricted = False Topic Waves Topic waves information for a monitor - Category: visualizations /monitor/topicwaves - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False totalTopicsVolume - Total Volume for the topics Type: long Restricted = False topics - JSON array of 1..n topics volume information for grouped periods Type: List Restricted = False Training Document Upload Train monitors via the API - Category: util /monitor/train - POST Parameters id - The id of the monitor being trained Type: long Required = True Response message - Success response indicating a training post has been sucessfully uploaded Type: String Restricted = False Twitter Engagement Metrics Engagement metrics for Twitter content in a monitor - Category: results /monitor/twittermetrics - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Twitter Followers Total daily follower counts for Twitter Social Account monitors - Category: social /monitor/twittersocial/followers - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Twitter Sent Posts Daily retweets, replies, and impressions for individual posts made by a Twitter account in a Twitter social account monitor - Category: social /monitor/twittersocial/sentposts - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Twitter Total Engagement Daily retweets, replies, and mentions for a targeted Twitter account in a Twitter social account monitor - Category: social /monitor/twittersocial/totalengagement - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False Volume Volume of total posts in a monitor - Category: results /monitor/volume - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True groupBy - Specifies how the volume data over the date range will be grouped. Valid values: [HOURLY, DAILY, WEEKLY, MONTHLY]. Defaults to DAILY. Grouping requires a date range of at least 1 full unit; e.g., WEEKLY requires a date range of at least 1 week. Grouping only returns full units so the range may be truncated. e.g., 2017-01-15 to 2017-03-15 with MONTHLY grouping will return a date range of 2017-02-01 to 2017-03-01. A monitor must have complete results for the specified date range. If any day in the range is missing results an error will be returned. Type: String Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False numberOfDocuments - Total volume for this period Type: long Restricted = False volume - JSON array of 1..n volume information for grouped periods Type: List Restricted = False WhitelistBlacklist Detailed Information about a specific whitelistblacklists associated to the monitor - Category: visualizations /whitelistblacklist/{whitelistblacklistid}/detail - GET || POST Parameters whitelistBlacklistId - The id of the whitelistblacklist being requested Type: Long Required = True Response whitelistblacklistdetail - JSON object of whitelistblacklist detail Type: WhitelistBlacklistDetailModel Restricted = False Word Cloud Word frequency information for posts in a monitor - Category: visualizations /monitor/wordcloud - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False Response data - Map of the top 300 terms appearing in a monitor to their frequency in that monitor Type: Map Restricted = False","title":"Crimson Api Documentation"},{"location":"crimson_api_docs/#crimson-hexagon-api-documentation","text":"ROOT_URL = https://api.crimsonhexagon.com/api/","title":"Crimson Hexagon API Documentation"},{"location":"crimson_api_docs/#endpoints","text":"Analysis Request Analysis Results Authentication Authors Content Delete Content Delete Content Source Create Content Source Delete Content Source List Content Upload Content Upload Custom Fields Support Day and Time Demographics - Age Demographics - Gender Facebook Admin Posts Facebook Page Likes Facebook Total Activity Geography - All Resources Geography - Cities Geography - Countries Geography - States Get Monitor Creation Report Get Social Site Report Get User Activity Report Get User Invitation Report Image Analysis Request Image Analysis Request Image analysis Instagram Followers Instagram Hashtags Instagram Sent Media Instagram Total Activity Interest Affinities Monitor Audit Monitor Detail Monitor Dump Monitor Image Results Monitor List Monitor Results Monitor Results by City Monitor Results by Country Monitor Results by State Monitor Training Posts Posts Realtime Cashtags Realtime Configure Realtime Details Realtime Disable Realtime Enable Realtime Hashtags Realtime Monitor List Realtime Retweets Realtime SocialGuids Realtime Tweets Realtime Volume Realtime Volume by Emotion Realtime Volume by Sentiment Stream Add Monitor Stream Create Stream Delete Stream List Stream Posts Stream Remove Monitor Stream Update Monitor Team List Top Sites and Content Sources Topic Clustering Topic Waves Training Document Upload Twitter Engagement Metrics Twitter Followers Twitter Sent Posts Twitter Total Engagement Volume WhitelistBlacklist Word Cloud","title":"Endpoints"},{"location":"crimson_api_docs/#analysis-request","text":"","title":"Analysis Request"},{"location":"crimson_api_docs/#to-submit-an-analysis-task-for-asynchronous-processing-category-results","text":"","title":"To submit an analysis task for asynchronous processing  - Category: results"},{"location":"crimson_api_docs/#results-post","text":"","title":"/results - POST"},{"location":"crimson_api_docs/#parameters","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response","text":"status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False","title":"Response"},{"location":"crimson_api_docs/#analysis-results","text":"","title":"Analysis Results"},{"location":"crimson_api_docs/#to-retrieve-the-status-of-the-analysis-task-and-the-results-category-results","text":"","title":"To retrieve the status of the analysis task and the results - Category: results"},{"location":"crimson_api_docs/#resultsresultid-get","text":"","title":"/results/{resultId} - GET"},{"location":"crimson_api_docs/#parameters_1","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_1","text":"status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False resultId - Identificator of the task response Type: long Restricted = False status - Current status of analysis task Type: Status Restricted = False analysisResults - Analysis result Type: AnalysisResults Restricted = False message - Result message Type: String Restricted = False request - Related task request Type: ApiAnalysisTaskRequest Restricted = False","title":"Response"},{"location":"crimson_api_docs/#authentication","text":"","title":"Authentication"},{"location":"crimson_api_docs/#generate-authentication-tokens-for-use-in-api-requests-category-admin","text":"","title":"Generate authentication tokens for use in API requests - Category: admin"},{"location":"crimson_api_docs/#authenticate-get","text":"","title":"/authenticate - GET"},{"location":"crimson_api_docs/#parameters_2","text":"username - Username of the requesting user Type: String Required = True password - Password of the requesting user Type: String Required = True force - If true, forces authentication token update for the requesting user Type: boolean Required = False noExpiration - If true, the authentication token returned will not expire Type: boolean Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_2","text":"auth - Authentication token Type: String Restricted = False expires - Token expiration date (24 hours from token creation). If noExpiration = true, this field will not be returned Type: Date Restricted = False","title":"Response"},{"location":"crimson_api_docs/#authors","text":"","title":"Authors"},{"location":"crimson_api_docs/#information-about-twitter-authors-in-a-monitor-category-results","text":"","title":"Information about Twitter authors in a monitor - Category: results"},{"location":"crimson_api_docs/#monitorauthors-get","text":"","title":"/monitor/authors - GET"},{"location":"crimson_api_docs/#parameters_3","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_3","text":"authors - JSON array of zero or more authors objects that contain author-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#content-delete","text":"","title":"Content Delete"},{"location":"crimson_api_docs/#delete-content-via-the-api-category-admin","text":"","title":"Delete content via the API - Category: admin"},{"location":"crimson_api_docs/#contentdelete-post","text":"","title":"/content/delete - POST"},{"location":"crimson_api_docs/#parameters_4","text":"documentType - The id of the document type to delete documents from Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_4","text":"","title":"Response"},{"location":"crimson_api_docs/#content-delete_1","text":"","title":"Content Delete"},{"location":"crimson_api_docs/#delete-batch-content-via-the-api-category-admin","text":"","title":"Delete batch content via the API - Category: admin"},{"location":"crimson_api_docs/#contentdelete-post_1","text":"","title":"/content/delete - POST"},{"location":"crimson_api_docs/#parameters_5","text":"documentType - The id of the document type to delete documents from Type: long Required = True batch - The id of the document batch to delete Type: String Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_5","text":"","title":"Response"},{"location":"crimson_api_docs/#content-source-create","text":"","title":"Content Source Create"},{"location":"crimson_api_docs/#content-source-creation-category-admin","text":"","title":"Content Source creation - Category: admin"},{"location":"crimson_api_docs/#contentsources-post","text":"","title":"/content/sources - POST"},{"location":"crimson_api_docs/#parameters_6","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_6","text":"contentSource - Content Source Type: ContentSourceModel Restricted = False","title":"Response"},{"location":"crimson_api_docs/#content-source-delete","text":"","title":"Content Source Delete"},{"location":"crimson_api_docs/#content-source-deletion-category-admin","text":"","title":"Content Source deletion - Category: admin"},{"location":"crimson_api_docs/#contentsources-delete","text":"","title":"/content/sources - DELETE"},{"location":"crimson_api_docs/#parameters_7","text":"documentType - The id of the document type to delete Type: long Required = True removeResults - If true, removes the results associated with the documentType Type: boolean Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_7","text":"","title":"Response"},{"location":"crimson_api_docs/#content-source-list","text":"","title":"Content Source List"},{"location":"crimson_api_docs/#content-source-list-category-admin","text":"","title":"Content Source list - Category: admin"},{"location":"crimson_api_docs/#contentsourceslist-get","text":"","title":"/content/sources/list - GET"},{"location":"crimson_api_docs/#parameters_8","text":"team - The id of the team to which the listed content sources belong Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_8","text":"contentSources - Content Sources Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#content-upload","text":"","title":"Content Upload"},{"location":"crimson_api_docs/#upload-content-via-the-api-category-admin","text":"","title":"Upload content via the API - Category: admin"},{"location":"crimson_api_docs/#contentupload-post","text":"","title":"/content/upload - POST"},{"location":"crimson_api_docs/#parameters_9","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_9","text":"uploadCount - The number of posts that were successfully uploaded Type: Integer Restricted = False DocumentsUploadedInLastTwentyFourHours - If requested, the number of documents this organization has uploaded in the last twenty four hours. Type: Long Restricted = False ContractedDocumentsWithinTwentyFourHours - If requested, the number of documents this organization can upload in a rolling twenty four hour period. Type: Long Restricted = False","title":"Response"},{"location":"crimson_api_docs/#content-upload-custom-fields-support","text":"","title":"Content Upload Custom Fields Support"},{"location":"crimson_api_docs/#upload-content-via-the-api-w-custom-fields-support-category-admin","text":"","title":"Upload content via the API w/ custom fields support - Category: admin"},{"location":"crimson_api_docs/#contentupload-post_1","text":"","title":"/content/upload - POST"},{"location":"crimson_api_docs/#parameters_10","text":"documentType - The id of the document type to which the uploading docs will belong Type: Long Required = True batch - The id of the batch to which the uploading docs will belong Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_10","text":"batchId - The id of the batch to which these docs belong Type: String Restricted = False","title":"Response"},{"location":"crimson_api_docs/#day-and-time","text":"","title":"Day and Time"},{"location":"crimson_api_docs/#volume-information-for-a-monitor-aggregated-by-time-of-day-or-day-of-week-category-results","text":"","title":"Volume information for a monitor aggregated by time of day or day of week) - Category: results"},{"location":"crimson_api_docs/#monitordayandtime-get","text":"","title":"/monitor/dayandtime - GET"},{"location":"crimson_api_docs/#parameters_11","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True aggregatebyday - If true, volume information will be aggregated by day of the week instead of time of day Type: boolean Required = False uselocaltime - If true, volume aggregation will use the time local to the publishing author of a post when determining counts by day/time, instead of converting that time to the timezone of the selected monitor Type: boolean Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_11","text":"volumes - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#demographics-age","text":"","title":"Demographics - Age"},{"location":"crimson_api_docs/#daily-volume-information-for-age-in-a-monitor-category-results","text":"","title":"Daily volume information for age in a monitor - Category: results"},{"location":"crimson_api_docs/#monitordemographicsage-get","text":"","title":"/monitor/demographics/age - GET"},{"location":"crimson_api_docs/#parameters_12","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_12","text":"ageCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#demographics-gender","text":"","title":"Demographics - Gender"},{"location":"crimson_api_docs/#daily-volume-information-for-gender-in-a-monitor-category-results","text":"","title":"Daily volume information for gender in a monitor - Category: results"},{"location":"crimson_api_docs/#monitordemographicsgender-get","text":"","title":"/monitor/demographics/gender - GET"},{"location":"crimson_api_docs/#parameters_13","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_13","text":"genderCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#facebook-admin-posts","text":"","title":"Facebook Admin Posts"},{"location":"crimson_api_docs/#daily-likes-comments-and-shares-for-individual-admin-posts-made-by-a-facebook-account-in-a-facebook-social-account-monitor-category-social","text":"","title":"Daily likes, comments, and shares for individual admin posts made by a Facebook account in a Facebook social account monitor - Category: social"},{"location":"crimson_api_docs/#monitorfacebookadminposts-get","text":"","title":"/monitor/facebook/adminposts - GET"},{"location":"crimson_api_docs/#parameters_14","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_14","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#facebook-page-likes","text":"","title":"Facebook Page Likes"},{"location":"crimson_api_docs/#total-page-likes-as-of-the-requested-dates-for-a-facebook-social-monitor-category-social","text":"","title":"Total page likes as of the requested dates for a Facebook social monitor - Category: social"},{"location":"crimson_api_docs/#monitorfacebookpagelikes-get","text":"","title":"/monitor/facebook/pagelikes - GET"},{"location":"crimson_api_docs/#parameters_15","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_15","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#facebook-total-activity","text":"","title":"Facebook Total Activity"},{"location":"crimson_api_docs/#daily-total-likes-comments-and-shares-on-admin-and-user-posts-for-a-facebook-account-in-a-facebook-social-monitor-category-social","text":"","title":"Daily total likes, comments, and shares on admin and user posts for a Facebook account in a Facebook social monitor - Category: social"},{"location":"crimson_api_docs/#monitorfacebooktotalactivity-get","text":"","title":"/monitor/facebook/totalactivity - GET"},{"location":"crimson_api_docs/#parameters_16","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_16","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#geography-all-resources","text":"","title":"Geography - All Resources"},{"location":"crimson_api_docs/#returns-all-the-available-geolocation-resources-category-util","text":"","title":"Returns all the available geolocation resources - Category: util"},{"location":"crimson_api_docs/#geographyinfoall-get","text":"","title":"/geography/info/all - GET"},{"location":"crimson_api_docs/#parameters_17","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_17","text":"resources - JSON array with the geography resources Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#geography-cities","text":"","title":"Geography - Cities"},{"location":"crimson_api_docs/#returns-all-the-available-cities-urban-areas-in-the-given-country-category-util","text":"","title":"Returns all the available cities / urban areas in the given country - Category: util"},{"location":"crimson_api_docs/#geographyinfocities-get","text":"","title":"/geography/info/cities - GET"},{"location":"crimson_api_docs/#parameters_18","text":"country - Specifies the ISO 3166 3 letter country code Type: String Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_18","text":"resources - JSON array with the geography resources Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#geography-countries","text":"","title":"Geography - Countries"},{"location":"crimson_api_docs/#returns-all-the-available-countries-category-util","text":"","title":"Returns all the available countries - Category: util"},{"location":"crimson_api_docs/#geographyinfocountries-get","text":"","title":"/geography/info/countries - GET"},{"location":"crimson_api_docs/#parameters_19","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_19","text":"resources - JSON array with the geography resources Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#geography-states","text":"","title":"Geography - States"},{"location":"crimson_api_docs/#returns-all-the-available-states-regions-in-the-given-country-category-util","text":"","title":"Returns all the available states / regions in the given country - Category: util"},{"location":"crimson_api_docs/#geographyinfostates-get","text":"","title":"/geography/info/states - GET"},{"location":"crimson_api_docs/#parameters_20","text":"country - Specifies the ISO 3166 3 letter country code Type: String Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_20","text":"resources - JSON array with the geography resources Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#get-monitor-creation-report","text":"","title":"Get Monitor Creation Report"},{"location":"crimson_api_docs/#returns-a-list-of-teams-within-an-organization-and-how-many-monitors-were-created-during-a-given-time-period-category-reports","text":"","title":"Returns a list of Teams within an Organization and how many monitors were created during a given time period - Category: reports"},{"location":"crimson_api_docs/#reportmonitorcreation-get","text":"","title":"/report/monitorCreation - GET"},{"location":"crimson_api_docs/#parameters_21","text":"organizationId - The id of the organization being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_21","text":"data - List of 0..n monitor creation report rows Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#get-social-site-report","text":"","title":"Get Social Site Report"},{"location":"crimson_api_docs/#returns-a-list-of-social-sites-and-associated-usernames-for-teams-within-an-organization-also-indicates-which-of-the-social-sites-have-failed-and-when-category-reports","text":"","title":"Returns a list of social sites and associated usernames for Teams within an Organization. Also indicates which of the social sites have failed and when - Category: reports"},{"location":"crimson_api_docs/#reportsocialsites-get","text":"","title":"/report/socialSites - GET"},{"location":"crimson_api_docs/#parameters_22","text":"organizationId - The id of the organization being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_22","text":"data - List of 0..n social site report rows Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#get-user-activity-report","text":"","title":"Get User Activity Report"},{"location":"crimson_api_docs/#returns-a-list-of-users-within-an-organization-including-information-on-when-they-last-logged-into-the-platform-the-last-monitor-they-created-and-the-last-monitor-they-viewed-category-reports","text":"","title":"Returns a list of users within an Organization including information on when they last logged into the platform, the last monitor they created, and the last monitor they viewed - Category: reports"},{"location":"crimson_api_docs/#reportuseractivity-get","text":"","title":"/report/userActivity - GET"},{"location":"crimson_api_docs/#parameters_23","text":"organizationId - The id of the organization being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_23","text":"data - List of 0..n user activity report rows Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#get-user-invitation-report","text":"","title":"Get User Invitation Report"},{"location":"crimson_api_docs/#returns-a-list-of-users-within-an-organization-and-which-teams-they-were-invited-to-also-indicates-when-the-invitation-was-sent-and-when-it-was-accepted-category-reports","text":"","title":"Returns a list of users within an Organization and which Team(s) they were invited to. Also indicates when the invitation was sent and when it was accepted - Category: reports"},{"location":"crimson_api_docs/#reportuserinvitations-get","text":"","title":"/report/userInvitations - GET"},{"location":"crimson_api_docs/#parameters_24","text":"organizationId - The id of the organization being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_24","text":"data - List of 0..n user invitation report rows Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#image-analysis-request","text":"","title":"Image Analysis Request"},{"location":"crimson_api_docs/#to-return-list-of-class-ids-and-names-with-specified-class-type-category-results","text":"","title":"To return list of class IDs and names with specified class type. - Category: results"},{"location":"crimson_api_docs/#imageanalysisresourcesclassestype-get","text":"","title":"/imageanalysis/resources/classes/type - GET"},{"location":"crimson_api_docs/#parameters_25","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_25","text":"","title":"Response"},{"location":"crimson_api_docs/#image-analysis-request_1","text":"","title":"Image Analysis Request"},{"location":"crimson_api_docs/#to-return-list-of-all-class-ids-and-names-category-results","text":"","title":"To return list of all class IDs and names. - Category: results"},{"location":"crimson_api_docs/#imageanalysisresourcesclasses-get","text":"","title":"/imageanalysis/resources/classes - GET"},{"location":"crimson_api_docs/#parameters_26","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_26","text":"","title":"Response"},{"location":"crimson_api_docs/#image-analysis","text":"","title":"Image analysis"},{"location":"crimson_api_docs/#to-return-image-classification-data-category-util","text":"","title":"To return image classification data - Category: util"},{"location":"crimson_api_docs/#imageanalysis-get","text":"","title":"/imageanalysis - GET"},{"location":"crimson_api_docs/#parameters_27","text":"url - Image URL Type: String Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_27","text":"imgData - Message object contains request parameters and image classification result Type: ImageAnalysisData Restricted = False","title":"Response"},{"location":"crimson_api_docs/#instagram-followers","text":"","title":"Instagram Followers"},{"location":"crimson_api_docs/#total-daily-follower-counts-for-instagram-social-account-monitors-category-social","text":"","title":"Total daily follower counts for Instagram social account monitors - Category: social"},{"location":"crimson_api_docs/#monitorinstagramfollowers-get","text":"","title":"/monitor/instagram/followers - GET"},{"location":"crimson_api_docs/#parameters_28","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_28","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#instagram-hashtags","text":"","title":"Instagram Hashtags"},{"location":"crimson_api_docs/#total-daily-volume-by-instagram-hashtags-for-specific-monitor-category-social","text":"","title":"Total daily volume by Instagram hashtags for specific monitor - Category: social"},{"location":"crimson_api_docs/#monitorinstagramhashtags-get","text":"","title":"/monitor/instagram/hashtags - GET"},{"location":"crimson_api_docs/#parameters_29","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_29","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#instagram-sent-media","text":"","title":"Instagram Sent Media"},{"location":"crimson_api_docs/#daily-likes-comments-and-tags-for-individual-media-posted-by-an-instagram-account-in-an-instagram-social-account-monitor-category-social","text":"","title":"Daily likes, comments, and tags for individual media posted by an Instagram account in an Instagram social account monitor - Category: social"},{"location":"crimson_api_docs/#monitorinstagramsentmedia-get","text":"","title":"/monitor/instagram/sentmedia - GET"},{"location":"crimson_api_docs/#parameters_30","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_30","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#instagram-total-activity","text":"","title":"Instagram Total Activity"},{"location":"crimson_api_docs/#daily-likes-comments-and-shares-for-individual-admin-posts-made-by-an-instagram-account-in-an-instagram-social-account-monitor-category-social","text":"","title":"Daily likes, comments, and shares for individual admin posts made by an Instagram account in an Instagram social account monitor - Category: social"},{"location":"crimson_api_docs/#monitorinstagramtotalactivity-get","text":"","title":"/monitor/instagram/totalactivity - GET"},{"location":"crimson_api_docs/#parameters_31","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_31","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#interest-affinities","text":"","title":"Interest Affinities"},{"location":"crimson_api_docs/#aggregate-affinities-for-the-selected-monitor-over-a-given-date-range-category-visualizations","text":"","title":"Aggregate affinities for the selected monitor over a given date range - Category: visualizations"},{"location":"crimson_api_docs/#monitorinterestaffinities-get","text":"","title":"/monitor/interestaffinities - GET"},{"location":"crimson_api_docs/#parameters_32","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True daily - If true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range. Type: boolean Required = False documentsource - document source for affinities. valid params [TWITTER, TUMBLR] Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_32","text":"startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False affinityInfo - JSON array of affinity objects containing information about the top affinities for the date range selected Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-audit","text":"","title":"Monitor Audit"},{"location":"crimson_api_docs/#audit-information-about-the-selected-monitor-category-admin","text":"","title":"Audit information about the selected monitor - Category: admin"},{"location":"crimson_api_docs/#monitoraudit-get","text":"","title":"/monitor/audit - GET"},{"location":"crimson_api_docs/#parameters_33","text":"id - The id of the monitor to be audited Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_33","text":"auditInfo - JSON array of audit events pertaining to the selected monitor Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-detail","text":"","title":"Monitor Detail"},{"location":"crimson_api_docs/#attributes-of-the-specified-monitor-category-admin","text":"","title":"Attributes of the specified monitor - Category: admin"},{"location":"crimson_api_docs/#monitordetail-get","text":"","title":"/monitor/detail - GET"},{"location":"crimson_api_docs/#parameters_34","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_34","text":"monitorDetail - JSON array of monitor details Type: MonitorDetailModel Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-dump","text":"","title":"Monitor Dump"},{"location":"crimson_api_docs/#get-detailed-information-of-the-monitor-category-admin","text":"","title":"Get detailed information of the monitor - Category: admin"},{"location":"crimson_api_docs/#monitordump-get","text":"","title":"/monitor/dump - GET"},{"location":"crimson_api_docs/#parameters_35","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_35","text":"monitorDump - Monitor dump Type: MonitorDumpModel Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-image-results","text":"","title":"Monitor Image Results"},{"location":"crimson_api_docs/#daily-image-results-for-a-monitor-category-results","text":"","title":"Daily image results for a monitor - Category: results"},{"location":"crimson_api_docs/#monitorimageresults-get","text":"","title":"/monitor/imageresults - GET"},{"location":"crimson_api_docs/#parameters_36","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True type - Specifies type of image classes, valid values [object, scene, action, logo] Type: String Required = False top - If defined, only the top number of results will be returned Type: Integer Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_36","text":"results - JSON array of zero or more daily image results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-list","text":"","title":"Monitor List"},{"location":"crimson_api_docs/#list-of-monitors-available-to-the-passed-in-username-category-admin","text":"","title":"List of monitors available to the passed in username - Category: admin"},{"location":"crimson_api_docs/#monitorlist-get","text":"","title":"/monitor/list - GET"},{"location":"crimson_api_docs/#parameters_37","text":"team - The id of the team to which the listed monitors belong Type: Long Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_37","text":"monitors - JSON array of monitors viewable by the user Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-results","text":"","title":"Monitor Results"},{"location":"crimson_api_docs/#daily-results-for-a-monitor-category-results","text":"","title":"Daily results for a monitor - Category: results"},{"location":"crimson_api_docs/#monitorresults-get","text":"","title":"/monitor/results - GET"},{"location":"crimson_api_docs/#parameters_38","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True hideExcluded - If true, categories set as hidden will not be included in category proportion calculations Type: boolean Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_38","text":"results - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-results-by-city","text":"","title":"Monitor Results by City"},{"location":"crimson_api_docs/#returns-all-the-monitor-results-grouped-by-the-cities-urban-areas-in-a-given-country-if-given-category-results","text":"","title":"Returns all the monitor results grouped by the cities / urban areas in a given country (if given) - Category: results"},{"location":"crimson_api_docs/#monitorgeographycities-get","text":"","title":"/monitor/geography/cities - GET"},{"location":"crimson_api_docs/#parameters_39","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code, if not given all cities in the world will be returned Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_39","text":"startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-results-by-country","text":"","title":"Monitor Results by Country"},{"location":"crimson_api_docs/#returns-all-the-monitor-results-grouped-by-country-category-results","text":"","title":"Returns all the monitor results grouped by country - Category: results"},{"location":"crimson_api_docs/#monitorgeographycountries-get","text":"","title":"/monitor/geography/countries - GET"},{"location":"crimson_api_docs/#parameters_40","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_40","text":"startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-results-by-state","text":"","title":"Monitor Results by State"},{"location":"crimson_api_docs/#returns-all-the-monitor-results-grouped-by-the-country-states-regions-category-results","text":"","title":"Returns all the monitor results grouped by the country states / regions - Category: results"},{"location":"crimson_api_docs/#monitorgeographystates-get","text":"","title":"/monitor/geography/states - GET"},{"location":"crimson_api_docs/#parameters_41","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code Type: String Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_41","text":"startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#monitor-training-posts","text":"","title":"Monitor Training Posts"},{"location":"crimson_api_docs/#download-training-posts-for-a-monitor-category-admin","text":"","title":"Download training posts for a monitor - Category: admin"},{"location":"crimson_api_docs/#monitortrainingposts-get","text":"","title":"/monitor/trainingposts - GET"},{"location":"crimson_api_docs/#parameters_42","text":"id - The id of the monitor being requested Type: long Required = True category - Category id to target training posts from a specific category Type: Long Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_42","text":"trainingPosts - JSON array of training posts for the selected monitor or category in a monitor Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#posts","text":"","title":"Posts"},{"location":"crimson_api_docs/#information-about-posts-in-a-monitor-category-visualizations","text":"","title":"Information about posts in a monitor - Category: visualizations"},{"location":"crimson_api_docs/#monitorposts-get-post","text":"","title":"/monitor/posts - GET || POST"},{"location":"crimson_api_docs/#parameters_43","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False extendLimit - If true, increases the limit of returned posts from 500 per call to 10,000 per call Type: boolean Required = False fullContents - If true, the contents field will return the original, complete post contents instead of truncating around search terms Type: boolean Required = False geotagged - If true, returns only geotagged documents matching and the given filter, if false or undefined any post matching the given filter Type: boolean Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_43","text":"posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-cashtags","text":"","title":"Realtime Cashtags"},{"location":"crimson_api_docs/#get-cashtags-associated-to-a-monitor-category-monitors","text":"","title":"Get Cashtags associated to a Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorcashtags-get","text":"","title":"/realtime/monitor/cashtags - GET"},{"location":"crimson_api_docs/#parameters_44","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N cashtags to retrieve Type: Integer Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_44","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-configure","text":"","title":"Realtime Configure"},{"location":"crimson_api_docs/#configure-the-realtime-evaluators-for-the-monitor-category-monitors","text":"","title":"Configure the Realtime evaluators for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorconfigure-post","text":"","title":"/realtime/monitor/configure - POST"},{"location":"crimson_api_docs/#parameters_45","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_45","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-details","text":"","title":"Realtime Details"},{"location":"crimson_api_docs/#get-the-realtime-evaluators-details-for-the-monitor-category-monitors","text":"","title":"Get the Realtime evaluators details for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitordetail-get","text":"","title":"/realtime/monitor/detail - GET"},{"location":"crimson_api_docs/#parameters_46","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_46","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-disable","text":"","title":"Realtime Disable"},{"location":"crimson_api_docs/#disable-realtime-data-category-monitors","text":"","title":"Disable Realtime Data - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitordisable-get","text":"","title":"/realtime/monitor/disable - GET"},{"location":"crimson_api_docs/#parameters_47","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_47","text":"","title":"Response"},{"location":"crimson_api_docs/#realtime-enable","text":"","title":"Realtime Enable"},{"location":"crimson_api_docs/#enable-realtime-data-category-monitors","text":"","title":"Enable Realtime Data - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorenable-get","text":"","title":"/realtime/monitor/enable - GET"},{"location":"crimson_api_docs/#parameters_48","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_48","text":"","title":"Response"},{"location":"crimson_api_docs/#realtime-hashtags","text":"","title":"Realtime Hashtags"},{"location":"crimson_api_docs/#get-hashtags-associated-to-a-monitor-category-monitors","text":"","title":"Get Hashtags associated to a Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorhashtags-get","text":"","title":"/realtime/monitor/hashtags - GET"},{"location":"crimson_api_docs/#parameters_49","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N hashtags to retrieve Type: Integer Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_49","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-monitor-list","text":"","title":"Realtime Monitor List"},{"location":"crimson_api_docs/#get-the-monitors-which-are-in-proteus-category-monitors","text":"","title":"Get the Monitors which are in Proteus - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorlist-get","text":"","title":"/realtime/monitor/list - GET"},{"location":"crimson_api_docs/#parameters_50","text":"team - The id of the team to which the listed monitors belong Type: Long Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_50","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-retweets","text":"","title":"Realtime Retweets"},{"location":"crimson_api_docs/#get-the-realtime-retweets-for-the-monitor-category-monitors","text":"","title":"Get the Realtime retweets for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorretweets-get","text":"","title":"/realtime/monitor/retweets - GET"},{"location":"crimson_api_docs/#parameters_51","text":"id - The id of the monitor being requested Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_51","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-socialguids","text":"","title":"Realtime SocialGuids"},{"location":"crimson_api_docs/#get-the-realtime-social-guids-for-the-monitor-category-monitors","text":"","title":"Get the Realtime social guids for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorsocialguids-get","text":"","title":"/realtime/monitor/socialguids - GET"},{"location":"crimson_api_docs/#parameters_52","text":"id - The id of the monitor being requested Type: long Required = True type - Specifies the document type Type: String Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False receivedafter - Specifies inclusive receivedafter date in epoch seconds Type: Long Required = False maxresults - Specifies maximum results to fetch Type: Integer Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_52","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-tweets","text":"","title":"Realtime Tweets"},{"location":"crimson_api_docs/#get-the-realtime-tweets-for-the-monitor-category-monitors","text":"","title":"Get the Realtime tweets for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitortweets-get","text":"","title":"/realtime/monitor/tweets - GET"},{"location":"crimson_api_docs/#parameters_53","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_53","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-volume","text":"","title":"Realtime Volume"},{"location":"crimson_api_docs/#get-the-realtime-volume-for-the-monitor-category-monitors","text":"","title":"Get the Realtime volume for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorvolume-get","text":"","title":"/realtime/monitor/volume - GET"},{"location":"crimson_api_docs/#parameters_54","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_54","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-volume-by-emotion","text":"","title":"Realtime Volume by Emotion"},{"location":"crimson_api_docs/#get-the-realtime-volume-by-emotion-for-the-monitor-category-monitors","text":"","title":"Get the Realtime volume by emotion for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorvolumebyemotion-get","text":"","title":"/realtime/monitor/volumebyemotion - GET"},{"location":"crimson_api_docs/#parameters_55","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_55","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#realtime-volume-by-sentiment","text":"","title":"Realtime Volume by Sentiment"},{"location":"crimson_api_docs/#get-the-realtime-volume-by-sentiment-for-the-monitor-category-monitors","text":"","title":"Get the Realtime volume by sentiment for the Monitor - Category: monitors"},{"location":"crimson_api_docs/#realtimemonitorvolumebysentiment-get","text":"","title":"/realtime/monitor/volumebysentiment - GET"},{"location":"crimson_api_docs/#parameters_56","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_56","text":"realtimeData - JSON object of monitor realtime data Type: Map Restricted = False","title":"Response"},{"location":"crimson_api_docs/#stream-add-monitor","text":"","title":"Stream Add Monitor"},{"location":"crimson_api_docs/#stream-add-monitor-association-category-admin","text":"","title":"Stream Add Monitor Association - Category: admin"},{"location":"crimson_api_docs/#streamstreamidmonitormonitorid-post","text":"","title":"/stream/{streamid}/monitor/{monitorid} - POST"},{"location":"crimson_api_docs/#parameters_57","text":"streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be created Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_57","text":"","title":"Response"},{"location":"crimson_api_docs/#stream-create","text":"","title":"Stream Create"},{"location":"crimson_api_docs/#stream-creation-category-admin","text":"","title":"Stream creation - Category: admin"},{"location":"crimson_api_docs/#stream-post","text":"","title":"/stream - POST"},{"location":"crimson_api_docs/#parameters_58","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_58","text":"stream - Stream information Type: StreamModel Restricted = False path - Stream path Type: String Restricted = False","title":"Response"},{"location":"crimson_api_docs/#stream-delete","text":"","title":"Stream Delete"},{"location":"crimson_api_docs/#stream-deletion-category-admin","text":"","title":"Stream deletion - Category: admin"},{"location":"crimson_api_docs/#streamstreamid-delete","text":"","title":"/stream/{streamid} - DELETE"},{"location":"crimson_api_docs/#parameters_59","text":"streamId - The id of the stream to delete Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_59","text":"","title":"Response"},{"location":"crimson_api_docs/#stream-list","text":"","title":"Stream List"},{"location":"crimson_api_docs/#list-of-streams-available-to-the-passed-in-username-category-admin","text":"","title":"List of streams available to the passed in username - Category: admin"},{"location":"crimson_api_docs/#streamlist-get","text":"","title":"/stream/list - GET"},{"location":"crimson_api_docs/#parameters_60","text":"teamid - The id of the team to which the listed streams belong Type: Long Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_60","text":"streams - JSON array of streams viewable by the user Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#stream-posts","text":"","title":"Stream Posts"},{"location":"crimson_api_docs/#information-about-posts-in-a-stream-category-results","text":"","title":"Information about posts in a stream - Category: results"},{"location":"crimson_api_docs/#streamstreamidposts-get","text":"","title":"/stream/{streamid}/posts - GET"},{"location":"crimson_api_docs/#parameters_61","text":"streamId - The id of the stream to which the realtime information belongs Type: Long Required = True count - The maximum number of posts to fetch from the stream Type: Integer Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_61","text":"posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False","title":"Response"},{"location":"crimson_api_docs/#stream-remove-monitor","text":"","title":"Stream Remove Monitor"},{"location":"crimson_api_docs/#stream-remove-monitor-association-category-admin","text":"","title":"Stream Remove Monitor Association - Category: admin"},{"location":"crimson_api_docs/#streamstreamidmonitormonitorid-delete","text":"","title":"/stream/{streamid}/monitor/{monitorid} - DELETE"},{"location":"crimson_api_docs/#parameters_62","text":"streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be removed Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_62","text":"","title":"Response"},{"location":"crimson_api_docs/#stream-update-monitor","text":"","title":"Stream Update Monitor"},{"location":"crimson_api_docs/#stream-update-monitor-data-category-admin","text":"","title":"Stream Update Monitor Data - Category: admin"},{"location":"crimson_api_docs/#streamstreamid-post","text":"","title":"/stream/{streamid} - POST"},{"location":"crimson_api_docs/#parameters_63","text":"streamId - The id of the stream Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_63","text":"","title":"Response"},{"location":"crimson_api_docs/#team-list","text":"","title":"Team List"},{"location":"crimson_api_docs/#list-of-teams-accessible-to-the-current-user-category-admin","text":"","title":"List of teams accessible to the current user - Category: admin"},{"location":"crimson_api_docs/#teamlist-get","text":"","title":"/team/list - GET"},{"location":"crimson_api_docs/#parameters_64","text":"","title":"Parameters"},{"location":"crimson_api_docs/#response_64","text":"teams - JSON array of teams accessible by the user Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#top-sites-and-content-sources","text":"","title":"Top Sites and Content Sources"},{"location":"crimson_api_docs/#content-source-breakdown-and-top-sites-category-results","text":"","title":"Content source breakdown and top sites - Category: results"},{"location":"crimson_api_docs/#monitorsources-get","text":"","title":"/monitor/sources - GET"},{"location":"crimson_api_docs/#parameters_65","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_65","text":"contentSources - JSON array of zero or more content sources objects that contain results for each date requested Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#topic-clustering","text":"","title":"Topic Clustering"},{"location":"crimson_api_docs/#xml-data-that-can-be-used-to-generate-clustering-visualizations-using-third-party-software-category-visualizations","text":"","title":"XML data that can be used to generate clustering visualizations using third-party software - Category: visualizations"},{"location":"crimson_api_docs/#monitortopics-get-post","text":"","title":"/monitor/topics - GET || POST"},{"location":"crimson_api_docs/#parameters_66","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_66","text":"clustering - XML string for generating visualizations Type: String Restricted = False","title":"Response"},{"location":"crimson_api_docs/#topic-waves","text":"","title":"Topic Waves"},{"location":"crimson_api_docs/#topic-waves-information-for-a-monitor-category-visualizations","text":"","title":"Topic waves information for a monitor - Category: visualizations"},{"location":"crimson_api_docs/#monitortopicwaves-get-post","text":"","title":"/monitor/topicwaves - GET || POST"},{"location":"crimson_api_docs/#parameters_67","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_67","text":"startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False totalTopicsVolume - Total Volume for the topics Type: long Restricted = False topics - JSON array of 1..n topics volume information for grouped periods Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#training-document-upload","text":"","title":"Training Document Upload"},{"location":"crimson_api_docs/#train-monitors-via-the-api-category-util","text":"","title":"Train monitors via the API - Category: util"},{"location":"crimson_api_docs/#monitortrain-post","text":"","title":"/monitor/train - POST"},{"location":"crimson_api_docs/#parameters_68","text":"id - The id of the monitor being trained Type: long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_68","text":"message - Success response indicating a training post has been sucessfully uploaded Type: String Restricted = False","title":"Response"},{"location":"crimson_api_docs/#twitter-engagement-metrics","text":"","title":"Twitter Engagement Metrics"},{"location":"crimson_api_docs/#engagement-metrics-for-twitter-content-in-a-monitor-category-results","text":"","title":"Engagement metrics for Twitter content in a monitor - Category: results"},{"location":"crimson_api_docs/#monitortwittermetrics-get","text":"","title":"/monitor/twittermetrics - GET"},{"location":"crimson_api_docs/#parameters_69","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_69","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#twitter-followers","text":"","title":"Twitter Followers"},{"location":"crimson_api_docs/#total-daily-follower-counts-for-twitter-social-account-monitors-category-social","text":"","title":"Total daily follower counts for Twitter Social Account monitors - Category: social"},{"location":"crimson_api_docs/#monitortwittersocialfollowers-get","text":"","title":"/monitor/twittersocial/followers - GET"},{"location":"crimson_api_docs/#parameters_70","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_70","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#twitter-sent-posts","text":"","title":"Twitter Sent Posts"},{"location":"crimson_api_docs/#daily-retweets-replies-and-impressions-for-individual-posts-made-by-a-twitter-account-in-a-twitter-social-account-monitor-category-social","text":"","title":"Daily retweets, replies, and impressions for individual posts made by a Twitter account in a Twitter social account monitor - Category: social"},{"location":"crimson_api_docs/#monitortwittersocialsentposts-get","text":"","title":"/monitor/twittersocial/sentposts - GET"},{"location":"crimson_api_docs/#parameters_71","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_71","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#twitter-total-engagement","text":"","title":"Twitter Total Engagement"},{"location":"crimson_api_docs/#daily-retweets-replies-and-mentions-for-a-targeted-twitter-account-in-a-twitter-social-account-monitor-category-social","text":"","title":"Daily retweets, replies, and mentions for a targeted Twitter account in a Twitter social account monitor - Category: social"},{"location":"crimson_api_docs/#monitortwittersocialtotalengagement-get","text":"","title":"/monitor/twittersocial/totalengagement - GET"},{"location":"crimson_api_docs/#parameters_72","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_72","text":"dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#volume","text":"","title":"Volume"},{"location":"crimson_api_docs/#volume-of-total-posts-in-a-monitor-category-results","text":"","title":"Volume of total posts in a monitor - Category: results"},{"location":"crimson_api_docs/#monitorvolume-get","text":"","title":"/monitor/volume - GET"},{"location":"crimson_api_docs/#parameters_73","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True groupBy - Specifies how the volume data over the date range will be grouped. Valid values: [HOURLY, DAILY, WEEKLY, MONTHLY]. Defaults to DAILY. Grouping requires a date range of at least 1 full unit; e.g., WEEKLY requires a date range of at least 1 week. Grouping only returns full units so the range may be truncated. e.g., 2017-01-15 to 2017-03-15 with MONTHLY grouping will return a date range of 2017-02-01 to 2017-03-01. A monitor must have complete results for the specified date range. If any day in the range is missing results an error will be returned. Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_73","text":"startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False numberOfDocuments - Total volume for this period Type: long Restricted = False volume - JSON array of 1..n volume information for grouped periods Type: List Restricted = False","title":"Response"},{"location":"crimson_api_docs/#whitelistblacklist","text":"","title":"WhitelistBlacklist"},{"location":"crimson_api_docs/#detailed-information-about-a-specific-whitelistblacklists-associated-to-the-monitor-category-visualizations","text":"","title":"Detailed Information about a specific whitelistblacklists associated to the monitor - Category: visualizations"},{"location":"crimson_api_docs/#whitelistblacklistwhitelistblacklistiddetail-get-post","text":"","title":"/whitelistblacklist/{whitelistblacklistid}/detail - GET || POST"},{"location":"crimson_api_docs/#parameters_74","text":"whitelistBlacklistId - The id of the whitelistblacklist being requested Type: Long Required = True","title":"Parameters"},{"location":"crimson_api_docs/#response_74","text":"whitelistblacklistdetail - JSON object of whitelistblacklist detail Type: WhitelistBlacklistDetailModel Restricted = False","title":"Response"},{"location":"crimson_api_docs/#word-cloud","text":"","title":"Word Cloud"},{"location":"crimson_api_docs/#word-frequency-information-for-posts-in-a-monitor-category-visualizations","text":"","title":"Word frequency information for posts in a monitor - Category: visualizations"},{"location":"crimson_api_docs/#monitorwordcloud-get-post","text":"","title":"/monitor/wordcloud - GET || POST"},{"location":"crimson_api_docs/#parameters_75","text":"id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False","title":"Parameters"},{"location":"crimson_api_docs/#response_75","text":"data - Map of the top 300 terms appearing in a monitor to their frequency in that monitor Type: Map Restricted = False","title":"Response"}]}