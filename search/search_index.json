{
    "docs": [
        {
            "location": "/",
            "text": "A Python Client for the Crimson Hexagon API\n\n\nhexpy\n is a simple python package for working with the \nCrimson Hexagon API\n\n\nWhy use this client?\n\n\n\n\nEasily and securely manage account authentication.\n\n\nAutomatically abide by Crimson Hexagon's rate limits.\n\n\nAutomatically convert python data to/from JSON strings.\n\n\nAutomatically check requests success.\n\n\nMake it easy to do common tasks like exporting and uploading content.\n\n\nEasily create shell scripts to work with API data.\n\n\n\n\nRequirements\n\n\nhexpy\n is compatible with Python 3.6 and higher\n\n\nInstallation\n\n\nTo install the most recent stable release run \npip install hexpy\n.\n\n\nTo install the latest version:\n\n\n$ git clone https://github.com/sullivancolin/hexpy.git\n$ pip install hexpy/\n\n\n\n\n\nProject Homepage\n\n\nVisit \nGithub\n project page for full source code.\n\n\nQuick Start\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nMonitorAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nlogin\n(\nusername\n=\n\"user@email.com\"\n,\n \npassword\n=\n\"crimson_login\"\n)\n\n\n>>>\n \nmonitor_results_client\n \n=\n \nMonitorAPI\n(\nsession\n)\n\n\n>>>\n \nmonitor_results_client\n.\ndetails\n(\nmonitor_id\n)\n\n\n{\n'categories'\n:\n \n[{\n'hidden'\n:\n \nFalse\n,\n\n   \n'id'\n:\n \n6054759055\n,\n\n   \n'name'\n:\n \n'Basic Positive'\n,\n\n   \n'sortOrder'\n:\n \n100\n,\n\n   \n'status'\n:\n \n'red'\n,\n\n   \n'trainingDocs'\n:\n \n0\n},\n\n  \n{\n'hidden'\n:\n \nFalse\n,\n\n   \n'id'\n:\n \n6054759059\n,\n\n   \n'name'\n:\n \n'Basic Neutral'\n,\n\n   \n'sortOrder'\n:\n \n101\n,\n\n   \n'status'\n:\n \n'red'\n,\n\n   \n'trainingDocs'\n:\n \n0\n},\n\n  \n{\n'hidden'\n:\n \nFalse\n,\n\n   \n'id'\n:\n \n6054759051\n,\n\n   \n'name'\n:\n \n'Basic Negative'\n,\n\n   \n'sortOrder'\n:\n \n102\n,\n\n   \n...\n\n\n\n>>>\n \nsession\n.\nclose\n()",
            "title": "Home"
        },
        {
            "location": "/#a-python-client-for-the-crimson-hexagon-api",
            "text": "hexpy  is a simple python package for working with the  Crimson Hexagon API",
            "title": "A Python Client for the Crimson Hexagon API"
        },
        {
            "location": "/#why-use-this-client",
            "text": "Easily and securely manage account authentication.  Automatically abide by Crimson Hexagon's rate limits.  Automatically convert python data to/from JSON strings.  Automatically check requests success.  Make it easy to do common tasks like exporting and uploading content.  Easily create shell scripts to work with API data.",
            "title": "Why use this client?"
        },
        {
            "location": "/#requirements",
            "text": "hexpy  is compatible with Python 3.6 and higher",
            "title": "Requirements"
        },
        {
            "location": "/#installation",
            "text": "To install the most recent stable release run  pip install hexpy .  To install the latest version:  $ git clone https://github.com/sullivancolin/hexpy.git\n$ pip install hexpy/",
            "title": "Installation"
        },
        {
            "location": "/#project-homepage",
            "text": "Visit  Github  project page for full source code.",
            "title": "Project Homepage"
        },
        {
            "location": "/#quick-start",
            "text": ">>>   from   hexpy   import   HexpySession ,   MonitorAPI  >>>   session   =   HexpySession . login ( username = \"user@email.com\" ,   password = \"crimson_login\" )  >>>   monitor_results_client   =   MonitorAPI ( session )  >>>   monitor_results_client . details ( monitor_id )  { 'categories' :   [{ 'hidden' :   False , \n    'id' :   6054759055 , \n    'name' :   'Basic Positive' , \n    'sortOrder' :   100 , \n    'status' :   'red' , \n    'trainingDocs' :   0 }, \n   { 'hidden' :   False , \n    'id' :   6054759059 , \n    'name' :   'Basic Neutral' , \n    'sortOrder' :   101 , \n    'status' :   'red' , \n    'trainingDocs' :   0 }, \n   { 'hidden' :   False , \n    'id' :   6054759051 , \n    'name' :   'Basic Negative' , \n    'sortOrder' :   102 , \n    ...  >>>   session . close ()",
            "title": "Quick Start"
        },
        {
            "location": "/Session/",
            "text": "Session\n\n\nCreating a session and generating a token for API requests.\n\n\nLogin using token, or username. Optionally include password, or enter it at the prompt.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nlogin\n(\nusername\n=\n\"username@gmail.com\"\n,\n \npassword\n=\n\"secretpassword\"\n)\n\n\n>>>\n \nsession\n.\nsave_token\n()\n  \n# saving token to ~/.hexpy/credentials.json\n\n\n\n\n\n\nor\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nlogin\n(\nusername\n=\n\"username@email.com\"\n)\n\n\nEnter\n \npassword\n:\n \n*********\n\n\n>>>\n \nsession\n.\nsave_token\n()\n\n\n\n\n\n\nor instantiate a session using a token\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n(\ntoken\n=\n\"previously_saved_token\"\n)\n\n\n\n\n\n\nCreate instance by loading token from file.  Default is \n~/.hexpy/credentials.json\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n\n\n\n\nCreate instance with context manager to close TCP session automatically when finished\n\n\n>>>\n \nwith\n \nHexpySession\n.\nload_auth_from_file\n()\n \nas\n \nsession\n:\n\n\n...\n:\n     \nclient\n \n=\n \nMonitorAPI\n(\nsession\n)\n\n\n...\n:\n     \n# use client to call API multiple times with same session\n\n\n\n>>>\n \n# session TCP connection is closed until next call to API\n\n\n\n\n\n\nMethods\n\n\nlogin\n\n\nlogin\n(\nusername\n:\n \nstr\n,\n \npassword\n:\n \nstr\n \n=\n \nNone\n,\n \nno_expiration\n:\n \nbool\n \n=\n \nFalse\n)\n \n->\n \nHexpySession\n\n\n\n\n\n\nInstantiate class from username and password.\n\n\nArguments\n\n\n\n\nusername: account username.\n\n\npassword: account password.\n\n\nno_expiration: True/False token with 24 expiration.\n\n\n\n\nsave_token\n\n\nsave_token\n(\npath\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nNone\n\n\n\n\n\n\nSave authorization token.\n\n\nArguments\n\n\n\n\npath: String, path to store credentials. default is \n~/.hexpy/credentials.json\n\n\n\n\nload_auth_from_file\n\n\nload_auth_from_file\n(\npath\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nHexpySession\n\n\n\n\n\n\nInstantiate class from previously saved credentials file.\n\n\nArguments\n\n\n\n\npath: String, path to store credentials. default is \n~/.hexpy/credentials.json\n\n\n\n\nclose\n\n\nclose\n()\n \n->\n \nNone\n\n\n\n\n\n\nClose open connection to API server.",
            "title": "Session"
        },
        {
            "location": "/Session/#session",
            "text": "",
            "title": "Session"
        },
        {
            "location": "/Session/#creating-a-session-and-generating-a-token-for-api-requests",
            "text": "Login using token, or username. Optionally include password, or enter it at the prompt.  >>>   from   hexpy   import   HexpySession  >>>   session   =   HexpySession . login ( username = \"username@gmail.com\" ,   password = \"secretpassword\" )  >>>   session . save_token ()    # saving token to ~/.hexpy/credentials.json   or  >>>   session   =   HexpySession . login ( username = \"username@email.com\" )  Enter   password :   *********  >>>   session . save_token ()   or instantiate a session using a token  >>>   session   =   HexpySession ( token = \"previously_saved_token\" )   Create instance by loading token from file.  Default is  ~/.hexpy/credentials.json  >>>   session   =   HexpySession . load_auth_from_file ()   Create instance with context manager to close TCP session automatically when finished  >>>   with   HexpySession . load_auth_from_file ()   as   session :  ... :       client   =   MonitorAPI ( session )  ... :       # use client to call API multiple times with same session  >>>   # session TCP connection is closed until next call to API",
            "title": "Creating a session and generating a token for API requests."
        },
        {
            "location": "/Session/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Session/#login",
            "text": "login ( username :   str ,   password :   str   =   None ,   no_expiration :   bool   =   False )   ->   HexpySession   Instantiate class from username and password.",
            "title": "login"
        },
        {
            "location": "/Session/#arguments",
            "text": "username: account username.  password: account password.  no_expiration: True/False token with 24 expiration.",
            "title": "Arguments"
        },
        {
            "location": "/Session/#save_token",
            "text": "save_token ( path :   str   =   None )   ->   None   Save authorization token.",
            "title": "save_token"
        },
        {
            "location": "/Session/#arguments_1",
            "text": "path: String, path to store credentials. default is  ~/.hexpy/credentials.json",
            "title": "Arguments"
        },
        {
            "location": "/Session/#load_auth_from_file",
            "text": "load_auth_from_file ( path :   str   =   None )   ->   HexpySession   Instantiate class from previously saved credentials file.",
            "title": "load_auth_from_file"
        },
        {
            "location": "/Session/#arguments_2",
            "text": "path: String, path to store credentials. default is  ~/.hexpy/credentials.json",
            "title": "Arguments"
        },
        {
            "location": "/Session/#close",
            "text": "close ()   ->   None   Close open connection to API server.",
            "title": "close"
        },
        {
            "location": "/Metadata/",
            "text": "Metadata API\n\n\nClass for working with Crimson Hexagon account and analysis metadata.\n\n\nExample usage.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nMetadataAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nmetadata_client\n \n=\n \nMetadataAPI\n(\nsession\n)\n\n\n>>>\n \nmetadata_client\n.\nteam_list\n()\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nteam_list\n\n\nteam_list\n()\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn a list of teams accessible to the requesting user.\n\n\nmonitor_list\n\n\nmonitor_list\n(\nteam_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturns a list of monitors accessible to the user team along with metadata related to those monitors.\n\n\nArguments\n\n\n\n\nteam_id: integer id number for a team\n\n\n\n\ngeography\n\n\ngeography\n()\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn all the geographical locations that you may use to filter monitor results and to upload documents with location information.\n\n\nstates\n\n\nstates\n(\ncountry\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn all the states for a given country that you may use to filter monitor results and to upload documents with location information.\n\n\nArguments\n\n\n\n\ncountry: country code to filter states\n\n\n\n\ncities\n\n\ncities\n(\ncountry\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information. \n\n\nArguments\n\n\n\n\ncountry: country: country code  to filter states\n\n\n\n\ncountries\n\n\ncountries\n()\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturns all the countries that you may use to filter monitor results and to upload documents with location information.\n\n\napi_documentation\n\n\napi_documentation\n()\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn latest JSON version of Crimson Hexagon API endpoint documentation.",
            "title": "Metadata"
        },
        {
            "location": "/Metadata/#metadata-api",
            "text": "",
            "title": "Metadata API"
        },
        {
            "location": "/Metadata/#class-for-working-with-crimson-hexagon-account-and-analysis-metadata",
            "text": "",
            "title": "Class for working with Crimson Hexagon account and analysis metadata."
        },
        {
            "location": "/Metadata/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   MetadataAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   metadata_client   =   MetadataAPI ( session )  >>>   metadata_client . team_list ()  >>>   session . close ()",
            "title": "Example usage."
        },
        {
            "location": "/Metadata/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Metadata/#team_list",
            "text": "team_list ()   ->   Dict [ str ,   Any ]   Return a list of teams accessible to the requesting user.",
            "title": "team_list"
        },
        {
            "location": "/Metadata/#monitor_list",
            "text": "monitor_list ( team_id :   int )   ->   Dict [ str ,   Any ]   Returns a list of monitors accessible to the user team along with metadata related to those monitors.",
            "title": "monitor_list"
        },
        {
            "location": "/Metadata/#arguments",
            "text": "team_id: integer id number for a team",
            "title": "Arguments"
        },
        {
            "location": "/Metadata/#geography",
            "text": "geography ()   ->   Dict [ str ,   Any ]   Return all the geographical locations that you may use to filter monitor results and to upload documents with location information.",
            "title": "geography"
        },
        {
            "location": "/Metadata/#states",
            "text": "states ( country :   str )   ->   Dict [ str ,   Any ]   Return all the states for a given country that you may use to filter monitor results and to upload documents with location information.",
            "title": "states"
        },
        {
            "location": "/Metadata/#arguments_1",
            "text": "country: country code to filter states",
            "title": "Arguments"
        },
        {
            "location": "/Metadata/#cities",
            "text": "cities ( country :   str )   ->   Dict [ str ,   Any ]   Returns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information.",
            "title": "cities"
        },
        {
            "location": "/Metadata/#arguments_2",
            "text": "country: country: country code  to filter states",
            "title": "Arguments"
        },
        {
            "location": "/Metadata/#countries",
            "text": "countries ()   ->   Dict [ str ,   Any ]   Returns all the countries that you may use to filter monitor results and to upload documents with location information.",
            "title": "countries"
        },
        {
            "location": "/Metadata/#api_documentation",
            "text": "api_documentation ()   ->   Dict [ str ,   Any ]   Return latest JSON version of Crimson Hexagon API endpoint documentation.",
            "title": "api_documentation"
        },
        {
            "location": "/Monitor/",
            "text": "Monitor API\n\n\nClass for working with Crimson Hexagon Monitor API.\n\n\nExample usage.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nMonitorAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nmonitor_client\n \n=\n \nMonitorAPI\n(\nsession\n)\n\n\n>>>\n \ndetails\n \n=\n \nmonitor_client\n.\ndetails\n(\nmonitor_id\n)\n\n\n>>>\n \nstart\n \n=\n \ndetails\n[\n\"resultsStart\"\n]\n\n\n>>>\n \nend\n \n=\n \ndetails\n[\n\"resultsEnd\"\n]\n\n\n>>>\n \nmonitor_client\n.\nposts\n(\nmonitor_id\n,\n \nstart\n,\n \nend\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\ndetails\n\n\ndetails\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn detailed metadata about the selected monitor, including category metadata.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\n\n\naudit\n\n\naudit\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn audit information about the selected monitor, sorted from most to least recent.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\n\n\nword_cloud\n\n\nword_cloud\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \nfilter_string\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nfilter_string: String, pipe-separated list of field:value pairs used to filter posts\n\n\n\n\ntraining_posts\n\n\ntraining_posts\n(\nmonitor_id\n:\n \nint\n,\n \ncategory\n:\n \nint\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\ncategory: Integer, category id to target training posts from a specific category\n\n\n\n\ntrain_monitor\n\n\ntrain_monitor\n(\nmonitor_id\n:\n \nint\n,\n \ncategory_id\n:\n \nint\n,\n \ndata\n:\n \nList\n[\nDict\n[\nstr\n,\n \nAny\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nUpload individual training document monitors programmatically.\n\n\nUpload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option. \nReference\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\ncategory_id: Integer, the category this content should belong to\n\n\ndata: List of document dictionaries with required fields\n\n\n\n\ninterest_affinities\n\n\ninterest_affinities\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \ndaily\n:\n \nbool\n \n=\n \nFalse\n,\n \ndocument_source\n:\n \nstr\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about the authors in a monitor and their affinity with a range of pre-defined topics.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\ndaily: Boolean, if true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range\n\n\ndocument_source: String, document source for affinities. valid params include \nTWITTER\n or \nTUMBLR\n\n\n\n\ntopics\n\n\ntopics\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \nfilter_string\n:\n \nstr\n \n=\n \nNone\n \n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]:\n\n\n\n\n\n\nReturn the XML data that can be used to generate clustering visualizations using third-party software.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nfilter_string: String, pipe-separated list of field:value pairs used to filter posts\n\n\n\n\ntopic_waves\n\n\ntopic_waves\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn the Topic waves information for a monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nfilter_string: String, pipe-separated list of field:value pairs used to filter posts\n\n\n\n\ntop_sources\n\n\ntop_sources\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nimage_results\n\n\nimage_results\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \nobject_type\n:\n \nstr\n \n=\n \n\"\"\n,\n \ntop\n:\n \nint\n \n=\n \n100\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn a breakdown of the top image classes within a provided monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nobject_type: String, specifies type of image classes, valid values [object, scene, action, logo]\n\n\ntop : Integer, if defined, only the selected number of classes will be returned\n\n\n\n\nvolume\n\n\nvolume\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \ngroup_by\n:\n \nstr\n \n=\n \n\"DAILY\"\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume of total posts in a monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\ngroup_by: String, specifies how the volume data over the date range will be grouped. [HOURLY, DAILY, WEEKLY, MONTHLY]\n\n\n\n\ndayandtime\n\n\ndayandtime\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \naggregate_by_day\n:\n \nbool\n \n=\n \nFalse\n,\n \nuse_local_time\n:\n \nbool\n \n=\n \nFalse\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by date.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\naggregate_by_day: Boolean, if True, volume information will be aggregated by day of the week instead of time of day\n\n\nuse_local_time: if True, volume aggregation will use the time local to the publishing author of a post, instead of converting that time to the timezone of the selected monitor\n\n\n\n\nsentiment_and_categories\n\n\nsentiment_and_categories\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \nhide_excluded\n:\n \nbool\n \n=\n \nFalse\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn aggregate volume, sentiment, emotion and opinion category analysis for a given monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nhide_excluded: Boolean, if True, categories set as hidden will not be included in category proportion calculations.\n\n\n\n\naggregate\n\n\naggregate\n(\nmonitor_ids\n:\n \nUnion\n[\nSequence\n[\nint\n],\n \nint\n],\n \ndates\n:\n \nUnion\n[\nSequence\n[\nstr\n],\n \nSequence\n[\nSequence\n[\nstr\n]]],\n \nmetrics\n:\n \nUnion\n[\nSequence\n[\nstr\n],\n \nstr\n])\n \n->\n \nSequence\n[\nDict\n[\nstr\n,\n \nAny\n]]\n\n\n\n\n\n\nReturn aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics.\n\n\nValid metrics\n\n\n\n\n'volume'\n\n\n'word_cloud'\n\n\n'top_sources'\n\n\n'interest_affinities'\n\n\n'sentiment_and_categories'\n\n\n\n\nArguments\n\n\n\n\nmonitor_ids: Integer or list of Integers, id(s) of the monitor(s) being requested\n\n\ndates: Tuple of Strings or list of Tuples, pair(s) of 'YYYY-MM-DD' date strings\n\n\nmetrics: String or list of Strings, metric(s) to aggregate upon\n\n\n\n\nposts\n\n\nposts\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \nfilter_string\n:\n \nstr\n \n=\n \nNone\n,\n \nextend_limit\n:\n \nbool\n \n=\n \nFalse\n,\n \nfull_contents\n:\n \nbool\n \n=\n \nFalse\n,\n \ngeotagged\n:\n \nbool\n \n=\n \nFalse\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\nfilter_string: String, pipe-separated list of field:value pairs used to filter posts\n\n\nextend_limit: Boolean if True increase limit of returned posts from 500 per call to 10000 per call\n\n\nfull_contents: Boolean, if True, the contents field will return the original, complete posts contents instead of truncating around search terms\n\n\ngeotagged: Boolean, if True, returns only geotagged documents matching the given filter\n\n\n\n\nDemographics\n\n\nThis collection of endpoints provide demographic volume metrics for users within a given monitor.\n\n\nage\n\n\nage\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by age bracket.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nethnicity\n\n\nethnicity\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by ethnicity.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ngender\n\n\ngender\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by gender.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nGeography\n\n\ncities\n\n\ncities\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \ncountry\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by city.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\ncountry: String, country code to filter cities\n\n\n\n\nstates\n\n\nstates\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n,\n \ncountry\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by state.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\ncountry: String, country code to filter states\n\n\n\n\ncountries\n\n\ncountries\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn volume metrics for a given monitor split by country.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nTwitter\n\n\nThis collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors. \n\n\ntwitter_authors\n\n\ntwitter_authors\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information related to the Twitter authors who have posted in a given monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ntwitter_metrics\n\n\ntwitter_metrics\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about the top hashtags, mentions, and retweets in a monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ntwitter_followers\n\n\ntwitter_followers\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ntwitter_sent_posts\n\n\ntwitter_sent_posts\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ntwitter_engagement\n\n\ntwitter_engagement\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about retweets, replies, and @mentions for a Twitter Social Account monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nFacebook\n\n\nfacebook_admin_posts\n\n\nfacebook_admin_posts\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nfacebook_likes\n\n\nfacebook_likes\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nfacebook_activity\n\n\nfacebook_activity\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about actions (likes, comments, shares) made by users and admins for a given page.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\nInstagram\n\n\ninstagram_top_hashtags\n\n\ninstagram_top_hashtags\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight).\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ninstagram_followers\n\n\ninstagram_followers\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ninstagram_sent_media\n\n\ninstagram_sent_media\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn media sent by admins in a targeted Instagram account.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD\n\n\n\n\ninstagram_activity\n\n\ninstagram_activity\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nstr\n,\n \nend\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn information about actions (likes, comments) made by users and admins for a given account.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, id of the monitor or monitor filter being requested\n\n\nstart: String, inclusive start date in YYYY-MM-DD\n\n\nend: String, exclusive end date in YYYY-MM-DD",
            "title": "Monitor"
        },
        {
            "location": "/Monitor/#monitor-api",
            "text": "",
            "title": "Monitor API"
        },
        {
            "location": "/Monitor/#class-for-working-with-crimson-hexagon-monitor-api",
            "text": "",
            "title": "Class for working with Crimson Hexagon Monitor API."
        },
        {
            "location": "/Monitor/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   MonitorAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   monitor_client   =   MonitorAPI ( session )  >>>   details   =   monitor_client . details ( monitor_id )  >>>   start   =   details [ \"resultsStart\" ]  >>>   end   =   details [ \"resultsEnd\" ]  >>>   monitor_client . posts ( monitor_id ,   start ,   end )  >>>   session . close ()",
            "title": "Example usage."
        },
        {
            "location": "/Monitor/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Monitor/#details",
            "text": "details ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Return detailed metadata about the selected monitor, including category metadata.",
            "title": "details"
        },
        {
            "location": "/Monitor/#arguments",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#audit",
            "text": "audit ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Return audit information about the selected monitor, sorted from most to least recent.",
            "title": "audit"
        },
        {
            "location": "/Monitor/#arguments_1",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#word_cloud",
            "text": "word_cloud ( monitor_id :   int ,   start :   str ,   end :   str ,   filter_string :   str   =   None )   ->   Dict [ str ,   Any ]   Return an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters.",
            "title": "word_cloud"
        },
        {
            "location": "/Monitor/#arguments_2",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  filter_string: String, pipe-separated list of field:value pairs used to filter posts",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#training_posts",
            "text": "training_posts ( monitor_id :   int ,   category :   int   =   None )   ->   Dict [ str ,   Any ]   Return a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category.",
            "title": "training_posts"
        },
        {
            "location": "/Monitor/#arguments_3",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  category: Integer, category id to target training posts from a specific category",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#train_monitor",
            "text": "train_monitor ( monitor_id :   int ,   category_id :   int ,   data :   List [ Dict [ str ,   Any ]])   ->   Dict [ str ,   Any ]   Upload individual training document monitors programmatically.  Upload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option.  Reference",
            "title": "train_monitor"
        },
        {
            "location": "/Monitor/#arguments_4",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  category_id: Integer, the category this content should belong to  data: List of document dictionaries with required fields",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#interest_affinities",
            "text": "interest_affinities ( monitor_id :   int ,   start :   str ,   end :   str ,   daily :   bool   =   False ,   document_source :   str   =   None )   ->   Dict [ str ,   Any ]   Return information about the authors in a monitor and their affinity with a range of pre-defined topics.",
            "title": "interest_affinities"
        },
        {
            "location": "/Monitor/#arguments_5",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  daily: Boolean, if true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range  document_source: String, document source for affinities. valid params include  TWITTER  or  TUMBLR",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#topics",
            "text": "topics ( monitor_id :   int ,   start :   str ,   end :   str ,   filter_string :   str   =   None   )   ->   Dict [ str ,   Any ]:   Return the XML data that can be used to generate clustering visualizations using third-party software.",
            "title": "topics"
        },
        {
            "location": "/Monitor/#arguments_6",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  filter_string: String, pipe-separated list of field:value pairs used to filter posts",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#topic_waves",
            "text": "topic_waves ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return the Topic waves information for a monitor.",
            "title": "topic_waves"
        },
        {
            "location": "/Monitor/#arguments_7",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  filter_string: String, pipe-separated list of field:value pairs used to filter posts",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#top_sources",
            "text": "top_sources ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor.",
            "title": "top_sources"
        },
        {
            "location": "/Monitor/#arguments_8",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#image_results",
            "text": "image_results ( monitor_id :   int ,   start :   str ,   end :   str ,   object_type :   str   =   \"\" ,   top :   int   =   100 )   ->   Dict [ str ,   Any ]   Return a breakdown of the top image classes within a provided monitor.",
            "title": "image_results"
        },
        {
            "location": "/Monitor/#arguments_9",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  object_type: String, specifies type of image classes, valid values [object, scene, action, logo]  top : Integer, if defined, only the selected number of classes will be returned",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#volume",
            "text": "volume ( monitor_id :   int ,   start :   str ,   end :   str ,   group_by :   str   =   \"DAILY\" )   ->   Dict [ str ,   Any ]   Return volume of total posts in a monitor.",
            "title": "volume"
        },
        {
            "location": "/Monitor/#arguments_10",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  group_by: String, specifies how the volume data over the date range will be grouped. [HOURLY, DAILY, WEEKLY, MONTHLY]",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#dayandtime",
            "text": "dayandtime ( monitor_id :   int ,   start :   str ,   end :   str ,   aggregate_by_day :   bool   =   False ,   use_local_time :   bool   =   False )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by date.",
            "title": "dayandtime"
        },
        {
            "location": "/Monitor/#arguments_11",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  aggregate_by_day: Boolean, if True, volume information will be aggregated by day of the week instead of time of day  use_local_time: if True, volume aggregation will use the time local to the publishing author of a post, instead of converting that time to the timezone of the selected monitor",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#sentiment_and_categories",
            "text": "sentiment_and_categories ( monitor_id :   int ,   start :   str ,   end :   str ,   hide_excluded :   bool   =   False )   ->   Dict [ str ,   Any ]   Return aggregate volume, sentiment, emotion and opinion category analysis for a given monitor.",
            "title": "sentiment_and_categories"
        },
        {
            "location": "/Monitor/#arguments_12",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  hide_excluded: Boolean, if True, categories set as hidden will not be included in category proportion calculations.",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#aggregate",
            "text": "aggregate ( monitor_ids :   Union [ Sequence [ int ],   int ],   dates :   Union [ Sequence [ str ],   Sequence [ Sequence [ str ]]],   metrics :   Union [ Sequence [ str ],   str ])   ->   Sequence [ Dict [ str ,   Any ]]   Return aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics.",
            "title": "aggregate"
        },
        {
            "location": "/Monitor/#valid-metrics",
            "text": "'volume'  'word_cloud'  'top_sources'  'interest_affinities'  'sentiment_and_categories'",
            "title": "Valid metrics"
        },
        {
            "location": "/Monitor/#arguments_13",
            "text": "monitor_ids: Integer or list of Integers, id(s) of the monitor(s) being requested  dates: Tuple of Strings or list of Tuples, pair(s) of 'YYYY-MM-DD' date strings  metrics: String or list of Strings, metric(s) to aggregate upon",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#posts",
            "text": "posts ( monitor_id :   int ,   start :   str ,   end :   str ,   filter_string :   str   =   None ,   extend_limit :   bool   =   False ,   full_contents :   bool   =   False ,   geotagged :   bool   =   False )   ->   Dict [ str ,   Any ]   Return post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor.",
            "title": "posts"
        },
        {
            "location": "/Monitor/#arguments_14",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  filter_string: String, pipe-separated list of field:value pairs used to filter posts  extend_limit: Boolean if True increase limit of returned posts from 500 per call to 10000 per call  full_contents: Boolean, if True, the contents field will return the original, complete posts contents instead of truncating around search terms  geotagged: Boolean, if True, returns only geotagged documents matching the given filter",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#demographics",
            "text": "This collection of endpoints provide demographic volume metrics for users within a given monitor.",
            "title": "Demographics"
        },
        {
            "location": "/Monitor/#age",
            "text": "age ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by age bracket.",
            "title": "age"
        },
        {
            "location": "/Monitor/#arguments_15",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#ethnicity",
            "text": "ethnicity ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by ethnicity.",
            "title": "ethnicity"
        },
        {
            "location": "/Monitor/#arguments_16",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#gender",
            "text": "gender ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by gender.",
            "title": "gender"
        },
        {
            "location": "/Monitor/#arguments_17",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#geography",
            "text": "",
            "title": "Geography"
        },
        {
            "location": "/Monitor/#cities",
            "text": "cities ( monitor_id :   int ,   start :   str ,   end :   str ,   country :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by city.",
            "title": "cities"
        },
        {
            "location": "/Monitor/#arguments_18",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  country: String, country code to filter cities",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#states",
            "text": "states ( monitor_id :   int ,   start :   str ,   end :   str ,   country :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by state.",
            "title": "states"
        },
        {
            "location": "/Monitor/#arguments_19",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD  country: String, country code to filter states",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#countries",
            "text": "countries ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return volume metrics for a given monitor split by country.",
            "title": "countries"
        },
        {
            "location": "/Monitor/#arguments_20",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#twitter",
            "text": "This collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors.",
            "title": "Twitter"
        },
        {
            "location": "/Monitor/#twitter_authors",
            "text": "twitter_authors ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information related to the Twitter authors who have posted in a given monitor.",
            "title": "twitter_authors"
        },
        {
            "location": "/Monitor/#arguments_21",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#twitter_metrics",
            "text": "twitter_metrics ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information about the top hashtags, mentions, and retweets in a monitor.",
            "title": "twitter_metrics"
        },
        {
            "location": "/Monitor/#arguments_22",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#twitter_followers",
            "text": "twitter_followers ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates.",
            "title": "twitter_followers"
        },
        {
            "location": "/Monitor/#arguments_23",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#twitter_sent_posts",
            "text": "twitter_sent_posts ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor.",
            "title": "twitter_sent_posts"
        },
        {
            "location": "/Monitor/#arguments_24",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#twitter_engagement",
            "text": "twitter_engagement ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information about retweets, replies, and @mentions for a Twitter Social Account monitor.",
            "title": "twitter_engagement"
        },
        {
            "location": "/Monitor/#arguments_25",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#facebook",
            "text": "",
            "title": "Facebook"
        },
        {
            "location": "/Monitor/#facebook_admin_posts",
            "text": "facebook_admin_posts ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor.",
            "title": "facebook_admin_posts"
        },
        {
            "location": "/Monitor/#arguments_26",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#facebook_likes",
            "text": "facebook_likes ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates.",
            "title": "facebook_likes"
        },
        {
            "location": "/Monitor/#arguments_27",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#facebook_activity",
            "text": "facebook_activity ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information about actions (likes, comments, shares) made by users and admins for a given page.",
            "title": "facebook_activity"
        },
        {
            "location": "/Monitor/#arguments_28",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#instagram",
            "text": "",
            "title": "Instagram"
        },
        {
            "location": "/Monitor/#instagram_top_hashtags",
            "text": "instagram_top_hashtags ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight).",
            "title": "instagram_top_hashtags"
        },
        {
            "location": "/Monitor/#arguments_29",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#instagram_followers",
            "text": "instagram_followers ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates.",
            "title": "instagram_followers"
        },
        {
            "location": "/Monitor/#arguments_30",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#instagram_sent_media",
            "text": "instagram_sent_media ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return media sent by admins in a targeted Instagram account.",
            "title": "instagram_sent_media"
        },
        {
            "location": "/Monitor/#arguments_31",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Monitor/#instagram_activity",
            "text": "instagram_activity ( monitor_id :   int ,   start :   str ,   end :   str )   ->   Dict [ str ,   Any ]   Return information about actions (likes, comments) made by users and admins for a given account.",
            "title": "instagram_activity"
        },
        {
            "location": "/Monitor/#arguments_32",
            "text": "monitor_id: Integer, id of the monitor or monitor filter being requested  start: String, inclusive start date in YYYY-MM-DD  end: String, exclusive end date in YYYY-MM-DD",
            "title": "Arguments"
        },
        {
            "location": "/Analysis/",
            "text": "Analysis API\n\n\nClass for working with Crimson Hexagon Analysis API.\n\n\nExample Usage\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nAnalysisAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nanalysis_client\n \n=\n \nAnalysisAPI\n(\nsession\n)\n\n\n>>>\n \nanalysis_client\n.\nresults\n(\nrequest_id\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nanalysis_request\n\n\nanalysis_request\n(\ndata\n:\n \nDict\n[\nstr\n,\n \nAny\n])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nSubmit a query task against 24 hours of social data.\n\n\nArguments\n\n\n\n\ndata: Dictionary, query and filter parameters\n\n\n\n\nresults\n\n\nresults\n(\nrequest_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nRetrieve the status of the analysis request and the results.\n\n\nArguments\n\n\n\n\nrequest_id: Integer, the identifier given for the analysis, generated via the Analysis Request endpoints\n\n\n\n\nimage_analysis\n\n\nimage_analysis\n(\nurl\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet object, scene, activity predictions for image from public url.\n\n\nArguments\n\n\n\n\nurl: String, the url of the image to analyze",
            "title": "Analysis"
        },
        {
            "location": "/Analysis/#analysis-api",
            "text": "",
            "title": "Analysis API"
        },
        {
            "location": "/Analysis/#class-for-working-with-crimson-hexagon-analysis-api",
            "text": "",
            "title": "Class for working with Crimson Hexagon Analysis API."
        },
        {
            "location": "/Analysis/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   AnalysisAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   analysis_client   =   AnalysisAPI ( session )  >>>   analysis_client . results ( request_id )  >>>   session . close ()",
            "title": "Example Usage"
        },
        {
            "location": "/Analysis/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Analysis/#analysis_request",
            "text": "analysis_request ( data :   Dict [ str ,   Any ])   ->   Dict [ str ,   Any ]   Submit a query task against 24 hours of social data.",
            "title": "analysis_request"
        },
        {
            "location": "/Analysis/#arguments",
            "text": "data: Dictionary, query and filter parameters",
            "title": "Arguments"
        },
        {
            "location": "/Analysis/#results",
            "text": "results ( request_id :   int )   ->   Dict [ str ,   Any ]   Retrieve the status of the analysis request and the results.",
            "title": "results"
        },
        {
            "location": "/Analysis/#arguments_1",
            "text": "request_id: Integer, the identifier given for the analysis, generated via the Analysis Request endpoints",
            "title": "Arguments"
        },
        {
            "location": "/Analysis/#image_analysis",
            "text": "image_analysis ( url :   str )   ->   Dict [ str ,   Any ]   Get object, scene, activity predictions for image from public url.",
            "title": "image_analysis"
        },
        {
            "location": "/Analysis/#arguments_2",
            "text": "url: String, the url of the image to analyze",
            "title": "Arguments"
        },
        {
            "location": "/Upload/",
            "text": "Upload API\n\n\nClass for working with Content Upload API.\n\n\nYou may use the Content Upload endpoint to upload documents for analysis.\nIn the past, users have uploaded survey responses, proprietary content,\nand other types of data not available in the Crimson Hexagon data library.\nTo use this endpoint, please contact support and they will create a new custom content type for you. \nReference\n\n\nExample Usage\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nContentUploadAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nupload_client\n \n=\n \nContentUploadAPI\n(\nsession\n)\n\n\n>>>\n \nitems\n \n=\n \n[\n\n    \n{\n\n      \n\"title\"\n:\n \n\"Example Title\"\n,\n\n      \n\"date\"\n:\n \n\"2010-01-26T16:14:00\"\n,\n\n      \n\"author\"\n:\n \n\"me\"\n,\n\n      \n\"url\"\n:\n \n\"http://www.crimsonhexagon.com/post1\"\n,\n\n      \n\"contents\"\n:\n \n\"Example content\"\n,\n\n      \n\"language\"\n:\n \n\"en\"\n,\n\n      \n\"type\"\n:\n \n\"Your_Assigned_Content_Type_Name\"\n,\n\n      \n\"geolocation\"\n:\n \n{\n\n        \n\"id\"\n:\n \n\"USA.NY\"\n\n      \n}\n\n    \n},\n\n  \n]\n\n\n>>>\n \nupload_client\n.\nupload\n(\nitems\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nupload\n\n\nupload\n(\ndata\n:\n \nSequence\n[\nDict\n[\nstr\n,\n \nAny\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nUpload list of document dictionaries to Crimson Hexagon platform.\n\n\nIf greater than 1000 items passed, reverts to batch upload.\n\n\nArguments\n\n\n\n\ndata: list of document dictionaries  to upload.\n\n\n\n\nbatch_upload\n\n\nbatch_upload\n(\ndata\n:\n \nSequence\n[\nDict\n[\nstr\n,\n \nAny\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nBatch upload list of document dictionaries to Crimson Hexagon platform.\n\n\nArguments\n\n\n\n\ndata: list of document dictionaries to upload in batches of 1000.\n\n\n\n\ncustom_field_upload\n\n\ncustom_field_upload\n(\ndocument_type\n:\n \nint\n,\n \nbatch\n:\n \nint\n,\n \ndata\n:\n \nSequence\n[\nDict\n[\nstr\n,\n \nAny\n]])\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nUpload content via the API w/ custom fields support.\n\n\nArguments\n\n\n\n\ndocument_type: Integer, The id of the document type to which the uploading docs will belong\n\n\nbatch: Integer, The id of the batch to which the uploading docs will belong\n\n\ndata: list of document dictionaries  to upload.",
            "title": "Upload"
        },
        {
            "location": "/Upload/#upload-api",
            "text": "",
            "title": "Upload API"
        },
        {
            "location": "/Upload/#class-for-working-with-content-upload-api",
            "text": "You may use the Content Upload endpoint to upload documents for analysis.\nIn the past, users have uploaded survey responses, proprietary content,\nand other types of data not available in the Crimson Hexagon data library.\nTo use this endpoint, please contact support and they will create a new custom content type for you.  Reference",
            "title": "Class for working with Content Upload API."
        },
        {
            "location": "/Upload/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   ContentUploadAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   upload_client   =   ContentUploadAPI ( session )  >>>   items   =   [ \n     { \n       \"title\" :   \"Example Title\" , \n       \"date\" :   \"2010-01-26T16:14:00\" , \n       \"author\" :   \"me\" , \n       \"url\" :   \"http://www.crimsonhexagon.com/post1\" , \n       \"contents\" :   \"Example content\" , \n       \"language\" :   \"en\" , \n       \"type\" :   \"Your_Assigned_Content_Type_Name\" , \n       \"geolocation\" :   { \n         \"id\" :   \"USA.NY\" \n       } \n     }, \n   ]  >>>   upload_client . upload ( items )  >>>   session . close ()",
            "title": "Example Usage"
        },
        {
            "location": "/Upload/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Upload/#upload",
            "text": "upload ( data :   Sequence [ Dict [ str ,   Any ]])   ->   Dict [ str ,   Any ]   Upload list of document dictionaries to Crimson Hexagon platform.  If greater than 1000 items passed, reverts to batch upload.",
            "title": "upload"
        },
        {
            "location": "/Upload/#arguments",
            "text": "data: list of document dictionaries  to upload.",
            "title": "Arguments"
        },
        {
            "location": "/Upload/#batch_upload",
            "text": "batch_upload ( data :   Sequence [ Dict [ str ,   Any ]])   ->   Dict [ str ,   Any ]   Batch upload list of document dictionaries to Crimson Hexagon platform.",
            "title": "batch_upload"
        },
        {
            "location": "/Upload/#arguments_1",
            "text": "data: list of document dictionaries to upload in batches of 1000.",
            "title": "Arguments"
        },
        {
            "location": "/Upload/#custom_field_upload",
            "text": "custom_field_upload ( document_type :   int ,   batch :   int ,   data :   Sequence [ Dict [ str ,   Any ]])   ->   Dict [ str ,   Any ]   Upload content via the API w/ custom fields support.",
            "title": "custom_field_upload"
        },
        {
            "location": "/Upload/#arguments_2",
            "text": "document_type: Integer, The id of the document type to which the uploading docs will belong  batch: Integer, The id of the batch to which the uploading docs will belong  data: list of document dictionaries  to upload.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/",
            "text": "Streams API\n\n\nClass for working with Streams API.\n\n\nExample usage.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n \n,\n \nStreamsAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nstreams_client\n \n=\n \nStreamsAPI\n(\nsession\n)\n\n\n>>>\n \nstreams_client\n.\nstream_list\n(\nteam_id\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nposts\n\n\nposts\n(\nstream_id\n:\n \nint\n,\n \ncount\n:\n \nint\n \n=\n \n100\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nReturn posts from a stream.\n\n\nArguments:\n\n\n\n\nstream_id: Integer, the id of the stream containing the posts.\n\n\ncount: Integer, the count of posts to retrieve from the stream, max = 100.\n\n\n\n\nstream_list\n\n\nstream_list\n(\nteam_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nList all available Streams for a team.\n\n\nArguments\n\n\n\n\nteam_id: Integer the id of the team.\n\n\n\n\ncreate_stream\n\n\ncreate_stream\n(\nteam_id\n:\n \nint\n,\n \nname\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nCreate new stream for a team. System Admin Only.\n\n\nArguments\n\n\n\n\nteam_id: Integer, the id of the team to associate created stream with.\n\n\nname: String, the name to associate with the newly created stream.\n\n\n\n\ndelete_stream\n\n\ndelete_stream\n(\nstream_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nDelete a stream. System Admin Only.\n\n\nArguments\n\n\n\n\nstream_id: Integer, the id of the stream to be deleted.\n\n\n\n\nadd_monitor_to_stream\n\n\nadd_monitor_to_stream\n(\nstream_id\n:\n \nint\n,\n \nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nAssociate a monitor with a stream. System Admin Only.\n\n\nArguments\n\n\n\n\nstream_id: Integer, the id of stream to be modified.\n\n\nmonitor_id: Integer, the id to be associated with the stream.\n\n\n\n\nremove_monitor_from_stream\n\n\nremove_monitor_from_stream\n(\nstream_id\n:\n \nint\n,\n \nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nRemove association between monitor and stream.  System Admin Only.\n\n\nArguments\n\n\n\n\nstream_id: Integer, the id of stream to be updated.\n\n\nmonitor_id: Integer, the id to be removed from the stream.\n\n\n\n\nupdate_stream\n\n\nupdate_stream\n(\nstream_id\n:\n \nint\n,\n \nname\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nUpdate name of stream. System Admin Only.\n\n\nArguments\n\n\n\n\nstream_id: Integer, the id of stream to be updated.\n\n\nname: String, the new name to be associated with the stream.",
            "title": "Streams"
        },
        {
            "location": "/Streams/#streams-api",
            "text": "",
            "title": "Streams API"
        },
        {
            "location": "/Streams/#class-for-working-with-streams-api",
            "text": "",
            "title": "Class for working with Streams API."
        },
        {
            "location": "/Streams/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession   ,   StreamsAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   streams_client   =   StreamsAPI ( session )  >>>   streams_client . stream_list ( team_id )  >>>   session . close ()",
            "title": "Example usage."
        },
        {
            "location": "/Streams/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Streams/#posts",
            "text": "posts ( stream_id :   int ,   count :   int   =   100 )   ->   Dict [ str ,   Any ]   Return posts from a stream.",
            "title": "posts"
        },
        {
            "location": "/Streams/#arguments",
            "text": "stream_id: Integer, the id of the stream containing the posts.  count: Integer, the count of posts to retrieve from the stream, max = 100.",
            "title": "Arguments:"
        },
        {
            "location": "/Streams/#stream_list",
            "text": "stream_list ( team_id :   int )   ->   Dict [ str ,   Any ]   List all available Streams for a team.",
            "title": "stream_list"
        },
        {
            "location": "/Streams/#arguments_1",
            "text": "team_id: Integer the id of the team.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/#create_stream",
            "text": "create_stream ( team_id :   int ,   name :   str )   ->   Dict [ str ,   Any ]   Create new stream for a team. System Admin Only.",
            "title": "create_stream"
        },
        {
            "location": "/Streams/#arguments_2",
            "text": "team_id: Integer, the id of the team to associate created stream with.  name: String, the name to associate with the newly created stream.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/#delete_stream",
            "text": "delete_stream ( stream_id :   int )   ->   Dict [ str ,   Any ]   Delete a stream. System Admin Only.",
            "title": "delete_stream"
        },
        {
            "location": "/Streams/#arguments_3",
            "text": "stream_id: Integer, the id of the stream to be deleted.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/#add_monitor_to_stream",
            "text": "add_monitor_to_stream ( stream_id :   int ,   monitor_id :   int )   ->   Dict [ str ,   Any ]   Associate a monitor with a stream. System Admin Only.",
            "title": "add_monitor_to_stream"
        },
        {
            "location": "/Streams/#arguments_4",
            "text": "stream_id: Integer, the id of stream to be modified.  monitor_id: Integer, the id to be associated with the stream.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/#remove_monitor_from_stream",
            "text": "remove_monitor_from_stream ( stream_id :   int ,   monitor_id :   int )   ->   Dict [ str ,   Any ]   Remove association between monitor and stream.  System Admin Only.",
            "title": "remove_monitor_from_stream"
        },
        {
            "location": "/Streams/#arguments_5",
            "text": "stream_id: Integer, the id of stream to be updated.  monitor_id: Integer, the id to be removed from the stream.",
            "title": "Arguments"
        },
        {
            "location": "/Streams/#update_stream",
            "text": "update_stream ( stream_id :   int ,   name :   str )   ->   Dict [ str ,   Any ]   Update name of stream. System Admin Only.",
            "title": "update_stream"
        },
        {
            "location": "/Streams/#arguments_6",
            "text": "stream_id: Integer, the id of stream to be updated.  name: String, the new name to be associated with the stream.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/",
            "text": "Realtime API\n\n\nClass for working with Realtime Results API.\n\n\nExample usage.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nRealtimeAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nrealtime_client\n \n=\n \nRealtimeAPI\n(\nsession\n)\n\n\n>>>\n \nrealtime_client\n.\nlist\n(\nteam_id\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nlist\n\n\nlist\n(\nteam_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Monitors which are in Proteus\n\n\nArguments\n\n\n\n\nteam_id: Integer, The id of the team to which the listed monitors belong.\n\n\n\n\nconfigure\n\n\nconfigure\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nConfigure the Realtime evaluators for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\n\n\nenable\n\n\nenable\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nEnable Realtime Data.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\n\n\ndisbale\n\n\ndisbale\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nDisable Realtime Data.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\n\n\ndetail\n\n\ndetail\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime evaluators details for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\n\n\ncashtags\n\n\ncashtags\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nint\n \n=\n \nNone\n,\n \ntop\n:\n \nint\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet Cashtags associated to a Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\ntop: Integer, The top N cashtags to retrieve.\n\n\n\n\nhashtags\n\n\nhashtags\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nint\n \n=\n \nNone\n,\n \ntop\n:\n \nint\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet Hashtags associated to a Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\ntop: Integer, The top N hashtags to retrieve.\n\n\n\n\nretweets\n\n\nretweets\n(\nmonitor_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime retweets for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\n\n\nsocial_guids\n\n\nsocial_guids\n(\nmonitor_id\n:\n \nint\n,\n \ndoc_type\n:\n \nstr\n,\n \nstart\n:\n \nint\n \n=\n \nNone\n,\n \nreceived_after\n:\n \nint\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime social guids for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\ndoct_type: String, Specifies the document type.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\nreceived_after: Integer, Specifies inclusive received after date in epoch seconds.\n\n\n\n\ntweets\n\n\ntweets\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nint\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime tweets for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\n\n\nvolume\n\n\nvolume\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nint\n \n=\n \nNone\n,\n \ndoc_type\n:\n \nList\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime volume for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\ndoc_type: List, specifies the document type to filter.\n\n\n\n\nvolume_by_sentiment\n\n\nvolume_by_sentiment\n(\nmonitor_id\n:\n \nint\n,\n \nstart\n:\n \nint\n,\n \ndoc_type\n:\n \nstr\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet the Realtime volume by sentiment for the Monitor.\n\n\nArguments\n\n\n\n\nmonitor_id: Integer, the id of the monitor being requested.\n\n\nstart: Integer, specifies inclusive start date in epoch seconds.\n\n\ndoc_type: String, specifies the document type to filter.",
            "title": "Realtime"
        },
        {
            "location": "/Realtime/#realtime-api",
            "text": "",
            "title": "Realtime API"
        },
        {
            "location": "/Realtime/#class-for-working-with-realtime-results-api",
            "text": "",
            "title": "Class for working with Realtime Results API."
        },
        {
            "location": "/Realtime/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   RealtimeAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   realtime_client   =   RealtimeAPI ( session )  >>>   realtime_client . list ( team_id )  >>>   session . close ()",
            "title": "Example usage."
        },
        {
            "location": "/Realtime/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Realtime/#list",
            "text": "list ( team_id :   int )   ->   Dict [ str ,   Any ]   Get the Monitors which are in Proteus",
            "title": "list"
        },
        {
            "location": "/Realtime/#arguments",
            "text": "team_id: Integer, The id of the team to which the listed monitors belong.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#configure",
            "text": "configure ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Configure the Realtime evaluators for the Monitor.",
            "title": "configure"
        },
        {
            "location": "/Realtime/#arguments_1",
            "text": "monitor_id: Integer, the id of the monitor being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#enable",
            "text": "enable ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Enable Realtime Data.",
            "title": "enable"
        },
        {
            "location": "/Realtime/#arguments_2",
            "text": "monitor_id: Integer, the id of the monitor being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#disbale",
            "text": "disbale ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Disable Realtime Data.",
            "title": "disbale"
        },
        {
            "location": "/Realtime/#arguments_3",
            "text": "monitor_id: Integer, the id of the monitor being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#detail",
            "text": "detail ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Get the Realtime evaluators details for the Monitor.",
            "title": "detail"
        },
        {
            "location": "/Realtime/#arguments_4",
            "text": "monitor_id: Integer, the id of the monitor being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#cashtags",
            "text": "cashtags ( monitor_id :   int ,   start :   int   =   None ,   top :   int   =   None )   ->   Dict [ str ,   Any ]   Get Cashtags associated to a Monitor.",
            "title": "cashtags"
        },
        {
            "location": "/Realtime/#arguments_5",
            "text": "monitor_id: Integer, the id of the monitor being requested.  start: Integer, specifies inclusive start date in epoch seconds.  top: Integer, The top N cashtags to retrieve.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#hashtags",
            "text": "hashtags ( monitor_id :   int ,   start :   int   =   None ,   top :   int   =   None )   ->   Dict [ str ,   Any ]   Get Hashtags associated to a Monitor.",
            "title": "hashtags"
        },
        {
            "location": "/Realtime/#arguments_6",
            "text": "monitor_id: Integer, the id of the monitor being requested.  start: Integer, specifies inclusive start date in epoch seconds.  top: Integer, The top N hashtags to retrieve.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#retweets",
            "text": "retweets ( monitor_id :   int )   ->   Dict [ str ,   Any ]   Get the Realtime retweets for the Monitor.",
            "title": "retweets"
        },
        {
            "location": "/Realtime/#arguments_7",
            "text": "monitor_id: Integer, the id of the monitor being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#social_guids",
            "text": "social_guids ( monitor_id :   int ,   doc_type :   str ,   start :   int   =   None ,   received_after :   int   =   None )   ->   Dict [ str ,   Any ]   Get the Realtime social guids for the Monitor.",
            "title": "social_guids"
        },
        {
            "location": "/Realtime/#arguments_8",
            "text": "monitor_id: Integer, the id of the monitor being requested.  doct_type: String, Specifies the document type.  start: Integer, specifies inclusive start date in epoch seconds.  received_after: Integer, Specifies inclusive received after date in epoch seconds.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#tweets",
            "text": "tweets ( monitor_id :   int ,   start :   int   =   None )   ->   Dict [ str ,   Any ]   Get the Realtime tweets for the Monitor.",
            "title": "tweets"
        },
        {
            "location": "/Realtime/#arguments_9",
            "text": "monitor_id: Integer, the id of the monitor being requested.  start: Integer, specifies inclusive start date in epoch seconds.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#volume",
            "text": "volume ( monitor_id :   int ,   start :   int   =   None ,   doc_type :   List   =   None )   ->   Dict [ str ,   Any ]   Get the Realtime volume for the Monitor.",
            "title": "volume"
        },
        {
            "location": "/Realtime/#arguments_10",
            "text": "monitor_id: Integer, the id of the monitor being requested.  start: Integer, specifies inclusive start date in epoch seconds.  doc_type: List, specifies the document type to filter.",
            "title": "Arguments"
        },
        {
            "location": "/Realtime/#volume_by_sentiment",
            "text": "volume_by_sentiment ( monitor_id :   int ,   start :   int ,   doc_type :   str )   ->   Dict [ str ,   Any ]   Get the Realtime volume by sentiment for the Monitor.",
            "title": "volume_by_sentiment"
        },
        {
            "location": "/Realtime/#arguments_11",
            "text": "monitor_id: Integer, the id of the monitor being requested.  start: Integer, specifies inclusive start date in epoch seconds.  doc_type: String, specifies the document type to filter.",
            "title": "Arguments"
        },
        {
            "location": "/Custom/",
            "text": "Custom API\n\n\nClass for creating a custom API\n\n\nExample usage.\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n \n,\n \nCustomAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \ncustom_client\n \n=\n \nCustomAPI\n(\nsession\n,\n \n\"/some/endpoint/\"\n)\n\n\n>>>\n \ncustom_client\n.\nget\n(\nurl_params\n=\n\"<url_param1>/path\"\n,\n \nparams\n=\n{\n\"query_string_param\"\n:\nsome_value\n})\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nget\n\n\nget\n(\nurl_params\n:\n \nstr\n \n=\n \n\"\"\n,\n \nparams\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nend get request using URL parameters and query-string parameters.\n\n\nArguments:\n\n\n\n\nurl_params: String, url params and endpoints concatenated.\n\n\nparams: Dict, querystring params.\n\n\n\n\npost\n\n\npost\n(\nurl_params\n:\n \nstr\n \n=\n \n\"\"\n,\n \nparams\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n \ndata\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n,\n \n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nSend post request using URL parameters and query-string parameters, and json data.\n\n\nArguments\n\n\n\n\nurl_params: String, url params and endpoints concatenated.\n\n\nparams: Dict, querystring params.\n\n\ndata: Dict, json data to post.\n\n\n\n\ndelete\n\n\ndelete\n(\nurl_params\n:\n \nstr\n \n=\n \n\"\"\n,\n \nparams\n:\n \nDict\n[\nstr\n,\n \nAny\n]\n \n=\n \nNone\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nSend delete request using URL parameters and query-string parameters.\n\n\nArguments\n\n\n\n\nurl_params: String, url params and endpoints concatenated.\n\n\nparams: Dict, querystring params.",
            "title": "Custom"
        },
        {
            "location": "/Custom/#custom-api",
            "text": "",
            "title": "Custom API"
        },
        {
            "location": "/Custom/#class-for-creating-a-custom-api",
            "text": "",
            "title": "Class for creating a custom API"
        },
        {
            "location": "/Custom/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession   ,   CustomAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   custom_client   =   CustomAPI ( session ,   \"/some/endpoint/\" )  >>>   custom_client . get ( url_params = \"<url_param1>/path\" ,   params = { \"query_string_param\" : some_value })  >>>   session . close ()",
            "title": "Example usage."
        },
        {
            "location": "/Custom/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Custom/#get",
            "text": "get ( url_params :   str   =   \"\" ,   params :   Dict [ str ,   Any ]   =   None )   ->   Dict [ str ,   Any ]   end get request using URL parameters and query-string parameters.",
            "title": "get"
        },
        {
            "location": "/Custom/#arguments",
            "text": "url_params: String, url params and endpoints concatenated.  params: Dict, querystring params.",
            "title": "Arguments:"
        },
        {
            "location": "/Custom/#post",
            "text": "post ( url_params :   str   =   \"\" ,   params :   Dict [ str ,   Any ]   =   None ,   data :   Dict [ str ,   Any ]   =   None ,   )   ->   Dict [ str ,   Any ]   Send post request using URL parameters and query-string parameters, and json data.",
            "title": "post"
        },
        {
            "location": "/Custom/#arguments_1",
            "text": "url_params: String, url params and endpoints concatenated.  params: Dict, querystring params.  data: Dict, json data to post.",
            "title": "Arguments"
        },
        {
            "location": "/Custom/#delete",
            "text": "delete ( url_params :   str   =   \"\" ,   params :   Dict [ str ,   Any ]   =   None )   ->   Dict [ str ,   Any ]   Send delete request using URL parameters and query-string parameters.",
            "title": "delete"
        },
        {
            "location": "/Custom/#arguments_2",
            "text": "url_params: String, url params and endpoints concatenated.  params: Dict, querystring params.",
            "title": "Arguments"
        },
        {
            "location": "/Activity/",
            "text": "Activity API\n\n\nClass for working with Crimson Hexagon Activity Report API.\n\n\nExample Usage\n\n\n>>>\n \nfrom\n \nhexpy\n \nimport\n \nHexpySession\n,\n \nActivityAPI\n\n\n>>>\n \nsession\n \n=\n \nHexpySession\n.\nload_auth_from_file\n()\n\n\n>>>\n \nactivity_client\n \n=\n \nActivityAPI\n(\nsession\n)\n\n\n>>>\n \nactivity_client\n.\nmonitor_creation\n(\norganization_id\n)\n\n\n>>>\n \nsession\n.\nclose\n()\n\n\n\n\n\n\nMethods\n\n\nmonitor_creation\n\n\nmonitor_creation\n(\norganization_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period.\n\n\nArguments\n\n\n\n\norganiztion_id: Integer, the id of the organization being requested.\n\n\n\n\nsocial_sites\n\n\nsocial_sites\n(\norganization_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet Social Site Report and associated usernames for Teams within an Organization.\n\n\nArguments\n\n\n\n\norganiztion_id: Integer, the id of the organization being requested.\n\n\n\n\nuser_activity\n\n\nuser_activity\n(\norganization_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed.\n\n\nArguments\n\n\n\n\norganiztion_id: Integer, the id of the organization being requested.\n\n\n\n\nuser_invitations\n\n\nuser_invitations\n(\norganization_id\n:\n \nint\n)\n \n->\n \nDict\n[\nstr\n,\n \nAny\n]\n\n\n\n\n\n\nGet a list of users within an Organization and which Team(s) they were invited to.\n\n\nArguments\n\n\n\n\norganiztion_id: Integer, the id of the organization being requested.",
            "title": "Activty Reports"
        },
        {
            "location": "/Activity/#activity-api",
            "text": "",
            "title": "Activity API"
        },
        {
            "location": "/Activity/#class-for-working-with-crimson-hexagon-activity-report-api",
            "text": "",
            "title": "Class for working with Crimson Hexagon Activity Report API."
        },
        {
            "location": "/Activity/#example-usage",
            "text": ">>>   from   hexpy   import   HexpySession ,   ActivityAPI  >>>   session   =   HexpySession . load_auth_from_file ()  >>>   activity_client   =   ActivityAPI ( session )  >>>   activity_client . monitor_creation ( organization_id )  >>>   session . close ()",
            "title": "Example Usage"
        },
        {
            "location": "/Activity/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/Activity/#monitor_creation",
            "text": "monitor_creation ( organization_id :   int )   ->   Dict [ str ,   Any ]   Get Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period.",
            "title": "monitor_creation"
        },
        {
            "location": "/Activity/#arguments",
            "text": "organiztion_id: Integer, the id of the organization being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Activity/#social_sites",
            "text": "social_sites ( organization_id :   int )   ->   Dict [ str ,   Any ]   Get Social Site Report and associated usernames for Teams within an Organization.",
            "title": "social_sites"
        },
        {
            "location": "/Activity/#arguments_1",
            "text": "organiztion_id: Integer, the id of the organization being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Activity/#user_activity",
            "text": "user_activity ( organization_id :   int )   ->   Dict [ str ,   Any ]   Get a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed.",
            "title": "user_activity"
        },
        {
            "location": "/Activity/#arguments_2",
            "text": "organiztion_id: Integer, the id of the organization being requested.",
            "title": "Arguments"
        },
        {
            "location": "/Activity/#user_invitations",
            "text": "user_invitations ( organization_id :   int )   ->   Dict [ str ,   Any ]   Get a list of users within an Organization and which Team(s) they were invited to.",
            "title": "user_invitations"
        },
        {
            "location": "/Activity/#arguments_3",
            "text": "organiztion_id: Integer, the id of the organization being requested.",
            "title": "Arguments"
        },
        {
            "location": "/CLI/",
            "text": "Hexpy Command Line Interface\n\n\nhexpy\n comes with a console script for conveniently automating several common tasks\n\n\nHelpful Commands\n\n\n\n\nExport sample of monitor posts to a spreadsheet.\n\n\nEasily upload a spreadsheet as custom content for analysis in ForSight.\n\n\nQuickly get multiple metrics from monitor results as JSON. \n\n\nCompose powerful shell scripts with pipe-able commands such as \njq\n, and \nxargs\n.\n\n\n\n\nUsage\n\n\nBasic\n\n\n$ hexpy\nUsage: hexpy \n[\nOPTIONS\n]\n COMMAND \n[\nARGS\n]\n...\n\n  Command Line interface \nfor\n working with Crimson Hexagon API.\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  api_documentation  Get API documentation \nfor\n all endpoints.\n  \nexport\n             Export monitor posts as json or to a...\n  login              Session login credentials.\n  metadata           Get Metadata \nfor\n account team, monitors, and...\n  results            Get Monitor results \nfor\n \n1\n or more metrics.\n  stream_posts       Stream posts in real time, stop after a...\n  train              Upload spreadsheet file of training examples...\n  upload             Upload spreadsheet file as custom content.\n\n\n\n\n\nSee how each \nhexpy\n command works by running \nhexpy COMMAND --help\n\n\nExamples\n\n\nLogin to Crimson API with you credentials and save your token\n\n\n$ hexpy login --force\nEnter username: username@email.com\nEnter password: ***********\nSuccess!\n\n\n\n\n\nGet Up-to-date API documentation as an html file\n\n\n$ hexpy api_documentation -o html\n\n\n\n\n\nGet list of all the user's teams using \njq\n.\n\n\n$ hexpy metadata team_list \n|\n jq -r \n'.teams[] | [.name, .id] | @tsv'\n \n|\n column -t -s \n$'\\t'\n\n\n\n\n\n\nGet list of monitors for a user's team using \njq\n.\n\n\n$ hexpy metadata monitor_list --team_id TEAM_ID \n|\n jq -r \n'.monitors[] | [.id, .name] | @tsv'\n \n|\n column -t -s \n$'\\t'\n\n\n\n\n\n\nUpload TSV file as \nmy_custom_type\n with English as the language that has tab delimited columns.\n\n\n$ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator \n'\\t'\n\n\n\n\n\n\nTrain a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories.\n\n\n$ hexpy train training_data.csv MONITOR_ID\n\n\n\n\n\nGet word cloud and volume information from the monitor in the specified date range.\n\n\n$ hexpy results MONITOR_ID volume word_cloud --date_range \n2017\n-01-01 \n2017\n-02-01\n\n\n\n\n\nGet monitor volume information for each day  as a CSV using \njq\n\n\n$ hexpy results MONITOR_ID volume \n|\n jq -r \n'.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv'\n\n\n\"2017-01-04T00:00:00\"\n,74\n\n\"2017-01-05T00:00:00\"\n,101\n\n\"2017-01-06T00:00:00\"\n,67\n\n\"2017-01-07T00:00:00\"\n,58\n\n\"2017-01-08T00:00:00\"\n,64\n\n\"2017-01-09T00:00:00\"\n,72\n\n\"2017-01-10T00:00:00\"\n,92\n\n\"2017-01-11T00:00:00\"\n,72\n\n\"2017-01-12T00:00:00\"\n,133\n\n\"2017-01-13T00:00:00\"\n,67\n...\n\n\n\n\n\nExport Monitor posts to excel file called \nmy_export.xlsx\n\n\n$ hexpy \nexport\n MONITOR_ID --output_type excel --filename my_export\n\n\n\n\n\nExport Monitor posts as json and redirect to \nmy_export.json\n\n\n$ hexpy \nexport\n MONITOR_ID --output_type json > my_export.json\n\n\n\n\n\nExport posts to excel for multiple monitors in parallel from a file containing a list of monitor ids\n\n\n$ cat monitor_ids.txt \n|\n xargs -n \n1\n -P \n4\n hexpy \nexport\n -o excel\n\n\n\n\n\nStream 1K real-time posts to json in the terminal\n\n\n$ hexpy stream_posts STREAM_ID --max_docs \n1000\n --output_type json \n\n\n\n\n\nStream up to 10K real-time posts to a csv file with tab delimiter \n\n\n$ hexpy stream_posts STREAM_ID --output_type csv --max_docs \n10000\n --separator \n'\\t'\n \n|\n pv -s \n10000\n -l > streamed_posts.csv",
            "title": "Command Line Interface"
        },
        {
            "location": "/CLI/#hexpy-command-line-interface",
            "text": "hexpy  comes with a console script for conveniently automating several common tasks",
            "title": "Hexpy Command Line Interface"
        },
        {
            "location": "/CLI/#helpful-commands",
            "text": "Export sample of monitor posts to a spreadsheet.  Easily upload a spreadsheet as custom content for analysis in ForSight.  Quickly get multiple metrics from monitor results as JSON.   Compose powerful shell scripts with pipe-able commands such as  jq , and  xargs .",
            "title": "Helpful Commands"
        },
        {
            "location": "/CLI/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/CLI/#basic",
            "text": "$ hexpy\nUsage: hexpy  [ OPTIONS ]  COMMAND  [ ARGS ] ...\n\n  Command Line interface  for  working with Crimson Hexagon API.\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  api_documentation  Get API documentation  for  all endpoints.\n   export              Export monitor posts as json or to a...\n  login              Session login credentials.\n  metadata           Get Metadata  for  account team, monitors, and...\n  results            Get Monitor results  for   1  or more metrics.\n  stream_posts       Stream posts in real time, stop after a...\n  train              Upload spreadsheet file of training examples...\n  upload             Upload spreadsheet file as custom content.  See how each  hexpy  command works by running  hexpy COMMAND --help",
            "title": "Basic"
        },
        {
            "location": "/CLI/#examples",
            "text": "Login to Crimson API with you credentials and save your token  $ hexpy login --force\nEnter username: username@email.com\nEnter password: ***********\nSuccess!  Get Up-to-date API documentation as an html file  $ hexpy api_documentation -o html  Get list of all the user's teams using  jq .  $ hexpy metadata team_list  |  jq -r  '.teams[] | [.name, .id] | @tsv'   |  column -t -s  $'\\t'   Get list of monitors for a user's team using  jq .  $ hexpy metadata monitor_list --team_id TEAM_ID  |  jq -r  '.monitors[] | [.id, .name] | @tsv'   |  column -t -s  $'\\t'   Upload TSV file as  my_custom_type  with English as the language that has tab delimited columns.  $ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator  '\\t'   Train a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories.  $ hexpy train training_data.csv MONITOR_ID  Get word cloud and volume information from the monitor in the specified date range.  $ hexpy results MONITOR_ID volume word_cloud --date_range  2017 -01-01  2017 -02-01  Get monitor volume information for each day  as a CSV using  jq  $ hexpy results MONITOR_ID volume  |  jq -r  '.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv'  \"2017-01-04T00:00:00\" ,74 \"2017-01-05T00:00:00\" ,101 \"2017-01-06T00:00:00\" ,67 \"2017-01-07T00:00:00\" ,58 \"2017-01-08T00:00:00\" ,64 \"2017-01-09T00:00:00\" ,72 \"2017-01-10T00:00:00\" ,92 \"2017-01-11T00:00:00\" ,72 \"2017-01-12T00:00:00\" ,133 \"2017-01-13T00:00:00\" ,67\n...  Export Monitor posts to excel file called  my_export.xlsx  $ hexpy  export  MONITOR_ID --output_type excel --filename my_export  Export Monitor posts as json and redirect to  my_export.json  $ hexpy  export  MONITOR_ID --output_type json > my_export.json  Export posts to excel for multiple monitors in parallel from a file containing a list of monitor ids  $ cat monitor_ids.txt  |  xargs -n  1  -P  4  hexpy  export  -o excel  Stream 1K real-time posts to json in the terminal  $ hexpy stream_posts STREAM_ID --max_docs  1000  --output_type json   Stream up to 10K real-time posts to a csv file with tab delimiter   $ hexpy stream_posts STREAM_ID --output_type csv --max_docs  10000  --separator  '\\t'   |  pv -s  10000  -l > streamed_posts.csv",
            "title": "Examples"
        },
        {
            "location": "/crimson_api_docs/",
            "text": "Crimson Hexagon API Documentation\n\n\nROOT_URL = \nhttps://api.crimsonhexagon.com/api/\n\n\nEndpoints\n\n\n\n\nAnalysis Request\n\n\nAnalysis Results\n\n\nAuthentication\n\n\nAuthors\n\n\nContent Upload\n\n\nContent Upload Custom Fields Support\n\n\nDay and Time\n\n\nDemographics - Age\n\n\nDemographics - Gender\n\n\nFacebook Admin Posts\n\n\nFacebook Page Likes\n\n\nFacebook Total Activity\n\n\nGeography - All Resources\n\n\nGeography - Cities\n\n\nGeography - Countries\n\n\nGeography - States\n\n\nGet Monitor Creation Report\n\n\nGet Social Site Report\n\n\nGet User Activity Report\n\n\nGet User Invitation Report\n\n\nImage analysis\n\n\nInstagram Followers\n\n\nInstagram Hashtags\n\n\nInstagram Sent Media\n\n\nInstagram Total Activity\n\n\nInterest Affinities\n\n\nMonitor Audit\n\n\nMonitor Detail\n\n\nMonitor Dump\n\n\nMonitor Image Results\n\n\nMonitor List\n\n\nMonitor Results\n\n\nMonitor Results by City\n\n\nMonitor Results by Country\n\n\nMonitor Results by State\n\n\nMonitor Training Posts\n\n\nPosts\n\n\nRealtime Cashtags\n\n\nRealtime Configure\n\n\nRealtime Details\n\n\nRealtime Disable\n\n\nRealtime Enable\n\n\nRealtime Hashtags\n\n\nRealtime Monitor List\n\n\nRealtime Retweets\n\n\nRealtime SocialGuids\n\n\nRealtime Tweets\n\n\nRealtime Volume\n\n\nRealtime Volume by Sentiment\n\n\nStream Add Monitor\n\n\nStream Create\n\n\nStream Delete\n\n\nStream List\n\n\nStream Posts\n\n\nStream Remove Monitor\n\n\nStream Update Monitor\n\n\nTeam List\n\n\nTop Sites and Content Sources\n\n\nTopic Clustering\n\n\nTopic Waves\n\n\nTraining Document Upload\n\n\nTwitter Engagement Metrics\n\n\nTwitter Followers\n\n\nTwitter Sent Posts\n\n\nTwitter Total Engagement\n\n\nVolume\n\n\nWhitelistBlacklist\n\n\nWord Cloud\n\n\n\n\nAnalysis Request\n\n\nTo submit an analysis task for asynchronous processing  - Category: results\n\n\n/results\n - POST\n\n\nParameters\n\n\nResponse\n\n\n\n\nstatus\n - Defines the status of the analysis. Refer to Response Statuses table for additional information\n\n\nType: Status\n\n\nRestricted = False\n\n\n\n\n\n\nresultId\n - Defines the unique identifier by which the analysis status/results can be retrieved\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\nretrieveAt\n - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nrequest\n - Defines the original request parameters made to invoke this analysis\n\n\nType: ApiAnalysisTaskRequest\n\n\nRestricted = False\n\n\n\n\n\n\nresultsUri\n - Defines the URI that can be queried to retrieve the analysis status/results in the future\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\ncontractInfo\n - If requested, the contract info after this request has been processed.\n\n\nType: ApiAnalysisContractInfo\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nAnalysis Results\n\n\nTo retrieve the status of the analysis task and the results - Category: results\n\n\n/results/{resultId}\n - GET\n\n\nParameters\n\n\nResponse\n\n\n\n\nstatus\n - Defines the status of the analysis. Refer to Response Statuses table for additional information\n\n\nType: Status\n\n\nRestricted = False\n\n\n\n\n\n\nresultId\n - Defines the unique identifier by which the analysis status/results can be retrieved\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\nretrieveAt\n - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nrequest\n - Defines the original request parameters made to invoke this analysis\n\n\nType: ApiAnalysisTaskRequest\n\n\nRestricted = False\n\n\n\n\n\n\nresultsUri\n - Defines the URI that can be queried to retrieve the analysis status/results in the future\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\ncontractInfo\n - If requested, the contract info after this request has been processed.\n\n\nType: ApiAnalysisContractInfo\n\n\nRestricted = False\n\n\n\n\n\n\nresultId\n - Identificator of the task response\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\nstatus\n - Current status of analysis task\n\n\nType: Status\n\n\nRestricted = False\n\n\n\n\n\n\nanalysisResults\n - Analysis result\n\n\nType: AnalysisResults\n\n\nRestricted = False\n\n\n\n\n\n\nmessage\n - Result message\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\nrequest\n - Related task request\n\n\nType: ApiAnalysisTaskRequest\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nAuthentication\n\n\nGenerate authentication tokens for use in API requests - Category: admin\n\n\n/authenticate\n - GET\n\n\nParameters\n\n\n\n\nusername\n - Username of the requesting user\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\npassword\n - Password of the requesting user\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\nforce\n - If true, forces authentication token update for the requesting user\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\nnoExpiration\n - If true, the authentication token returned will not expire\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nauth\n - Authentication token\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\nexpires\n - Token expiration date (24 hours from token creation). If noExpiration = true, this field will not be returned\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nAuthors\n\n\nInformation about Twitter authors in a monitor - Category: results\n\n\n/monitor/authors\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nauthors\n - JSON array of zero or more authors objects that contain author-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nContent Upload\n\n\nUpload content via the API - Category: admin\n\n\n/content/upload\n - POST\n\n\nParameters\n\n\nResponse\n\n\n\n\nuploadCount\n - The number of posts that were successfully uploaded\n\n\nType: Integer\n\n\nRestricted = False\n\n\n\n\n\n\nDocumentsUploadedInLastTwentyFourHours\n - If requested, the number of documents this organization has uploaded in the last twenty four hours.\n\n\nType: Long\n\n\nRestricted = False\n\n\n\n\n\n\nContractedDocumentsWithinTwentyFourHours\n - If requested, the number of documents this organization can upload in a rolling twenty four hour period.\n\n\nType: Long\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nContent Upload Custom Fields Support\n\n\nUpload content via the API w/ custom fields support - Category: admin\n\n\n/content/upload\n - POST\n\n\nParameters\n\n\n\n\ndocumentType\n - The id of the document type to which the uploading docs will belong\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\nbatch\n - The id of the batch to which the uploading docs will belong\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nbatchId\n - The id of the batch to which these docs belong\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nDay and Time\n\n\nVolume information for a monitor aggregated by time of day or day of week) - Category: results\n\n\n/monitor/dayandtime\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\naggregatebyday\n - If true, volume information will be aggregated by day of the week instead of time of day\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\nuselocaltime\n - If true, volume aggregation will use the time local to the publishing author of a post when determining counts by day/time, instead of converting that time to the timezone of the selected monitor\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nvolumes\n - JSON array of zero or more objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nDemographics - Age\n\n\nDaily volume information for age in a monitor - Category: results\n\n\n/monitor/demographics/age\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nageCounts\n - JSON array of zero or more objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nDemographics - Gender\n\n\nDaily volume information for gender in a monitor - Category: results\n\n\n/monitor/demographics/gender\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ngenderCounts\n - JSON array of zero or more objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nFacebook Admin Posts\n\n\nDaily likes, comments, and shares for individual admin posts made by a Facebook account in a Facebook social account monitor - Category: social\n\n\n/monitor/facebook/adminposts\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nFacebook Page Likes\n\n\nTotal page likes as of the requested dates for a Facebook social monitor - Category: social\n\n\n/monitor/facebook/pagelikes\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nFacebook Total Activity\n\n\nDaily total likes, comments, and shares on admin and user posts for a Facebook account in a Facebook social monitor - Category: social\n\n\n/monitor/facebook/totalactivity\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGeography - All Resources\n\n\nReturns all the available geolocation resources - Category: util\n\n\n/geography/info/all\n - GET\n\n\nParameters\n\n\nResponse\n\n\n\n\nresources\n - JSON array with the geography resources\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGeography - Cities\n\n\nReturns all the available cities / urban areas in the given country - Category: util\n\n\n/geography/info/cities\n - GET\n\n\nParameters\n\n\n\n\ncountry\n - Specifies the ISO 3166 3 letter country code\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nresources\n - JSON array with the geography resources\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGeography - Countries\n\n\nReturns all the available countries - Category: util\n\n\n/geography/info/countries\n - GET\n\n\nParameters\n\n\nResponse\n\n\n\n\nresources\n - JSON array with the geography resources\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGeography - States\n\n\nReturns all the available states / regions in the given country - Category: util\n\n\n/geography/info/states\n - GET\n\n\nParameters\n\n\n\n\ncountry\n - Specifies the ISO 3166 3 letter country code\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nresources\n - JSON array with the geography resources\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGet Monitor Creation Report\n\n\nReturns a list of Teams within an Organization and how many monitors were created during a given time period - Category: reports\n\n\n/report/monitorCreation\n - GET\n\n\nParameters\n\n\n\n\norganizationId\n - The id of the organization being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndata\n - List of 0..n monitor creation report rows\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGet Social Site Report\n\n\nReturns a list of social sites and associated usernames for Teams within an Organization. Also indicates which of the social sites have failed and when - Category: reports\n\n\n/report/socialSites\n - GET\n\n\nParameters\n\n\n\n\norganizationId\n - The id of the organization being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndata\n - List of 0..n social site report rows\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGet User Activity Report\n\n\nReturns a list of users within an Organization including information on when they last logged into the platform, the last monitor they created, and the last monitor they viewed - Category: reports\n\n\n/report/userActivity\n - GET\n\n\nParameters\n\n\n\n\norganizationId\n - The id of the organization being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndata\n - List of 0..n user activity report rows\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nGet User Invitation Report\n\n\nReturns a list of users within an Organization and which Team(s) they were invited to. Also indicates when the invitation was sent and when it was accepted - Category: reports\n\n\n/report/userInvitations\n - GET\n\n\nParameters\n\n\n\n\norganizationId\n - The id of the organization being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndata\n - List of 0..n user invitation report rows\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nImage analysis\n\n\nTo return image classification data - Category: util\n\n\n/imageanalysis\n - GET\n\n\nParameters\n\n\n\n\nurl\n - Image URL\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nimgData\n - Message object contains request parameters and image classification result\n\n\nType: ImageAnalysisData\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nInstagram Followers\n\n\nTotal daily follower counts for Instagram social account monitors - Category: social\n\n\n/monitor/instagram/followers\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nInstagram Hashtags\n\n\nTotal daily volume by Instagram hashtags for specific monitor - Category: social\n\n\n/monitor/instagram/hashtags\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nInstagram Sent Media\n\n\nDaily likes, comments, and tags for individual media posted by an Instagram account in an Instagram social account monitor - Category: social\n\n\n/monitor/instagram/sentmedia\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nInstagram Total Activity\n\n\nDaily likes, comments, and shares for individual admin posts made by an Instagram account in an Instagram social account monitor - Category: social\n\n\n/monitor/instagram/totalactivity\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nInterest Affinities\n\n\nAggregate affinities for the selected monitor over a given date range - Category: visualizations\n\n\n/monitor/interestaffinities\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\ndaily\n - If true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range.\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\ndocumentsource\n - document source for affinities. valid params [TWITTER, TUMBLR]\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\naffinityInfo\n - JSON array of affinity objects containing information about the top affinities for the date range selected\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Audit\n\n\nAudit information about the selected monitor - Category: admin\n\n\n/monitor/audit\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor to be audited\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nauditInfo\n - JSON array of audit events pertaining to the selected monitor\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Detail\n\n\nAttributes of the specified monitor - Category: admin\n\n\n/monitor/detail\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nmonitorDetail\n - JSON array of monitor details\n\n\nType: MonitorDetailModel\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Dump\n\n\nGet detailed information of the monitor - Category: admin\n\n\n/monitor/dump\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nmonitorDump\n - Monitor dump\n\n\nType: MonitorDumpModel\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Image Results\n\n\nDaily image results for a monitor - Category: results\n\n\n/monitor/imageresults\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\ntype\n - Specifies type of image classes, valid values [object, scene, action, logo]\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\ntop\n - If defined, only the top number of results will be returned\n\n\nType: Integer\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nresults\n - JSON array of zero or more daily image results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor List\n\n\nList of monitors available to the passed in username - Category: admin\n\n\n/monitor/list\n - GET\n\n\nParameters\n\n\n\n\nteam\n - The id of the team to which the listed monitors belong\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nmonitors\n - JSON array of monitors viewable by the user\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Results\n\n\nDaily results for a monitor - Category: results\n\n\n/monitor/results\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nhideExcluded\n - If true, categories set as hidden will not be included in category proportion calculations\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nresults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Results by City\n\n\nReturns all the monitor results grouped by the cities / urban areas in a given country (if given) - Category: results\n\n\n/monitor/geography/cities\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\ncountry\n - Specifies the ISO 3166 3 letter country code, if not given all cities in the world will be returned\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Requested start date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Requested end date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\ntotalVolume\n - Volume matching the defined geography filter\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\ndata\n - JSON array of monitor geography result information\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Results by Country\n\n\nReturns all the monitor results grouped by country - Category: results\n\n\n/monitor/geography/countries\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Requested start date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Requested end date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\ntotalVolume\n - Volume matching the defined geography filter\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\ndata\n - JSON array of monitor geography result information\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Results by State\n\n\nReturns all the monitor results grouped by the country states / regions - Category: results\n\n\n/monitor/geography/states\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\ncountry\n - Specifies the ISO 3166 3 letter country code\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Requested start date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Requested end date\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\ntotalVolume\n - Volume matching the defined geography filter\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\ndata\n - JSON array of monitor geography result information\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nMonitor Training Posts\n\n\nDownload training posts for a monitor - Category: admin\n\n\n/monitor/trainingposts\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\ncategory\n - Category id to target training posts from a specific category\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ntrainingPosts\n - JSON array of training posts for the selected monitor or category in a monitor\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nPosts\n\n\nInformation about posts in a monitor - Category: visualizations\n\n\n/monitor/posts\n - GET || POST\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nMISSING\n - Optional JSON payload to filter response\n\n\nType: MonitorPostsFilter\n\n\nRequired = False\n\n\n\n\n\n\nfilter\n - Pipe-separated list of field:value pairs used to filter results by given parameters\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\nextendLimit\n - If true, increases the limit of returned posts from 500 per call to 10,000 per call\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\nfullContents\n - If true, the contents field will return the original, complete post contents instead of truncating around search terms\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\ngeotagged\n - If true, returns only geotagged documents matching and the given filter, if false or undefined any post matching the given filter\n\n\nType: boolean\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nposts\n - JSON array of zero or more post objects that contain post-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\ntotalPostsAvailable\n - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint.\n\n\nType: int\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Cashtags\n\n\nGet Cashtags associated to a Monitor - Category: monitors\n\n\n/realtime/monitor/cashtags\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\ntop\n - The top N cashtags to retrieve\n\n\nType: Integer\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Configure\n\n\nConfigure the Realtime evaluators for the Monitor - Category: monitors\n\n\n/realtime/monitor/configure\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Details\n\n\nGet the Realtime evaluators details for the Monitor - Category: monitors\n\n\n/realtime/monitor/detail\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Disable\n\n\nDisable Realtime Data - Category: monitors\n\n\n/realtime/monitor/disable\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nRealtime Enable\n\n\nEnable Realtime Data - Category: monitors\n\n\n/realtime/monitor/enable\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nRealtime Hashtags\n\n\nGet Hashtags associated to a Monitor - Category: monitors\n\n\n/realtime/monitor/hashtags\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\ntop\n - The top N hashtags to retrieve\n\n\nType: Integer\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Monitor List\n\n\nGet the Monitors which are in Proteus - Category: monitors\n\n\n/realtime/monitor/list\n - GET\n\n\nParameters\n\n\n\n\nteam\n - The id of the team to which the listed monitors belong\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Retweets\n\n\nGet the Realtime retweets for the Monitor - Category: monitors\n\n\n/realtime/monitor/retweets\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime SocialGuids\n\n\nGet the Realtime social guids for the Monitor - Category: monitors\n\n\n/realtime/monitor/socialguids\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\ntype\n - Specifies the document type\n\n\nType: String\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\nreceivedafter\n - Specifies inclusive receivedafter date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Tweets\n\n\nGet the Realtime tweets for the Monitor - Category: monitors\n\n\n/realtime/monitor/tweets\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Volume\n\n\nGet the Realtime volume for the Monitor - Category: monitors\n\n\n/realtime/monitor/volume\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\ntype\n - Specifies the document type to filter\n\n\nType: List\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nRealtime Volume by Sentiment\n\n\nGet the Realtime volume by sentiment for the Monitor - Category: monitors\n\n\n/realtime/monitor/volumebysentiment\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in epoch seconds\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\ntype\n - Specifies the document type to filter\n\n\nType: List\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nrealtimeData\n - JSON object of monitor realtime data\n\n\nType: Map\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nStream Add Monitor\n\n\nStream Add Monitor Association - Category: admin\n\n\n/stream/{streamid}/monitor/{monitorid}\n - POST\n\n\nParameters\n\n\n\n\nstreamId\n - The id of the stream\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\nmonitorId\n - The id of the monitor to which the association will be created\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nStream Create\n\n\nStream creation - Category: admin\n\n\n/stream\n - POST\n\n\nParameters\n\n\nResponse\n\n\n\n\nstream\n - Stream information\n\n\nType: StreamModel\n\n\nRestricted = False\n\n\n\n\n\n\npath\n - Stream path\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nStream Delete\n\n\nStream deletion - Category: admin\n\n\n/stream/{streamid}\n - DELETE\n\n\nParameters\n\n\n\n\nstreamId\n - The id of the stream to delete\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nStream List\n\n\nList of streams available to the passed in username - Category: admin\n\n\n/stream/list\n - GET\n\n\nParameters\n\n\n\n\nteamid\n - The id of the team to which the listed streams belong\n\n\nType: Long\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstreams\n - JSON array of streams viewable by the user\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nStream Posts\n\n\nInformation about posts in a stream - Category: results\n\n\n/stream/{streamid}/posts\n - GET\n\n\nParameters\n\n\n\n\nstreamId\n - The id of the stream to which the realtime information belongs\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\ncount\n - The maximum number of posts to fetch from the stream\n\n\nType: Integer\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nposts\n - JSON array of zero or more post objects that contain post-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\ntotalPostsAvailable\n - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint.\n\n\nType: int\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nStream Remove Monitor\n\n\nStream Remove Monitor Association - Category: admin\n\n\n/stream/{streamid}/monitor/{monitorid}\n - DELETE\n\n\nParameters\n\n\n\n\nstreamId\n - The id of the stream\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\nmonitorId\n - The id of the monitor to which the association will be removed\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nStream Update Monitor\n\n\nStream Update Monitor Data - Category: admin\n\n\n/stream/{streamid}\n - POST\n\n\nParameters\n\n\n\n\nstreamId\n - The id of the stream\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nTeam List\n\n\nList of teams accessible to the current user - Category: admin\n\n\n/team/list\n - GET\n\n\nParameters\n\n\nResponse\n\n\n\n\nteams\n - JSON array of teams accessible by the user\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTop Sites and Content Sources\n\n\nContent source breakdown and top sites - Category: results\n\n\n/monitor/sources\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ncontentSources\n - JSON array of zero or more content sources objects that contain results for each date requested\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTopic Clustering\n\n\nXML data that can be used to generate clustering visualizations using third-party software - Category: visualizations\n\n\n/monitor/topics\n - GET || POST\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nMISSING\n - Optional JSON payload to filter response\n\n\nType: MonitorPostsFilter\n\n\nRequired = False\n\n\n\n\n\n\nfilter\n - Pipe-separated list of field:value pairs used to filter results by given parameters\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nclustering\n - XML string for generating visualizations\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTopic Waves\n\n\nTopic waves information for a monitor - Category: visualizations\n\n\n/monitor/topicwaves\n - GET || POST\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nMISSING\n - Optional JSON payload to filter response\n\n\nType: MonitorPostsFilter\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\ntimezone\n - IANA timezone identifier specifying the timezone for all dates in the response\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\ngroupBy\n - Defines the grouping for the volume information\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\ntotalTopicsVolume\n - Total Volume for the topics\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\ntopics\n - JSON array of 1..n topics volume information for grouped periods\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTraining Document Upload\n\n\nTrain monitors via the API - Category: util\n\n\n/monitor/train\n - POST\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being trained\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nmessage\n - Success response indicating a training post has been sucessfully uploaded\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTwitter Engagement Metrics\n\n\nEngagement metrics for Twitter content in a monitor - Category: results\n\n\n/monitor/twittermetrics\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTwitter Followers\n\n\nTotal daily follower counts for Twitter Social Account monitors - Category: social\n\n\n/monitor/twittersocial/followers\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTwitter Sent Posts\n\n\nDaily retweets, replies, and impressions for individual posts made by a Twitter account in a Twitter social account monitor - Category: social\n\n\n/monitor/twittersocial/sentposts\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nTwitter Total Engagement\n\n\nDaily retweets, replies, and mentions for a targeted Twitter account in a Twitter social account monitor - Category: social\n\n\n/monitor/twittersocial/totalengagement\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndailyResults\n - JSON array of zero or more daily results objects that contain endpoint-specific attributes\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nVolume\n\n\nVolume of total posts in a monitor - Category: results\n\n\n/monitor/volume\n - GET\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\ngroupBy\n - Specifies how the volume data over the date range will be grouped. Valid values: [HOURLY, DAILY, WEEKLY, MONTHLY]. Defaults to DAILY. Grouping requires a date range of at least 1 full unit; e.g., WEEKLY requires a date range of at least 1 week. Grouping only returns full units so the range may be truncated. e.g., 2017-01-15 to 2017-03-15 with MONTHLY grouping will return a date range of 2017-02-01 to 2017-03-01. A monitor must have complete results for the specified date range. If any day in the range is missing results an error will be returned.\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nstartDate\n - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\nendDate\n - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss\n\n\nType: Date\n\n\nRestricted = False\n\n\n\n\n\n\ntimezone\n - IANA timezone identifier specifying the timezone for all dates in the response\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\ngroupBy\n - Defines the grouping for the volume information\n\n\nType: String\n\n\nRestricted = False\n\n\n\n\n\n\nnumberOfDocuments\n - Total volume for this period\n\n\nType: long\n\n\nRestricted = False\n\n\n\n\n\n\nvolume\n - JSON array of 1..n volume information for grouped periods\n\n\nType: List\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nWhitelistBlacklist\n\n\nDetailed Information about a specific whitelistblacklists associated to the monitor - Category: visualizations\n\n\n/whitelistblacklist/{whitelistblacklistid}/detail\n - GET || POST\n\n\nParameters\n\n\n\n\nwhitelistBlacklistId\n - The id of the whitelistblacklist being requested\n\n\nType: Long\n\n\nRequired = True\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nwhitelistblacklistdetail\n - JSON object of whitelistblacklist detail\n\n\nType: WhitelistBlacklistDetailModel\n\n\nRestricted = False\n\n\n\n\n\n\n\n\n\n\nWord Cloud\n\n\nWord frequency information for posts in a monitor - Category: visualizations\n\n\n/monitor/wordcloud\n - GET || POST\n\n\nParameters\n\n\n\n\nid\n - The id of the monitor being requested\n\n\nType: long\n\n\nRequired = True\n\n\n\n\n\n\nstart\n - Specifies inclusive start date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nend\n - Specifies exclusive end date in YYYY-MM-DD\n\n\nType: Date\n\n\nRequired = True\n\n\n\n\n\n\nMISSING\n - Optional JSON payload to filter response\n\n\nType: MonitorPostsFilter\n\n\nRequired = False\n\n\n\n\n\n\nfilter\n - Pipe-separated list of field:value pairs used to filter results by given parameters\n\n\nType: String\n\n\nRequired = False\n\n\n\n\n\n\n\n\nResponse\n\n\n\n\ndata\n - Map of the top 300 terms appearing in a monitor to their frequency in that monitor\n\n\nType: Map\n\n\nRestricted = False",
            "title": "Crimson Api Documentation"
        },
        {
            "location": "/crimson_api_docs/#crimson-hexagon-api-documentation",
            "text": "ROOT_URL =  https://api.crimsonhexagon.com/api/",
            "title": "Crimson Hexagon API Documentation"
        },
        {
            "location": "/crimson_api_docs/#endpoints",
            "text": "Analysis Request  Analysis Results  Authentication  Authors  Content Upload  Content Upload Custom Fields Support  Day and Time  Demographics - Age  Demographics - Gender  Facebook Admin Posts  Facebook Page Likes  Facebook Total Activity  Geography - All Resources  Geography - Cities  Geography - Countries  Geography - States  Get Monitor Creation Report  Get Social Site Report  Get User Activity Report  Get User Invitation Report  Image analysis  Instagram Followers  Instagram Hashtags  Instagram Sent Media  Instagram Total Activity  Interest Affinities  Monitor Audit  Monitor Detail  Monitor Dump  Monitor Image Results  Monitor List  Monitor Results  Monitor Results by City  Monitor Results by Country  Monitor Results by State  Monitor Training Posts  Posts  Realtime Cashtags  Realtime Configure  Realtime Details  Realtime Disable  Realtime Enable  Realtime Hashtags  Realtime Monitor List  Realtime Retweets  Realtime SocialGuids  Realtime Tweets  Realtime Volume  Realtime Volume by Sentiment  Stream Add Monitor  Stream Create  Stream Delete  Stream List  Stream Posts  Stream Remove Monitor  Stream Update Monitor  Team List  Top Sites and Content Sources  Topic Clustering  Topic Waves  Training Document Upload  Twitter Engagement Metrics  Twitter Followers  Twitter Sent Posts  Twitter Total Engagement  Volume  WhitelistBlacklist  Word Cloud",
            "title": "Endpoints"
        },
        {
            "location": "/crimson_api_docs/#analysis-request",
            "text": "",
            "title": "Analysis Request"
        },
        {
            "location": "/crimson_api_docs/#to-submit-an-analysis-task-for-asynchronous-processing-category-results",
            "text": "",
            "title": "To submit an analysis task for asynchronous processing  - Category: results"
        },
        {
            "location": "/crimson_api_docs/#results-post",
            "text": "",
            "title": "/results - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response",
            "text": "status  - Defines the status of the analysis. Refer to Response Statuses table for additional information  Type: Status  Restricted = False    resultId  - Defines the unique identifier by which the analysis status/results can be retrieved  Type: long  Restricted = False    retrieveAt  - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING  Type: Date  Restricted = False    request  - Defines the original request parameters made to invoke this analysis  Type: ApiAnalysisTaskRequest  Restricted = False    resultsUri  - Defines the URI that can be queried to retrieve the analysis status/results in the future  Type: String  Restricted = False    contractInfo  - If requested, the contract info after this request has been processed.  Type: ApiAnalysisContractInfo  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#analysis-results",
            "text": "",
            "title": "Analysis Results"
        },
        {
            "location": "/crimson_api_docs/#to-retrieve-the-status-of-the-analysis-task-and-the-results-category-results",
            "text": "",
            "title": "To retrieve the status of the analysis task and the results - Category: results"
        },
        {
            "location": "/crimson_api_docs/#resultsresultid-get",
            "text": "",
            "title": "/results/{resultId} - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_1",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_1",
            "text": "status  - Defines the status of the analysis. Refer to Response Statuses table for additional information  Type: Status  Restricted = False    resultId  - Defines the unique identifier by which the analysis status/results can be retrieved  Type: long  Restricted = False    retrieveAt  - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING  Type: Date  Restricted = False    request  - Defines the original request parameters made to invoke this analysis  Type: ApiAnalysisTaskRequest  Restricted = False    resultsUri  - Defines the URI that can be queried to retrieve the analysis status/results in the future  Type: String  Restricted = False    contractInfo  - If requested, the contract info after this request has been processed.  Type: ApiAnalysisContractInfo  Restricted = False    resultId  - Identificator of the task response  Type: long  Restricted = False    status  - Current status of analysis task  Type: Status  Restricted = False    analysisResults  - Analysis result  Type: AnalysisResults  Restricted = False    message  - Result message  Type: String  Restricted = False    request  - Related task request  Type: ApiAnalysisTaskRequest  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/crimson_api_docs/#generate-authentication-tokens-for-use-in-api-requests-category-admin",
            "text": "",
            "title": "Generate authentication tokens for use in API requests - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#authenticate-get",
            "text": "",
            "title": "/authenticate - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_2",
            "text": "username  - Username of the requesting user  Type: String  Required = True    password  - Password of the requesting user  Type: String  Required = True    force  - If true, forces authentication token update for the requesting user  Type: boolean  Required = False    noExpiration  - If true, the authentication token returned will not expire  Type: boolean  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_2",
            "text": "auth  - Authentication token  Type: String  Restricted = False    expires  - Token expiration date (24 hours from token creation). If noExpiration = true, this field will not be returned  Type: Date  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#authors",
            "text": "",
            "title": "Authors"
        },
        {
            "location": "/crimson_api_docs/#information-about-twitter-authors-in-a-monitor-category-results",
            "text": "",
            "title": "Information about Twitter authors in a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorauthors-get",
            "text": "",
            "title": "/monitor/authors - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_3",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_3",
            "text": "authors  - JSON array of zero or more authors objects that contain author-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#content-upload",
            "text": "",
            "title": "Content Upload"
        },
        {
            "location": "/crimson_api_docs/#upload-content-via-the-api-category-admin",
            "text": "",
            "title": "Upload content via the API - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#contentupload-post",
            "text": "",
            "title": "/content/upload - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_4",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_4",
            "text": "uploadCount  - The number of posts that were successfully uploaded  Type: Integer  Restricted = False    DocumentsUploadedInLastTwentyFourHours  - If requested, the number of documents this organization has uploaded in the last twenty four hours.  Type: Long  Restricted = False    ContractedDocumentsWithinTwentyFourHours  - If requested, the number of documents this organization can upload in a rolling twenty four hour period.  Type: Long  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#content-upload-custom-fields-support",
            "text": "",
            "title": "Content Upload Custom Fields Support"
        },
        {
            "location": "/crimson_api_docs/#upload-content-via-the-api-w-custom-fields-support-category-admin",
            "text": "",
            "title": "Upload content via the API w/ custom fields support - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#contentupload-post_1",
            "text": "",
            "title": "/content/upload - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_5",
            "text": "documentType  - The id of the document type to which the uploading docs will belong  Type: Long  Required = True    batch  - The id of the batch to which the uploading docs will belong  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_5",
            "text": "batchId  - The id of the batch to which these docs belong  Type: String  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#day-and-time",
            "text": "",
            "title": "Day and Time"
        },
        {
            "location": "/crimson_api_docs/#volume-information-for-a-monitor-aggregated-by-time-of-day-or-day-of-week-category-results",
            "text": "",
            "title": "Volume information for a monitor aggregated by time of day or day of week) - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitordayandtime-get",
            "text": "",
            "title": "/monitor/dayandtime - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_6",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    aggregatebyday  - If true, volume information will be aggregated by day of the week instead of time of day  Type: boolean  Required = False    uselocaltime  - If true, volume aggregation will use the time local to the publishing author of a post when determining counts by day/time, instead of converting that time to the timezone of the selected monitor  Type: boolean  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_6",
            "text": "volumes  - JSON array of zero or more objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#demographics-age",
            "text": "",
            "title": "Demographics - Age"
        },
        {
            "location": "/crimson_api_docs/#daily-volume-information-for-age-in-a-monitor-category-results",
            "text": "",
            "title": "Daily volume information for age in a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitordemographicsage-get",
            "text": "",
            "title": "/monitor/demographics/age - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_7",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_7",
            "text": "ageCounts  - JSON array of zero or more objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#demographics-gender",
            "text": "",
            "title": "Demographics - Gender"
        },
        {
            "location": "/crimson_api_docs/#daily-volume-information-for-gender-in-a-monitor-category-results",
            "text": "",
            "title": "Daily volume information for gender in a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitordemographicsgender-get",
            "text": "",
            "title": "/monitor/demographics/gender - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_8",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_8",
            "text": "genderCounts  - JSON array of zero or more objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#facebook-admin-posts",
            "text": "",
            "title": "Facebook Admin Posts"
        },
        {
            "location": "/crimson_api_docs/#daily-likes-comments-and-shares-for-individual-admin-posts-made-by-a-facebook-account-in-a-facebook-social-account-monitor-category-social",
            "text": "",
            "title": "Daily likes, comments, and shares for individual admin posts made by a Facebook account in a Facebook social account monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorfacebookadminposts-get",
            "text": "",
            "title": "/monitor/facebook/adminposts - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_9",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_9",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#facebook-page-likes",
            "text": "",
            "title": "Facebook Page Likes"
        },
        {
            "location": "/crimson_api_docs/#total-page-likes-as-of-the-requested-dates-for-a-facebook-social-monitor-category-social",
            "text": "",
            "title": "Total page likes as of the requested dates for a Facebook social monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorfacebookpagelikes-get",
            "text": "",
            "title": "/monitor/facebook/pagelikes - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_10",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_10",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#facebook-total-activity",
            "text": "",
            "title": "Facebook Total Activity"
        },
        {
            "location": "/crimson_api_docs/#daily-total-likes-comments-and-shares-on-admin-and-user-posts-for-a-facebook-account-in-a-facebook-social-monitor-category-social",
            "text": "",
            "title": "Daily total likes, comments, and shares on admin and user posts for a Facebook account in a Facebook social monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorfacebooktotalactivity-get",
            "text": "",
            "title": "/monitor/facebook/totalactivity - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_11",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_11",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#geography-all-resources",
            "text": "",
            "title": "Geography - All Resources"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-available-geolocation-resources-category-util",
            "text": "",
            "title": "Returns all the available geolocation resources - Category: util"
        },
        {
            "location": "/crimson_api_docs/#geographyinfoall-get",
            "text": "",
            "title": "/geography/info/all - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_12",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_12",
            "text": "resources  - JSON array with the geography resources  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#geography-cities",
            "text": "",
            "title": "Geography - Cities"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-available-cities-urban-areas-in-the-given-country-category-util",
            "text": "",
            "title": "Returns all the available cities / urban areas in the given country - Category: util"
        },
        {
            "location": "/crimson_api_docs/#geographyinfocities-get",
            "text": "",
            "title": "/geography/info/cities - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_13",
            "text": "country  - Specifies the ISO 3166 3 letter country code  Type: String  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_13",
            "text": "resources  - JSON array with the geography resources  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#geography-countries",
            "text": "",
            "title": "Geography - Countries"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-available-countries-category-util",
            "text": "",
            "title": "Returns all the available countries - Category: util"
        },
        {
            "location": "/crimson_api_docs/#geographyinfocountries-get",
            "text": "",
            "title": "/geography/info/countries - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_14",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_14",
            "text": "resources  - JSON array with the geography resources  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#geography-states",
            "text": "",
            "title": "Geography - States"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-available-states-regions-in-the-given-country-category-util",
            "text": "",
            "title": "Returns all the available states / regions in the given country - Category: util"
        },
        {
            "location": "/crimson_api_docs/#geographyinfostates-get",
            "text": "",
            "title": "/geography/info/states - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_15",
            "text": "country  - Specifies the ISO 3166 3 letter country code  Type: String  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_15",
            "text": "resources  - JSON array with the geography resources  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#get-monitor-creation-report",
            "text": "",
            "title": "Get Monitor Creation Report"
        },
        {
            "location": "/crimson_api_docs/#returns-a-list-of-teams-within-an-organization-and-how-many-monitors-were-created-during-a-given-time-period-category-reports",
            "text": "",
            "title": "Returns a list of Teams within an Organization and how many monitors were created during a given time period - Category: reports"
        },
        {
            "location": "/crimson_api_docs/#reportmonitorcreation-get",
            "text": "",
            "title": "/report/monitorCreation - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_16",
            "text": "organizationId  - The id of the organization being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_16",
            "text": "data  - List of 0..n monitor creation report rows  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#get-social-site-report",
            "text": "",
            "title": "Get Social Site Report"
        },
        {
            "location": "/crimson_api_docs/#returns-a-list-of-social-sites-and-associated-usernames-for-teams-within-an-organization-also-indicates-which-of-the-social-sites-have-failed-and-when-category-reports",
            "text": "",
            "title": "Returns a list of social sites and associated usernames for Teams within an Organization. Also indicates which of the social sites have failed and when - Category: reports"
        },
        {
            "location": "/crimson_api_docs/#reportsocialsites-get",
            "text": "",
            "title": "/report/socialSites - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_17",
            "text": "organizationId  - The id of the organization being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_17",
            "text": "data  - List of 0..n social site report rows  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#get-user-activity-report",
            "text": "",
            "title": "Get User Activity Report"
        },
        {
            "location": "/crimson_api_docs/#returns-a-list-of-users-within-an-organization-including-information-on-when-they-last-logged-into-the-platform-the-last-monitor-they-created-and-the-last-monitor-they-viewed-category-reports",
            "text": "",
            "title": "Returns a list of users within an Organization including information on when they last logged into the platform, the last monitor they created, and the last monitor they viewed - Category: reports"
        },
        {
            "location": "/crimson_api_docs/#reportuseractivity-get",
            "text": "",
            "title": "/report/userActivity - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_18",
            "text": "organizationId  - The id of the organization being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_18",
            "text": "data  - List of 0..n user activity report rows  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#get-user-invitation-report",
            "text": "",
            "title": "Get User Invitation Report"
        },
        {
            "location": "/crimson_api_docs/#returns-a-list-of-users-within-an-organization-and-which-teams-they-were-invited-to-also-indicates-when-the-invitation-was-sent-and-when-it-was-accepted-category-reports",
            "text": "",
            "title": "Returns a list of users within an Organization and which Team(s) they were invited to. Also indicates when the invitation was sent and when it was accepted - Category: reports"
        },
        {
            "location": "/crimson_api_docs/#reportuserinvitations-get",
            "text": "",
            "title": "/report/userInvitations - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_19",
            "text": "organizationId  - The id of the organization being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_19",
            "text": "data  - List of 0..n user invitation report rows  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#image-analysis",
            "text": "",
            "title": "Image analysis"
        },
        {
            "location": "/crimson_api_docs/#to-return-image-classification-data-category-util",
            "text": "",
            "title": "To return image classification data - Category: util"
        },
        {
            "location": "/crimson_api_docs/#imageanalysis-get",
            "text": "",
            "title": "/imageanalysis - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_20",
            "text": "url  - Image URL  Type: String  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_20",
            "text": "imgData  - Message object contains request parameters and image classification result  Type: ImageAnalysisData  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#instagram-followers",
            "text": "",
            "title": "Instagram Followers"
        },
        {
            "location": "/crimson_api_docs/#total-daily-follower-counts-for-instagram-social-account-monitors-category-social",
            "text": "",
            "title": "Total daily follower counts for Instagram social account monitors - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorinstagramfollowers-get",
            "text": "",
            "title": "/monitor/instagram/followers - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_21",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_21",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#instagram-hashtags",
            "text": "",
            "title": "Instagram Hashtags"
        },
        {
            "location": "/crimson_api_docs/#total-daily-volume-by-instagram-hashtags-for-specific-monitor-category-social",
            "text": "",
            "title": "Total daily volume by Instagram hashtags for specific monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorinstagramhashtags-get",
            "text": "",
            "title": "/monitor/instagram/hashtags - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_22",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_22",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#instagram-sent-media",
            "text": "",
            "title": "Instagram Sent Media"
        },
        {
            "location": "/crimson_api_docs/#daily-likes-comments-and-tags-for-individual-media-posted-by-an-instagram-account-in-an-instagram-social-account-monitor-category-social",
            "text": "",
            "title": "Daily likes, comments, and tags for individual media posted by an Instagram account in an Instagram social account monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorinstagramsentmedia-get",
            "text": "",
            "title": "/monitor/instagram/sentmedia - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_23",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_23",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#instagram-total-activity",
            "text": "",
            "title": "Instagram Total Activity"
        },
        {
            "location": "/crimson_api_docs/#daily-likes-comments-and-shares-for-individual-admin-posts-made-by-an-instagram-account-in-an-instagram-social-account-monitor-category-social",
            "text": "",
            "title": "Daily likes, comments, and shares for individual admin posts made by an Instagram account in an Instagram social account monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitorinstagramtotalactivity-get",
            "text": "",
            "title": "/monitor/instagram/totalactivity - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_24",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_24",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#interest-affinities",
            "text": "",
            "title": "Interest Affinities"
        },
        {
            "location": "/crimson_api_docs/#aggregate-affinities-for-the-selected-monitor-over-a-given-date-range-category-visualizations",
            "text": "",
            "title": "Aggregate affinities for the selected monitor over a given date range - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#monitorinterestaffinities-get",
            "text": "",
            "title": "/monitor/interestaffinities - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_25",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    daily  - If true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range.  Type: boolean  Required = False    documentsource  - document source for affinities. valid params [TWITTER, TUMBLR]  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_25",
            "text": "startDate  - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    endDate  - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    affinityInfo  - JSON array of affinity objects containing information about the top affinities for the date range selected  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-audit",
            "text": "",
            "title": "Monitor Audit"
        },
        {
            "location": "/crimson_api_docs/#audit-information-about-the-selected-monitor-category-admin",
            "text": "",
            "title": "Audit information about the selected monitor - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#monitoraudit-get",
            "text": "",
            "title": "/monitor/audit - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_26",
            "text": "id  - The id of the monitor to be audited  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_26",
            "text": "auditInfo  - JSON array of audit events pertaining to the selected monitor  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-detail",
            "text": "",
            "title": "Monitor Detail"
        },
        {
            "location": "/crimson_api_docs/#attributes-of-the-specified-monitor-category-admin",
            "text": "",
            "title": "Attributes of the specified monitor - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#monitordetail-get",
            "text": "",
            "title": "/monitor/detail - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_27",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_27",
            "text": "monitorDetail  - JSON array of monitor details  Type: MonitorDetailModel  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-dump",
            "text": "",
            "title": "Monitor Dump"
        },
        {
            "location": "/crimson_api_docs/#get-detailed-information-of-the-monitor-category-admin",
            "text": "",
            "title": "Get detailed information of the monitor - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#monitordump-get",
            "text": "",
            "title": "/monitor/dump - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_28",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_28",
            "text": "monitorDump  - Monitor dump  Type: MonitorDumpModel  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-image-results",
            "text": "",
            "title": "Monitor Image Results"
        },
        {
            "location": "/crimson_api_docs/#daily-image-results-for-a-monitor-category-results",
            "text": "",
            "title": "Daily image results for a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorimageresults-get",
            "text": "",
            "title": "/monitor/imageresults - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_29",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    type  - Specifies type of image classes, valid values [object, scene, action, logo]  Type: String  Required = False    top  - If defined, only the top number of results will be returned  Type: Integer  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_29",
            "text": "results  - JSON array of zero or more daily image results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-list",
            "text": "",
            "title": "Monitor List"
        },
        {
            "location": "/crimson_api_docs/#list-of-monitors-available-to-the-passed-in-username-category-admin",
            "text": "",
            "title": "List of monitors available to the passed in username - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#monitorlist-get",
            "text": "",
            "title": "/monitor/list - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_30",
            "text": "team  - The id of the team to which the listed monitors belong  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_30",
            "text": "monitors  - JSON array of monitors viewable by the user  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-results",
            "text": "",
            "title": "Monitor Results"
        },
        {
            "location": "/crimson_api_docs/#daily-results-for-a-monitor-category-results",
            "text": "",
            "title": "Daily results for a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorresults-get",
            "text": "",
            "title": "/monitor/results - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_31",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    hideExcluded  - If true, categories set as hidden will not be included in category proportion calculations  Type: boolean  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_31",
            "text": "results  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-results-by-city",
            "text": "",
            "title": "Monitor Results by City"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-monitor-results-grouped-by-the-cities-urban-areas-in-a-given-country-if-given-category-results",
            "text": "",
            "title": "Returns all the monitor results grouped by the cities / urban areas in a given country (if given) - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorgeographycities-get",
            "text": "",
            "title": "/monitor/geography/cities - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_32",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    country  - Specifies the ISO 3166 3 letter country code, if not given all cities in the world will be returned  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_32",
            "text": "startDate  - Requested start date  Type: Date  Restricted = False    endDate  - Requested end date  Type: Date  Restricted = False    totalVolume  - Volume matching the defined geography filter  Type: long  Restricted = False    data  - JSON array of monitor geography result information  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-results-by-country",
            "text": "",
            "title": "Monitor Results by Country"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-monitor-results-grouped-by-country-category-results",
            "text": "",
            "title": "Returns all the monitor results grouped by country - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorgeographycountries-get",
            "text": "",
            "title": "/monitor/geography/countries - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_33",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_33",
            "text": "startDate  - Requested start date  Type: Date  Restricted = False    endDate  - Requested end date  Type: Date  Restricted = False    totalVolume  - Volume matching the defined geography filter  Type: long  Restricted = False    data  - JSON array of monitor geography result information  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-results-by-state",
            "text": "",
            "title": "Monitor Results by State"
        },
        {
            "location": "/crimson_api_docs/#returns-all-the-monitor-results-grouped-by-the-country-states-regions-category-results",
            "text": "",
            "title": "Returns all the monitor results grouped by the country states / regions - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorgeographystates-get",
            "text": "",
            "title": "/monitor/geography/states - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_34",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    country  - Specifies the ISO 3166 3 letter country code  Type: String  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_34",
            "text": "startDate  - Requested start date  Type: Date  Restricted = False    endDate  - Requested end date  Type: Date  Restricted = False    totalVolume  - Volume matching the defined geography filter  Type: long  Restricted = False    data  - JSON array of monitor geography result information  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#monitor-training-posts",
            "text": "",
            "title": "Monitor Training Posts"
        },
        {
            "location": "/crimson_api_docs/#download-training-posts-for-a-monitor-category-admin",
            "text": "",
            "title": "Download training posts for a monitor - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#monitortrainingposts-get",
            "text": "",
            "title": "/monitor/trainingposts - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_35",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    category  - Category id to target training posts from a specific category  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_35",
            "text": "trainingPosts  - JSON array of training posts for the selected monitor or category in a monitor  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#posts",
            "text": "",
            "title": "Posts"
        },
        {
            "location": "/crimson_api_docs/#information-about-posts-in-a-monitor-category-visualizations",
            "text": "",
            "title": "Information about posts in a monitor - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#monitorposts-get-post",
            "text": "",
            "title": "/monitor/posts - GET || POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_36",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    MISSING  - Optional JSON payload to filter response  Type: MonitorPostsFilter  Required = False    filter  - Pipe-separated list of field:value pairs used to filter results by given parameters  Type: String  Required = False    extendLimit  - If true, increases the limit of returned posts from 500 per call to 10,000 per call  Type: boolean  Required = False    fullContents  - If true, the contents field will return the original, complete post contents instead of truncating around search terms  Type: boolean  Required = False    geotagged  - If true, returns only geotagged documents matching and the given filter, if false or undefined any post matching the given filter  Type: boolean  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_36",
            "text": "posts  - JSON array of zero or more post objects that contain post-specific attributes  Type: List  Restricted = False    totalPostsAvailable  - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint.  Type: int  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-cashtags",
            "text": "",
            "title": "Realtime Cashtags"
        },
        {
            "location": "/crimson_api_docs/#get-cashtags-associated-to-a-monitor-category-monitors",
            "text": "",
            "title": "Get Cashtags associated to a Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorcashtags-get",
            "text": "",
            "title": "/realtime/monitor/cashtags - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_37",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False    top  - The top N cashtags to retrieve  Type: Integer  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_37",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-configure",
            "text": "",
            "title": "Realtime Configure"
        },
        {
            "location": "/crimson_api_docs/#configure-the-realtime-evaluators-for-the-monitor-category-monitors",
            "text": "",
            "title": "Configure the Realtime evaluators for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorconfigure-get",
            "text": "",
            "title": "/realtime/monitor/configure - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_38",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_38",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-details",
            "text": "",
            "title": "Realtime Details"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-evaluators-details-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime evaluators details for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitordetail-get",
            "text": "",
            "title": "/realtime/monitor/detail - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_39",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_39",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-disable",
            "text": "",
            "title": "Realtime Disable"
        },
        {
            "location": "/crimson_api_docs/#disable-realtime-data-category-monitors",
            "text": "",
            "title": "Disable Realtime Data - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitordisable-get",
            "text": "",
            "title": "/realtime/monitor/disable - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_40",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_40",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-enable",
            "text": "",
            "title": "Realtime Enable"
        },
        {
            "location": "/crimson_api_docs/#enable-realtime-data-category-monitors",
            "text": "",
            "title": "Enable Realtime Data - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorenable-get",
            "text": "",
            "title": "/realtime/monitor/enable - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_41",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_41",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-hashtags",
            "text": "",
            "title": "Realtime Hashtags"
        },
        {
            "location": "/crimson_api_docs/#get-hashtags-associated-to-a-monitor-category-monitors",
            "text": "",
            "title": "Get Hashtags associated to a Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorhashtags-get",
            "text": "",
            "title": "/realtime/monitor/hashtags - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_42",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False    top  - The top N hashtags to retrieve  Type: Integer  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_42",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-monitor-list",
            "text": "",
            "title": "Realtime Monitor List"
        },
        {
            "location": "/crimson_api_docs/#get-the-monitors-which-are-in-proteus-category-monitors",
            "text": "",
            "title": "Get the Monitors which are in Proteus - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorlist-get",
            "text": "",
            "title": "/realtime/monitor/list - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_43",
            "text": "team  - The id of the team to which the listed monitors belong  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_43",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-retweets",
            "text": "",
            "title": "Realtime Retweets"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-retweets-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime retweets for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorretweets-get",
            "text": "",
            "title": "/realtime/monitor/retweets - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_44",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_44",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-socialguids",
            "text": "",
            "title": "Realtime SocialGuids"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-social-guids-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime social guids for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorsocialguids-get",
            "text": "",
            "title": "/realtime/monitor/socialguids - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_45",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    type  - Specifies the document type  Type: String  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False    receivedafter  - Specifies inclusive receivedafter date in epoch seconds  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_45",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-tweets",
            "text": "",
            "title": "Realtime Tweets"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-tweets-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime tweets for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitortweets-get",
            "text": "",
            "title": "/realtime/monitor/tweets - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_46",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_46",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-volume",
            "text": "",
            "title": "Realtime Volume"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-volume-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime volume for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorvolume-get",
            "text": "",
            "title": "/realtime/monitor/volume - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_47",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False    type  - Specifies the document type to filter  Type: List  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_47",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#realtime-volume-by-sentiment",
            "text": "",
            "title": "Realtime Volume by Sentiment"
        },
        {
            "location": "/crimson_api_docs/#get-the-realtime-volume-by-sentiment-for-the-monitor-category-monitors",
            "text": "",
            "title": "Get the Realtime volume by sentiment for the Monitor - Category: monitors"
        },
        {
            "location": "/crimson_api_docs/#realtimemonitorvolumebysentiment-get",
            "text": "",
            "title": "/realtime/monitor/volumebysentiment - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_48",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in epoch seconds  Type: Long  Required = False    type  - Specifies the document type to filter  Type: List  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_48",
            "text": "realtimeData  - JSON object of monitor realtime data  Type: Map  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-add-monitor",
            "text": "",
            "title": "Stream Add Monitor"
        },
        {
            "location": "/crimson_api_docs/#stream-add-monitor-association-category-admin",
            "text": "",
            "title": "Stream Add Monitor Association - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#streamstreamidmonitormonitorid-post",
            "text": "",
            "title": "/stream/{streamid}/monitor/{monitorid} - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_49",
            "text": "streamId  - The id of the stream  Type: Long  Required = True    monitorId  - The id of the monitor to which the association will be created  Type: Long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_49",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-create",
            "text": "",
            "title": "Stream Create"
        },
        {
            "location": "/crimson_api_docs/#stream-creation-category-admin",
            "text": "",
            "title": "Stream creation - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#stream-post",
            "text": "",
            "title": "/stream - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_50",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_50",
            "text": "stream  - Stream information  Type: StreamModel  Restricted = False    path  - Stream path  Type: String  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-delete",
            "text": "",
            "title": "Stream Delete"
        },
        {
            "location": "/crimson_api_docs/#stream-deletion-category-admin",
            "text": "",
            "title": "Stream deletion - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#streamstreamid-delete",
            "text": "",
            "title": "/stream/{streamid} - DELETE"
        },
        {
            "location": "/crimson_api_docs/#parameters_51",
            "text": "streamId  - The id of the stream to delete  Type: Long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_51",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-list",
            "text": "",
            "title": "Stream List"
        },
        {
            "location": "/crimson_api_docs/#list-of-streams-available-to-the-passed-in-username-category-admin",
            "text": "",
            "title": "List of streams available to the passed in username - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#streamlist-get",
            "text": "",
            "title": "/stream/list - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_52",
            "text": "teamid  - The id of the team to which the listed streams belong  Type: Long  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_52",
            "text": "streams  - JSON array of streams viewable by the user  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-posts",
            "text": "",
            "title": "Stream Posts"
        },
        {
            "location": "/crimson_api_docs/#information-about-posts-in-a-stream-category-results",
            "text": "",
            "title": "Information about posts in a stream - Category: results"
        },
        {
            "location": "/crimson_api_docs/#streamstreamidposts-get",
            "text": "",
            "title": "/stream/{streamid}/posts - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_53",
            "text": "streamId  - The id of the stream to which the realtime information belongs  Type: Long  Required = True    count  - The maximum number of posts to fetch from the stream  Type: Integer  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_53",
            "text": "posts  - JSON array of zero or more post objects that contain post-specific attributes  Type: List  Restricted = False    totalPostsAvailable  - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint.  Type: int  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-remove-monitor",
            "text": "",
            "title": "Stream Remove Monitor"
        },
        {
            "location": "/crimson_api_docs/#stream-remove-monitor-association-category-admin",
            "text": "",
            "title": "Stream Remove Monitor Association - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#streamstreamidmonitormonitorid-delete",
            "text": "",
            "title": "/stream/{streamid}/monitor/{monitorid} - DELETE"
        },
        {
            "location": "/crimson_api_docs/#parameters_54",
            "text": "streamId  - The id of the stream  Type: Long  Required = True    monitorId  - The id of the monitor to which the association will be removed  Type: Long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_54",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#stream-update-monitor",
            "text": "",
            "title": "Stream Update Monitor"
        },
        {
            "location": "/crimson_api_docs/#stream-update-monitor-data-category-admin",
            "text": "",
            "title": "Stream Update Monitor Data - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#streamstreamid-post",
            "text": "",
            "title": "/stream/{streamid} - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_55",
            "text": "streamId  - The id of the stream  Type: Long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_55",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#team-list",
            "text": "",
            "title": "Team List"
        },
        {
            "location": "/crimson_api_docs/#list-of-teams-accessible-to-the-current-user-category-admin",
            "text": "",
            "title": "List of teams accessible to the current user - Category: admin"
        },
        {
            "location": "/crimson_api_docs/#teamlist-get",
            "text": "",
            "title": "/team/list - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_56",
            "text": "",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_56",
            "text": "teams  - JSON array of teams accessible by the user  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#top-sites-and-content-sources",
            "text": "",
            "title": "Top Sites and Content Sources"
        },
        {
            "location": "/crimson_api_docs/#content-source-breakdown-and-top-sites-category-results",
            "text": "",
            "title": "Content source breakdown and top sites - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorsources-get",
            "text": "",
            "title": "/monitor/sources - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_57",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_57",
            "text": "contentSources  - JSON array of zero or more content sources objects that contain results for each date requested  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#topic-clustering",
            "text": "",
            "title": "Topic Clustering"
        },
        {
            "location": "/crimson_api_docs/#xml-data-that-can-be-used-to-generate-clustering-visualizations-using-third-party-software-category-visualizations",
            "text": "",
            "title": "XML data that can be used to generate clustering visualizations using third-party software - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#monitortopics-get-post",
            "text": "",
            "title": "/monitor/topics - GET || POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_58",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    MISSING  - Optional JSON payload to filter response  Type: MonitorPostsFilter  Required = False    filter  - Pipe-separated list of field:value pairs used to filter results by given parameters  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_58",
            "text": "clustering  - XML string for generating visualizations  Type: String  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#topic-waves",
            "text": "",
            "title": "Topic Waves"
        },
        {
            "location": "/crimson_api_docs/#topic-waves-information-for-a-monitor-category-visualizations",
            "text": "",
            "title": "Topic waves information for a monitor - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#monitortopicwaves-get-post",
            "text": "",
            "title": "/monitor/topicwaves - GET || POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_59",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    MISSING  - Optional JSON payload to filter response  Type: MonitorPostsFilter  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_59",
            "text": "startDate  - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    endDate  - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    timezone  - IANA timezone identifier specifying the timezone for all dates in the response  Type: String  Restricted = False    groupBy  - Defines the grouping for the volume information  Type: String  Restricted = False    totalTopicsVolume  - Total Volume for the topics  Type: long  Restricted = False    topics  - JSON array of 1..n topics volume information for grouped periods  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#training-document-upload",
            "text": "",
            "title": "Training Document Upload"
        },
        {
            "location": "/crimson_api_docs/#train-monitors-via-the-api-category-util",
            "text": "",
            "title": "Train monitors via the API - Category: util"
        },
        {
            "location": "/crimson_api_docs/#monitortrain-post",
            "text": "",
            "title": "/monitor/train - POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_60",
            "text": "id  - The id of the monitor being trained  Type: long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_60",
            "text": "message  - Success response indicating a training post has been sucessfully uploaded  Type: String  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#twitter-engagement-metrics",
            "text": "",
            "title": "Twitter Engagement Metrics"
        },
        {
            "location": "/crimson_api_docs/#engagement-metrics-for-twitter-content-in-a-monitor-category-results",
            "text": "",
            "title": "Engagement metrics for Twitter content in a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitortwittermetrics-get",
            "text": "",
            "title": "/monitor/twittermetrics - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_61",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_61",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#twitter-followers",
            "text": "",
            "title": "Twitter Followers"
        },
        {
            "location": "/crimson_api_docs/#total-daily-follower-counts-for-twitter-social-account-monitors-category-social",
            "text": "",
            "title": "Total daily follower counts for Twitter Social Account monitors - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitortwittersocialfollowers-get",
            "text": "",
            "title": "/monitor/twittersocial/followers - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_62",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_62",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#twitter-sent-posts",
            "text": "",
            "title": "Twitter Sent Posts"
        },
        {
            "location": "/crimson_api_docs/#daily-retweets-replies-and-impressions-for-individual-posts-made-by-a-twitter-account-in-a-twitter-social-account-monitor-category-social",
            "text": "",
            "title": "Daily retweets, replies, and impressions for individual posts made by a Twitter account in a Twitter social account monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitortwittersocialsentposts-get",
            "text": "",
            "title": "/monitor/twittersocial/sentposts - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_63",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_63",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#twitter-total-engagement",
            "text": "",
            "title": "Twitter Total Engagement"
        },
        {
            "location": "/crimson_api_docs/#daily-retweets-replies-and-mentions-for-a-targeted-twitter-account-in-a-twitter-social-account-monitor-category-social",
            "text": "",
            "title": "Daily retweets, replies, and mentions for a targeted Twitter account in a Twitter social account monitor - Category: social"
        },
        {
            "location": "/crimson_api_docs/#monitortwittersocialtotalengagement-get",
            "text": "",
            "title": "/monitor/twittersocial/totalengagement - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_64",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_64",
            "text": "dailyResults  - JSON array of zero or more daily results objects that contain endpoint-specific attributes  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#volume",
            "text": "",
            "title": "Volume"
        },
        {
            "location": "/crimson_api_docs/#volume-of-total-posts-in-a-monitor-category-results",
            "text": "",
            "title": "Volume of total posts in a monitor - Category: results"
        },
        {
            "location": "/crimson_api_docs/#monitorvolume-get",
            "text": "",
            "title": "/monitor/volume - GET"
        },
        {
            "location": "/crimson_api_docs/#parameters_65",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    groupBy  - Specifies how the volume data over the date range will be grouped. Valid values: [HOURLY, DAILY, WEEKLY, MONTHLY]. Defaults to DAILY. Grouping requires a date range of at least 1 full unit; e.g., WEEKLY requires a date range of at least 1 week. Grouping only returns full units so the range may be truncated. e.g., 2017-01-15 to 2017-03-15 with MONTHLY grouping will return a date range of 2017-02-01 to 2017-03-01. A monitor must have complete results for the specified date range. If any day in the range is missing results an error will be returned.  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_65",
            "text": "startDate  - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    endDate  - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss  Type: Date  Restricted = False    timezone  - IANA timezone identifier specifying the timezone for all dates in the response  Type: String  Restricted = False    groupBy  - Defines the grouping for the volume information  Type: String  Restricted = False    numberOfDocuments  - Total volume for this period  Type: long  Restricted = False    volume  - JSON array of 1..n volume information for grouped periods  Type: List  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#whitelistblacklist",
            "text": "",
            "title": "WhitelistBlacklist"
        },
        {
            "location": "/crimson_api_docs/#detailed-information-about-a-specific-whitelistblacklists-associated-to-the-monitor-category-visualizations",
            "text": "",
            "title": "Detailed Information about a specific whitelistblacklists associated to the monitor - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#whitelistblacklistwhitelistblacklistiddetail-get-post",
            "text": "",
            "title": "/whitelistblacklist/{whitelistblacklistid}/detail - GET || POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_66",
            "text": "whitelistBlacklistId  - The id of the whitelistblacklist being requested  Type: Long  Required = True",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_66",
            "text": "whitelistblacklistdetail  - JSON object of whitelistblacklist detail  Type: WhitelistBlacklistDetailModel  Restricted = False",
            "title": "Response"
        },
        {
            "location": "/crimson_api_docs/#word-cloud",
            "text": "",
            "title": "Word Cloud"
        },
        {
            "location": "/crimson_api_docs/#word-frequency-information-for-posts-in-a-monitor-category-visualizations",
            "text": "",
            "title": "Word frequency information for posts in a monitor - Category: visualizations"
        },
        {
            "location": "/crimson_api_docs/#monitorwordcloud-get-post",
            "text": "",
            "title": "/monitor/wordcloud - GET || POST"
        },
        {
            "location": "/crimson_api_docs/#parameters_67",
            "text": "id  - The id of the monitor being requested  Type: long  Required = True    start  - Specifies inclusive start date in YYYY-MM-DD  Type: Date  Required = True    end  - Specifies exclusive end date in YYYY-MM-DD  Type: Date  Required = True    MISSING  - Optional JSON payload to filter response  Type: MonitorPostsFilter  Required = False    filter  - Pipe-separated list of field:value pairs used to filter results by given parameters  Type: String  Required = False",
            "title": "Parameters"
        },
        {
            "location": "/crimson_api_docs/#response_67",
            "text": "data  - Map of the top 300 terms appearing in a monitor to their frequency in that monitor  Type: Map  Restricted = False",
            "title": "Response"
        }
    ]
}