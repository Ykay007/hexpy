{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python Client for the Crimson Hexagon API \u00b6 hexpy is a simple python package for working with the Crimson Hexagon API Why use this client? \u00b6 Easily and securely manage account authentication. Automatically abide by Crimson Hexagon's rate limits. Automatically convert python data to/from JSON strings. Automatically check requests success. Make it easy to do common tasks like exporting and uploading content. Easily create shell scripts to work with API data. Requirements \u00b6 hexpy is compatible with Python 3.6 and higher Installation \u00b6 To install the most recent stable release run pip install hexpy . To install the latest version: $ git clone https://github.com/sullivancolin/hexpy.git $ pip install hexpy/ Project Homepage \u00b6 Visit hexpy for full Documenation Visit Github project page for full source code. Quick Start \u00b6 >>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . login ( username = \"user@email.com\" , password = \"crimson_login\" ) >>> monitor_results_client = MonitorAPI ( session ) >>> monitor_results_client . details ( monitor_id ) { 'categories' : [{ 'hidden' : False , 'id' : 6054759055 , 'name' : 'Basic Positive' , 'sortOrder' : 100 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759059 , 'name' : 'Basic Neutral' , 'sortOrder' : 101 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759051 , 'name' : 'Basic Negative' , 'sortOrder' : 102 , ... }","title":"Getting Started"},{"location":"#a-python-client-for-the-crimson-hexagon-api","text":"hexpy is a simple python package for working with the Crimson Hexagon API","title":"A Python Client for the Crimson Hexagon API"},{"location":"#why-use-this-client","text":"Easily and securely manage account authentication. Automatically abide by Crimson Hexagon's rate limits. Automatically convert python data to/from JSON strings. Automatically check requests success. Make it easy to do common tasks like exporting and uploading content. Easily create shell scripts to work with API data.","title":"Why use this client?"},{"location":"#requirements","text":"hexpy is compatible with Python 3.6 and higher","title":"Requirements"},{"location":"#installation","text":"To install the most recent stable release run pip install hexpy . To install the latest version: $ git clone https://github.com/sullivancolin/hexpy.git $ pip install hexpy/","title":"Installation"},{"location":"#project-homepage","text":"Visit hexpy for full Documenation Visit Github project page for full source code.","title":"Project Homepage"},{"location":"#quick-start","text":">>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . login ( username = \"user@email.com\" , password = \"crimson_login\" ) >>> monitor_results_client = MonitorAPI ( session ) >>> monitor_results_client . details ( monitor_id ) { 'categories' : [{ 'hidden' : False , 'id' : 6054759055 , 'name' : 'Basic Positive' , 'sortOrder' : 100 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759059 , 'name' : 'Basic Neutral' , 'sortOrder' : 101 , 'status' : 'red' , 'trainingDocs' : 0 }, { 'hidden' : False , 'id' : 6054759051 , 'name' : 'Basic Negative' , 'sortOrder' : 102 , ... }","title":"Quick Start"},{"location":"Activity/","text":"Activity API \u00b6 Class for working with Crimson Hexagon Activity Report API. Example Usage \u00b6 >>> from hexpy import HexpySession , ActivityAPI >>> session = HexpySession . load_auth_from_file () >>> activity_client = ActivityAPI ( session ) >>> activity_client . monitor_creation ( organization_id ) Methods \u00b6 monitor_creation \u00b6 monitor_creation ( organization_id : int ) -> JSONDict Get Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period. Arguments organiztion_id: Integer, the id of the organization being requested. social_sites \u00b6 social_sites ( organization_id : int ) -> JSONDict Get Social Site Report and associated usernames for Teams within an Organization. Arguments organiztion_id: Integer, the id of the organization being requested. user_activity \u00b6 user_activity ( organization_id : int ) -> JSONDict Get a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed. Arguments organiztion_id: Integer, the id of the organization being requested. user_invitations \u00b6 user_invitations ( organization_id : int ) -> JSONDict Get a list of users within an Organization and which Team(s) they were invited to. Arguments organiztion_id: Integer, the id of the organization being requested.","title":"Activty Reports"},{"location":"Activity/#activity-api","text":"Class for working with Crimson Hexagon Activity Report API.","title":"Activity API"},{"location":"Activity/#example-usage","text":">>> from hexpy import HexpySession , ActivityAPI >>> session = HexpySession . load_auth_from_file () >>> activity_client = ActivityAPI ( session ) >>> activity_client . monitor_creation ( organization_id )","title":"Example Usage"},{"location":"Activity/#methods","text":"","title":"Methods"},{"location":"Activity/#monitor_creation","text":"monitor_creation ( organization_id : int ) -> JSONDict Get Monitor Creation Report for all teams within an organization and how many monitors were created during a given time period.","title":"monitor_creation"},{"location":"Activity/#social_sites","text":"social_sites ( organization_id : int ) -> JSONDict Get Social Site Report and associated usernames for Teams within an Organization.","title":"social_sites"},{"location":"Activity/#user_activity","text":"user_activity ( organization_id : int ) -> JSONDict Get a list of users indicating when they last logged into the platform, the last monitor they created, and the last monitor they viewed.","title":"user_activity"},{"location":"Activity/#user_invitations","text":"user_invitations ( organization_id : int ) -> JSONDict Get a list of users within an Organization and which Team(s) they were invited to.","title":"user_invitations"},{"location":"Analysis/","text":"Analysis API \u00b6 Class for working with Crimson Hexagon Analysis API. Example Usage \u00b6 >>> from hexpy import HexpySession , AnalysisAPI >>> session = HexpySession . load_auth_from_file () >>> analysis_client = AnalysisAPI ( session ) >>> analysis_client . results ( request_id ) Methods \u00b6 analysis_request \u00b6 analysis_request ( data : Dict [ str , Any ]) -> JSONDict Submit a query task against 24 hours of social data. Arguments data: Dictionary, query and filter parameters results \u00b6 results ( request_id : int ) -> JSONDict Retrieve the status of the analysis request and the results. Arguments request_id: Integer, the identifier given for the analysis, generated via the Analysis Request endpoints image_analysis \u00b6 image_analysis ( url : str ) -> JSONDict Get object, scene, activity predictions for image from public url. Arguments url: String, the url of the image to analyze","title":"Analysis"},{"location":"Analysis/#analysis-api","text":"Class for working with Crimson Hexagon Analysis API.","title":"Analysis API"},{"location":"Analysis/#example-usage","text":">>> from hexpy import HexpySession , AnalysisAPI >>> session = HexpySession . load_auth_from_file () >>> analysis_client = AnalysisAPI ( session ) >>> analysis_client . results ( request_id )","title":"Example Usage"},{"location":"Analysis/#methods","text":"","title":"Methods"},{"location":"Analysis/#analysis_request","text":"analysis_request ( data : Dict [ str , Any ]) -> JSONDict Submit a query task against 24 hours of social data.","title":"analysis_request"},{"location":"Analysis/#results","text":"results ( request_id : int ) -> JSONDict Retrieve the status of the analysis request and the results.","title":"results"},{"location":"Analysis/#image_analysis","text":"image_analysis ( url : str ) -> JSONDict Get object, scene, activity predictions for image from public url.","title":"image_analysis"},{"location":"CLI/","text":"Hexpy Command Line Interface \u00b6 This project comes with a command line script, hexpy , for conveniently automating several common tasks Helpful Workflows \u00b6 Export sample of monitor posts to a spreadsheet. Easily upload a spreadsheet as custom content for analysis in ForSight. Quickly get multiple metrics from monitor results as JSON. Compose powerful shell scripts with pipe-able commands such as jq , and xargs . Usage \u00b6 $ hexpy Usage: hexpy [ OPTIONS ] COMMAND [ ARGS ] ... Command Line interface for working with Crimson Hexagon API. Options: --version Show the version and exit. --help Show this message and exit. Commands: api-documentation Get API documentation for all endpoints. export Export monitor posts as json or to a spreadsheet. login Get API token with username and password and save to... metadata Get Metadata for account team, monitors, and geography. results Get Monitor results for 1 or more metrics. stream-posts Stream posts in real time, stop after a maximum of 10K. train Upload spreadsheet file of training examples for ... upload Upload spreadsheet file as custom content. See how each hexpy command works by running hexpy COMMAND --help Examples \u00b6 Login to Crimson API with you credentials and save your token to ~/.hexpy/token.json . $ hexpy login --force Enter username: username@email.com Enter password: *********** Success! Saved token to ~/.hexpy/token.json Get Up-to-date API documentation as an html file $ hexpy api-documentation -o html Get list of all the user's teams using jq . $ hexpy metadata team_list \\ | jq -r '.teams[] | [.name, .id] | @tsv' \\ | column -t -s $'\\t' Get list of monitors for a user's team using jq . $ hexpy metadata monitor_list --team_id TEAM_ID \\ | jq -r '.monitors[] | [.id, .name] | @tsv' \\ | column -t -s $'\\t' Upload TSV file as my_custom_type with English as the language that has tab delimited columns. $ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator '\\t' Train a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories. $ hexpy train training_data.csv MONITOR_ID Get word cloud and volume information from the monitor in the specified date range. $ hexpy results MONITOR_ID volume word_cloud --date_range 2017 -01-01 2017 -02-01 Get monitor volume information for each day as a CSV using jq $ hexpy results MONITOR_ID volume \\ | jq -r '.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv' \"2017-01-04T00:00:00\" ,74 \"2017-01-05T00:00:00\" ,101 \"2017-01-06T00:00:00\" ,67 \"2017-01-07T00:00:00\" ,58 \"2017-01-08T00:00:00\" ,64 \"2017-01-09T00:00:00\" ,72 \"2017-01-10T00:00:00\" ,92 \"2017-01-11T00:00:00\" ,72 \"2017-01-12T00:00:00\" ,133 \"2017-01-13T00:00:00\" ,67 ... Export Monitor posts to excel file called my_export.xlsx $ hexpy export MONITOR_ID --output_type excel --filename my_export Export Monitor posts as json and redirect to my_export.json $ hexpy export MONITOR_ID --output_type json > my_export.json Export posts to excel for multiple monitors in parallel from a file containing a list of monitor ids $ cat monitor_ids.txt | xargs -n 1 -P 4 hexpy export -o excel Stream 1K real-time posts to json in the terminal $ hexpy stream-posts STREAM_ID --max_docs 1000 --output_type json Stream up to 10K real-time posts to a csv file with tab delimiter $ hexpy stream-posts STREAM_ID --output_type csv --max_docs 10000 --separator '\\t' \\ | pv -s 10000 -l > streamed_posts.csv","title":"Command Line Interface"},{"location":"CLI/#hexpy-command-line-interface","text":"This project comes with a command line script, hexpy , for conveniently automating several common tasks","title":"Hexpy Command Line Interface"},{"location":"CLI/#helpful-workflows","text":"Export sample of monitor posts to a spreadsheet. Easily upload a spreadsheet as custom content for analysis in ForSight. Quickly get multiple metrics from monitor results as JSON. Compose powerful shell scripts with pipe-able commands such as jq , and xargs .","title":"Helpful Workflows"},{"location":"CLI/#usage","text":"$ hexpy Usage: hexpy [ OPTIONS ] COMMAND [ ARGS ] ... Command Line interface for working with Crimson Hexagon API. Options: --version Show the version and exit. --help Show this message and exit. Commands: api-documentation Get API documentation for all endpoints. export Export monitor posts as json or to a spreadsheet. login Get API token with username and password and save to... metadata Get Metadata for account team, monitors, and geography. results Get Monitor results for 1 or more metrics. stream-posts Stream posts in real time, stop after a maximum of 10K. train Upload spreadsheet file of training examples for ... upload Upload spreadsheet file as custom content. See how each hexpy command works by running hexpy COMMAND --help","title":"Usage"},{"location":"CLI/#examples","text":"Login to Crimson API with you credentials and save your token to ~/.hexpy/token.json . $ hexpy login --force Enter username: username@email.com Enter password: *********** Success! Saved token to ~/.hexpy/token.json Get Up-to-date API documentation as an html file $ hexpy api-documentation -o html Get list of all the user's teams using jq . $ hexpy metadata team_list \\ | jq -r '.teams[] | [.name, .id] | @tsv' \\ | column -t -s $'\\t' Get list of monitors for a user's team using jq . $ hexpy metadata monitor_list --team_id TEAM_ID \\ | jq -r '.monitors[] | [.id, .name] | @tsv' \\ | column -t -s $'\\t' Upload TSV file as my_custom_type with English as the language that has tab delimited columns. $ hexpy upload spredsheet.csv --content_type my_custom_type --language en --separator '\\t' Train a Opinion Monitor with using a spreadsheet of posts with labels for the predefined categories. $ hexpy train training_data.csv MONITOR_ID Get word cloud and volume information from the monitor in the specified date range. $ hexpy results MONITOR_ID volume word_cloud --date_range 2017 -01-01 2017 -02-01 Get monitor volume information for each day as a CSV using jq $ hexpy results MONITOR_ID volume \\ | jq -r '.results.volume.volume[] | [.startDate, .numberOfDocuments] | @csv' \"2017-01-04T00:00:00\" ,74 \"2017-01-05T00:00:00\" ,101 \"2017-01-06T00:00:00\" ,67 \"2017-01-07T00:00:00\" ,58 \"2017-01-08T00:00:00\" ,64 \"2017-01-09T00:00:00\" ,72 \"2017-01-10T00:00:00\" ,92 \"2017-01-11T00:00:00\" ,72 \"2017-01-12T00:00:00\" ,133 \"2017-01-13T00:00:00\" ,67 ... Export Monitor posts to excel file called my_export.xlsx $ hexpy export MONITOR_ID --output_type excel --filename my_export Export Monitor posts as json and redirect to my_export.json $ hexpy export MONITOR_ID --output_type json > my_export.json Export posts to excel for multiple monitors in parallel from a file containing a list of monitor ids $ cat monitor_ids.txt | xargs -n 1 -P 4 hexpy export -o excel Stream 1K real-time posts to json in the terminal $ hexpy stream-posts STREAM_ID --max_docs 1000 --output_type json Stream up to 10K real-time posts to a csv file with tab delimiter $ hexpy stream-posts STREAM_ID --output_type csv --max_docs 10000 --separator '\\t' \\ | pv -s 10000 -l > streamed_posts.csv","title":"Examples"},{"location":"Custom/","text":"Custom API \u00b6 Class for creating a custom API Example usage \u00b6 >>> from hexpy import HexpySession , CustomAPI >>> session = HexpySession . load_auth_from_file () >>> custom_client = CustomAPI ( session , \"/some/endpoint/\" ) >>> custom_client . get ( url_params = \"<url_param1>/path\" , params = { \"query_string_param\" : some_value }) Methods \u00b6 get \u00b6 get ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> JSONDict Send get request using URL parameters and query-string parameters. Arguments: url_params: String, url params and endpoints concatenated. params: Dict, querystring params. post \u00b6 post ( url_params : str = \"\" , params : Dict [ str , Any ] = None , data : Dict [ str , Any ] = None , ) -> JSONDict Send post request using URL parameters and query-string parameters, and json data. Arguments url_params: String, url params and endpoints concatenated. params: Dict, querystring params. data: Dict, json data to post. delete \u00b6 delete ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> JSONDict Send delete request using URL parameters and query-string parameters. Arguments url_params: String, url params and endpoints concatenated. params: Dict, querystring params.","title":"Custom"},{"location":"Custom/#custom-api","text":"Class for creating a custom API","title":"Custom API"},{"location":"Custom/#example-usage","text":">>> from hexpy import HexpySession , CustomAPI >>> session = HexpySession . load_auth_from_file () >>> custom_client = CustomAPI ( session , \"/some/endpoint/\" ) >>> custom_client . get ( url_params = \"<url_param1>/path\" , params = { \"query_string_param\" : some_value })","title":"Example usage"},{"location":"Custom/#methods","text":"","title":"Methods"},{"location":"Custom/#get","text":"get ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> JSONDict Send get request using URL parameters and query-string parameters.","title":"get"},{"location":"Custom/#post","text":"post ( url_params : str = \"\" , params : Dict [ str , Any ] = None , data : Dict [ str , Any ] = None , ) -> JSONDict Send post request using URL parameters and query-string parameters, and json data.","title":"post"},{"location":"Custom/#delete","text":"delete ( url_params : str = \"\" , params : Dict [ str , Any ] = None ) -> JSONDict Send delete request using URL parameters and query-string parameters.","title":"delete"},{"location":"Data_Validation/","text":"Data Validation \u00b6 Pydantic Style Classes for validating data for Custom Content Upload and BrightView Training UploadItem \u00b6 Validation model for an item of custom content to be uploaded. Checks for required fields, with valid types and formatting. Fields \u00b6 type: String, Custom Content Type Name title: String, Document Title url: Url, Unique Document Url author: String, Document Author language: String, 2 letter langauge code date: String, Date or Datetime contents: String, Document Body geolocation: Optional Mapping Identifier Example Usage \u00b6 >>> from hexpy.models import UploadItem >>> item_dict = { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } >>> upload_item = UploadItem ( ** item_dict ) UploadCollection \u00b6 Validation model for collection of items to be uploaded. Checks for duplicate upload items, easily convert to/from dataframe Fields \u00b6 items: List of UploadItems or valid dictionaries Example Usage \u00b6 >>> from hexpy.models import UploadItem , UploadCollection >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } ] >>> upload_collection = UploadCollection ( items = items ) Methods \u00b6 from_dataframe \u00b6 from_dataframe ( df : pd . DataFrame ) -> UploadCollection Create UploadCollection from pandas DataFrame containing necessary fields. Arguments: df: pd.DataFrame to_dataframe \u00b6 python to_dataframe() -> pd.DataFrame Convert UploadCollection to pandas Dataframe with one colume for each field. TrainItem \u00b6 Validation model for training post to be uploaded. Checks for required fields, with valid types and formatting. Fields \u00b6 type: String, Custom Content Type Name title: String, Document Title url: Url, Unique Document Url author: String, Document Author language: String, 2 letter langauge code date: String, Date or Datetime contents: String, Document Body categoryid: Integer of Category defined in Monitor Example Usage \u00b6 >>> from hexpy.models import TrainItem >>> item_dict = { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"categoryid\" : 9107252649 , } >>> train_item = TrainItem ( ** item ) TrainCollection \u00b6 Validation model for collections of training posts to be uploaded. Checks for duplicate training posts, easily convert to/from dataframe Fields \u00b6 items: List of TrainItems or valid dictionaries Example Usage \u00b6 >>> from hexpy.models import TrainItem , TrainCollection >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"categoryid\" : 9107252649 , } ] >>> train_collection = TrainCollection ( items = items ]) Methods \u00b6 from_dataframe \u00b6 from_dataframe ( df : pd . DataFrame ) -> TrainCollection Create TrainCollection from pandas DataFrame containing necessary fields. Arguments: df: pd.DataFrame to_dataframe \u00b6 python to_dataframe() -> pd.DataFrame Convert TrainCollection to pandas Dataframe with one colume for each field.","title":"Data Validation"},{"location":"Data_Validation/#data-validation","text":"Pydantic Style Classes for validating data for Custom Content Upload and BrightView Training","title":"Data Validation"},{"location":"Data_Validation/#uploaditem","text":"Validation model for an item of custom content to be uploaded. Checks for required fields, with valid types and formatting.","title":"UploadItem"},{"location":"Data_Validation/#fields","text":"type: String, Custom Content Type Name title: String, Document Title url: Url, Unique Document Url author: String, Document Author language: String, 2 letter langauge code date: String, Date or Datetime contents: String, Document Body geolocation: Optional Mapping Identifier","title":"Fields"},{"location":"Data_Validation/#example-usage","text":">>> from hexpy.models import UploadItem >>> item_dict = { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } >>> upload_item = UploadItem ( ** item_dict )","title":"Example Usage"},{"location":"Data_Validation/#uploadcollection","text":"Validation model for collection of items to be uploaded. Checks for duplicate upload items, easily convert to/from dataframe","title":"UploadCollection"},{"location":"Data_Validation/#fields_1","text":"items: List of UploadItems or valid dictionaries","title":"Fields"},{"location":"Data_Validation/#example-usage_1","text":">>> from hexpy.models import UploadItem , UploadCollection >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } ] >>> upload_collection = UploadCollection ( items = items )","title":"Example Usage"},{"location":"Data_Validation/#methods","text":"","title":"Methods"},{"location":"Data_Validation/#from_dataframe","text":"from_dataframe ( df : pd . DataFrame ) -> UploadCollection Create UploadCollection from pandas DataFrame containing necessary fields.","title":"from_dataframe"},{"location":"Data_Validation/#to_dataframe","text":"python to_dataframe() -> pd.DataFrame Convert UploadCollection to pandas Dataframe with one colume for each field.","title":"to_dataframe"},{"location":"Data_Validation/#trainitem","text":"Validation model for training post to be uploaded. Checks for required fields, with valid types and formatting.","title":"TrainItem"},{"location":"Data_Validation/#fields_2","text":"type: String, Custom Content Type Name title: String, Document Title url: Url, Unique Document Url author: String, Document Author language: String, 2 letter langauge code date: String, Date or Datetime contents: String, Document Body categoryid: Integer of Category defined in Monitor","title":"Fields"},{"location":"Data_Validation/#example-usage_2","text":">>> from hexpy.models import TrainItem >>> item_dict = { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"categoryid\" : 9107252649 , } >>> train_item = TrainItem ( ** item )","title":"Example Usage"},{"location":"Data_Validation/#traincollection","text":"Validation model for collections of training posts to be uploaded. Checks for duplicate training posts, easily convert to/from dataframe","title":"TrainCollection"},{"location":"Data_Validation/#fields_3","text":"items: List of TrainItems or valid dictionaries","title":"Fields"},{"location":"Data_Validation/#example-usage_3","text":">>> from hexpy.models import TrainItem , TrainCollection >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"categoryid\" : 9107252649 , } ] >>> train_collection = TrainCollection ( items = items ])","title":"Example Usage"},{"location":"Data_Validation/#methods_1","text":"","title":"Methods"},{"location":"Data_Validation/#from_dataframe_1","text":"from_dataframe ( df : pd . DataFrame ) -> TrainCollection Create TrainCollection from pandas DataFrame containing necessary fields.","title":"from_dataframe"},{"location":"Data_Validation/#to_dataframe_1","text":"python to_dataframe() -> pd.DataFrame Convert TrainCollection to pandas Dataframe with one colume for each field.","title":"to_dataframe"},{"location":"Metadata/","text":"Metadata API \u00b6 Class for working with Crimson Hexagon account and analysis metadata. Example usage \u00b6 >>> from hexpy import HexpySession , MetadataAPI >>> session = HexpySession . load_auth_from_file () >>> metadata_client = MetadataAPI ( session ) >>> metadata_client . team_list () Methods \u00b6 team_list \u00b6 team_list () -> JSONDict Return a list of teams accessible to the requesting user. monitor_list \u00b6 monitor_list ( team_id : int ) -> JSONDict Returns a list of monitors accessible to the user team along with metadata related to those monitors. Arguments team_id: integer id number for a team geography \u00b6 geography () -> JSONDict Return all the geographical locations that you may use to filter monitor results and to upload documents with location information. states \u00b6 states ( country : str ) -> JSONDict Return all the states for a given country that you may use to filter monitor results and to upload documents with location information. Arguments country: country code to filter states cities \u00b6 cities ( country : str ) -> JSONDict Returns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information. Arguments country: country: country code to filter states countries \u00b6 countries () -> JSONDict Returns all the countries that you may use to filter monitor results and to upload documents with location information. image_classes \u00b6 image_classes () -> JSONDict Return list of all class IDs and names. api_documentation \u00b6 api_documentation () -> JSONDict Return latest JSON version of Crimson Hexagon API endpoint documentation.","title":"Metadata"},{"location":"Metadata/#metadata-api","text":"Class for working with Crimson Hexagon account and analysis metadata.","title":"Metadata API"},{"location":"Metadata/#example-usage","text":">>> from hexpy import HexpySession , MetadataAPI >>> session = HexpySession . load_auth_from_file () >>> metadata_client = MetadataAPI ( session ) >>> metadata_client . team_list ()","title":"Example usage"},{"location":"Metadata/#methods","text":"","title":"Methods"},{"location":"Metadata/#team_list","text":"team_list () -> JSONDict Return a list of teams accessible to the requesting user.","title":"team_list"},{"location":"Metadata/#monitor_list","text":"monitor_list ( team_id : int ) -> JSONDict Returns a list of monitors accessible to the user team along with metadata related to those monitors.","title":"monitor_list"},{"location":"Metadata/#geography","text":"geography () -> JSONDict Return all the geographical locations that you may use to filter monitor results and to upload documents with location information.","title":"geography"},{"location":"Metadata/#states","text":"states ( country : str ) -> JSONDict Return all the states for a given country that you may use to filter monitor results and to upload documents with location information.","title":"states"},{"location":"Metadata/#cities","text":"cities ( country : str ) -> JSONDict Returns all the cities or urban areas defined in the given country that you may use to filter monitor results and to upload documents with location information.","title":"cities"},{"location":"Metadata/#countries","text":"countries () -> JSONDict Returns all the countries that you may use to filter monitor results and to upload documents with location information.","title":"countries"},{"location":"Metadata/#image_classes","text":"image_classes () -> JSONDict Return list of all class IDs and names.","title":"image_classes"},{"location":"Metadata/#api_documentation","text":"api_documentation () -> JSONDict Return latest JSON version of Crimson Hexagon API endpoint documentation.","title":"api_documentation"},{"location":"Monitor/","text":"Monitor API \u00b6 Class for working with Crimson Hexagon Monitor API. Example usage \u00b6 >>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . load_auth_from_file () >>> monitor_client = MonitorAPI ( session ) >>> details = monitor_client . details ( monitor_id ) >>> start = details [ \"resultsStart\" ] >>> end = details [ \"resultsEnd\" ] >>> monitor_client . posts ( monitor_id , start , end ) Methods \u00b6 details \u00b6 details ( monitor_id : int ) -> JSONDict Return detailed metadata about the selected monitor, including category metadata. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested audit \u00b6 audit ( monitor_id : int ) -> JSONDict Return audit information about the selected monitor, sorted from most to least recent. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested word_cloud \u00b6 word_cloud ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> JSONDict Return an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts training_posts \u00b6 training_posts ( monitor_id : int , category : int = None ) -> JSONDict Return a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested category: Integer, category id to target training posts from a specific category train_monitor \u00b6 train_monitor ( monitor_id : int , category_id : int , items : TrainCollection ) -> JSONDict Upload training documents to monitor programmatically. Upload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested category_id: Integer, the category this content should belong to items: validated instance of TrainCollection model interest_affinities \u00b6 interest_affinities ( monitor_id : int , start : str , end : str , daily : bool = False , document_source : str = None ) -> JSONDict Return information about the authors in a monitor and their affinity with a range of pre-defined topics. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD daily: Boolean, if true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range document_source: String, document source for affinities. valid params include TWITTER or TUMBLR topics \u00b6 topics ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> JSONDict : Return the XML data that can be used to generate clustering visualizations using third-party software. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts topic_waves \u00b6 topic_waves ( monitor_id : int , start : str , end : str ) -> JSONDict Return the Topic waves information for a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts top_sources \u00b6 top_sources ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD image_results \u00b6 image_results ( monitor_id : int , start : str , end : str , object_type : str = \"\" , top : int = 100 ) -> JSONDict Return a breakdown of the top image classes within a provided monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD object_type: String, specifies type of image classes, valid values [object, scene, action, logo] top : Integer, if defined, only the selected number of classes will be returned volume \u00b6 volume ( monitor_id : int , start : str , end : str , group_by : str = \"DAILY\" ) -> JSONDict Return volume of total posts in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD group_by: String, specifies how the volume data over the date range will be grouped. [HOURLY, DAILY, WEEKLY, MONTHLY] dayandtime \u00b6 dayandtime ( monitor_id : int , start : str , end : str , aggregate_by_day : bool = False , use_local_time : bool = False ) -> JSONDict Return volume metrics for a given monitor split by date. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD aggregate_by_day: Boolean, if True, volume information will be aggregated by day of the week instead of time of day use_local_time: if True, volume aggregation will use the time local to the publishing author of a post, instead of converting that time to the timezone of the selected monitor sentiment_and_categories \u00b6 sentiment_and_categories ( monitor_id : int , start : str , end : str , hide_excluded : bool = False ) -> JSONDict Return aggregate volume, sentiment, emotion and opinion category analysis for a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD hide_excluded: Boolean, if True, categories set as hidden will not be included in category proportion calculations. aggregate \u00b6 aggregate ( monitor_ids : MonitorOrMonitors , dates : DateOrDates , metrics : MetricOrMetrics ) -> Sequence [ JSONDict ] Return aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics. Valid metrics 'volume' 'word_cloud' 'top_sources' 'interest_affinities' 'sentiment_and_categories' Arguments monitor_ids: Integer or list of Integers, id(s) of the monitor(s) being requested dates: Tuple of Strings or list of Tuples, pair(s) of 'YYYY-MM-DD' date strings metrics: String or list of Strings, metric(s) to aggregate upon posts \u00b6 posts ( monitor_id : int , start : str , end : str , filter_string : str = None , extend_limit : bool = False , full_contents : bool = False , geotagged : bool = False ) -> JSONDict Return post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD filter_string: String, pipe-separated list of field:value pairs used to filter posts extend_limit: Boolean if True increase limit of returned posts from 500 per call to 10000 per call full_contents: Boolean, if True, the contents field will return the original, complete posts contents instead of truncating around search terms geotagged: Boolean, if True, returns only geotagged documents matching the given filter Demographics \u00b6 This collection of endpoints provide demographic volume metrics for users within a given monitor. age \u00b6 age ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by age bracket. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD ethnicity \u00b6 ethnicity ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by ethnicity. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD gender \u00b6 gender ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by gender. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Geography \u00b6 cities \u00b6 cities ( monitor_id : int , start : str , end : str , country : str ) -> JSONDict Return volume metrics for a given monitor split by city. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter cities states \u00b6 states ( monitor_id : int , start : str , end : str , country : str ) -> JSONDict Return volume metrics for a given monitor split by state. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD country: String, country code to filter states countries \u00b6 countries ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by country. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Twitter \u00b6 This collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors. twitter_authors \u00b6 twitter_authors ( monitor_id : int , start : str , end : str ) -> JSONDict Return information related to the Twitter authors who have posted in a given monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_metrics \u00b6 twitter_metrics ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about the top hashtags, mentions, and retweets in a monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_followers \u00b6 twitter_followers ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_sent_posts \u00b6 twitter_sent_posts ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD twitter_engagement \u00b6 twitter_engagement ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about retweets, replies, and @mentions for a Twitter Social Account monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Facebook \u00b6 facebook_admin_posts \u00b6 facebook_admin_posts ( monitor_id : int , start : str , end : str ) -> JSONDict Return those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD facebook_likes \u00b6 facebook_likes ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD facebook_activity \u00b6 facebook_activity ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about actions (likes, comments, shares) made by users and admins for a given page. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD Instagram \u00b6 instagram_top_hashtags \u00b6 instagram_top_hashtags ( monitor_id : int , start : str , end : str ) -> JSONDict Return the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight). Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_followers \u00b6 instagram_followers ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_sent_media \u00b6 instagram_sent_media ( monitor_id : int , start : str , end : str ) -> JSONDict Return media sent by admins in a targeted Instagram account. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD instagram_activity \u00b6 instagram_activity ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about actions (likes, comments) made by users and admins for a given account. Arguments monitor_id: Integer, id of the monitor or monitor filter being requested start: String, inclusive start date in YYYY-MM-DD end: String, exclusive end date in YYYY-MM-DD","title":"Monitor"},{"location":"Monitor/#monitor-api","text":"Class for working with Crimson Hexagon Monitor API.","title":"Monitor API"},{"location":"Monitor/#example-usage","text":">>> from hexpy import HexpySession , MonitorAPI >>> session = HexpySession . load_auth_from_file () >>> monitor_client = MonitorAPI ( session ) >>> details = monitor_client . details ( monitor_id ) >>> start = details [ \"resultsStart\" ] >>> end = details [ \"resultsEnd\" ] >>> monitor_client . posts ( monitor_id , start , end )","title":"Example usage"},{"location":"Monitor/#methods","text":"","title":"Methods"},{"location":"Monitor/#details","text":"details ( monitor_id : int ) -> JSONDict Return detailed metadata about the selected monitor, including category metadata.","title":"details"},{"location":"Monitor/#audit","text":"audit ( monitor_id : int ) -> JSONDict Return audit information about the selected monitor, sorted from most to least recent.","title":"audit"},{"location":"Monitor/#word_cloud","text":"word_cloud ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> JSONDict Return an alphabetized list of the top 300 words in a monitor. This data is generated using documents randomly selected from the pool defined by the submitted parameters.","title":"word_cloud"},{"location":"Monitor/#training_posts","text":"training_posts ( monitor_id : int , category : int = None ) -> JSONDict Return a list of the training posts for a given opinion monitor. The selected monitor must be an opinion monitor; requests for other monitor types will return an error. By default, all training posts for all categories in a monitor will be returned, however you may pass a category ID in your request to get training posts from a specific category.","title":"training_posts"},{"location":"Monitor/#train_monitor","text":"train_monitor ( monitor_id : int , category_id : int , items : TrainCollection ) -> JSONDict Upload training documents to monitor programmatically. Upload a list documents of one category per request. Due to the restrictions involved in using this endpoint, unless you have a specific need to train monitors programmatically, training monitors via the user interface in ForSight will normally be the more efficient training option.","title":"train_monitor"},{"location":"Monitor/#interest_affinities","text":"interest_affinities ( monitor_id : int , start : str , end : str , daily : bool = False , document_source : str = None ) -> JSONDict Return information about the authors in a monitor and their affinity with a range of pre-defined topics.","title":"interest_affinities"},{"location":"Monitor/#topics","text":"topics ( monitor_id : int , start : str , end : str , filter_string : str = None ) -> JSONDict : Return the XML data that can be used to generate clustering visualizations using third-party software.","title":"topics"},{"location":"Monitor/#topic_waves","text":"topic_waves ( monitor_id : int , start : str , end : str ) -> JSONDict Return the Topic waves information for a monitor.","title":"topic_waves"},{"location":"Monitor/#top_sources","text":"top_sources ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume information related to the sites and content sources (e.g. Twitter, Forums, Blogs, etc.) in a monitor.","title":"top_sources"},{"location":"Monitor/#image_results","text":"image_results ( monitor_id : int , start : str , end : str , object_type : str = \"\" , top : int = 100 ) -> JSONDict Return a breakdown of the top image classes within a provided monitor.","title":"image_results"},{"location":"Monitor/#volume","text":"volume ( monitor_id : int , start : str , end : str , group_by : str = \"DAILY\" ) -> JSONDict Return volume of total posts in a monitor.","title":"volume"},{"location":"Monitor/#dayandtime","text":"dayandtime ( monitor_id : int , start : str , end : str , aggregate_by_day : bool = False , use_local_time : bool = False ) -> JSONDict Return volume metrics for a given monitor split by date.","title":"dayandtime"},{"location":"Monitor/#sentiment_and_categories","text":"sentiment_and_categories ( monitor_id : int , start : str , end : str , hide_excluded : bool = False ) -> JSONDict Return aggregate volume, sentiment, emotion and opinion category analysis for a given monitor.","title":"sentiment_and_categories"},{"location":"Monitor/#aggregate","text":"aggregate ( monitor_ids : MonitorOrMonitors , dates : DateOrDates , metrics : MetricOrMetrics ) -> Sequence [ JSONDict ] Return aggregated results for one or monitor ids, for one or more date pairs, for one or more metrics.","title":"aggregate"},{"location":"Monitor/#posts","text":"posts ( monitor_id : int , start : str , end : str , filter_string : str = None , extend_limit : bool = False , full_contents : bool = False , geotagged : bool = False ) -> JSONDict Return post-level information (where available) and associated analysis (sentiment, emotion) for a given monitor.","title":"posts"},{"location":"Monitor/#demographics","text":"This collection of endpoints provide demographic volume metrics for users within a given monitor.","title":"Demographics"},{"location":"Monitor/#age","text":"age ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by age bracket.","title":"age"},{"location":"Monitor/#ethnicity","text":"ethnicity ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by ethnicity.","title":"ethnicity"},{"location":"Monitor/#gender","text":"gender ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by gender.","title":"gender"},{"location":"Monitor/#geography","text":"","title":"Geography"},{"location":"Monitor/#cities","text":"cities ( monitor_id : int , start : str , end : str , country : str ) -> JSONDict Return volume metrics for a given monitor split by city.","title":"cities"},{"location":"Monitor/#states","text":"states ( monitor_id : int , start : str , end : str , country : str ) -> JSONDict Return volume metrics for a given monitor split by state.","title":"states"},{"location":"Monitor/#countries","text":"countries ( monitor_id : int , start : str , end : str ) -> JSONDict Return volume metrics for a given monitor split by country.","title":"countries"},{"location":"Monitor/#twitter","text":"This collection of endpoints relate provide metrics specific to Twitter from either Social Account or Buzz monitors.","title":"Twitter"},{"location":"Monitor/#twitter_authors","text":"twitter_authors ( monitor_id : int , start : str , end : str ) -> JSONDict Return information related to the Twitter authors who have posted in a given monitor.","title":"twitter_authors"},{"location":"Monitor/#twitter_metrics","text":"twitter_metrics ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about the top hashtags, mentions, and retweets in a monitor.","title":"twitter_metrics"},{"location":"Monitor/#twitter_followers","text":"twitter_followers ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily follower count for a targeted Twitter account in a Twitter Social Account Monitor as of the selected dates.","title":"twitter_followers"},{"location":"Monitor/#twitter_sent_posts","text":"twitter_sent_posts ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about posts sent by the owner of a target Twitter account in a Twitter Social Account Monitor.","title":"twitter_sent_posts"},{"location":"Monitor/#twitter_engagement","text":"twitter_engagement ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about retweets, replies, and @mentions for a Twitter Social Account monitor.","title":"twitter_engagement"},{"location":"Monitor/#facebook","text":"","title":"Facebook"},{"location":"Monitor/#facebook_admin_posts","text":"facebook_admin_posts ( monitor_id : int , start : str , end : str ) -> JSONDict Return those posts made by the administrators/owners of a targeted Facebook page in a Facebook Social Account Monitor.","title":"facebook_admin_posts"},{"location":"Monitor/#facebook_likes","text":"facebook_likes ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily like count for a targeted Facebook page in a Facebook Social Account Monitor as of the selected dates.","title":"facebook_likes"},{"location":"Monitor/#facebook_activity","text":"facebook_activity ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about actions (likes, comments, shares) made by users and admins for a given page.","title":"facebook_activity"},{"location":"Monitor/#instagram","text":"","title":"Instagram"},{"location":"Monitor/#instagram_top_hashtags","text":"instagram_top_hashtags ( monitor_id : int , start : str , end : str ) -> JSONDict Return the Top 50 most occurring Hashtags contained within the posts analyzed in a monitor, plus all explicitly targeted hashtags in a monitor's query, for which Metrics are being collected (i.e. for which the hashtags are being tracked explicitly in ForSight).","title":"instagram_top_hashtags"},{"location":"Monitor/#instagram_followers","text":"instagram_followers ( monitor_id : int , start : str , end : str ) -> JSONDict Return the cumulative daily follower count for a targeted Instagram account in an Instagram Social Account Monitor as of the selected dates.","title":"instagram_followers"},{"location":"Monitor/#instagram_sent_media","text":"instagram_sent_media ( monitor_id : int , start : str , end : str ) -> JSONDict Return media sent by admins in a targeted Instagram account.","title":"instagram_sent_media"},{"location":"Monitor/#instagram_activity","text":"instagram_activity ( monitor_id : int , start : str , end : str ) -> JSONDict Return information about actions (likes, comments) made by users and admins for a given account.","title":"instagram_activity"},{"location":"Realtime/","text":"Realtime API \u00b6 Class for working with Realtime Results API. Example usage \u00b6 >>> from hexpy import HexpySession , RealtimeAPI >>> session = HexpySession . load_auth_from_file () >>> realtime_client = RealtimeAPI ( session ) >>> realtime_client . list ( team_id ) >>> session . close () Methods \u00b6 list \u00b6 list ( team_id : int ) -> JSONDict Get the Monitors which are in Proteus Arguments team_id: Integer, The id of the team to which the listed monitors belong. configure \u00b6 configure ( monitor_id : int ) -> JSONDict Configure the Realtime evaluators for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. enable \u00b6 enable ( monitor_id : int ) -> JSONDict Enable Realtime Data. Arguments monitor_id: Integer, the id of the monitor being requested. disbale \u00b6 disbale ( monitor_id : int ) -> JSONDict Disable Realtime Data. Arguments monitor_id: Integer, the id of the monitor being requested. detail \u00b6 detail ( monitor_id : int ) -> JSONDict Get the Realtime evaluators details for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. cashtags \u00b6 cashtags ( monitor_id : int , start : int = None , top : int = None ) -> JSONDict Get Cashtags associated to a Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N cashtags to retrieve. hashtags \u00b6 hashtags ( monitor_id : int , start : int = None , top : int = None ) -> JSONDict Get Hashtags associated to a Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. top: Integer, The top N hashtags to retrieve. retweets \u00b6 retweets ( monitor_id : int ) -> JSONDict Get the Realtime retweets for the Monitor. full_retweets \u00b6 full_retweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime fullretweets for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. Arguments monitor_id: Integer, the id of the monitor being requested. social_guids \u00b6 social_guids ( monitor_id : int , doc_type : str , start : int = None , received_after : int = None ) -> JSONDict Get the Realtime social guids for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. doct_type: String, Specifies the document type. start: Integer, specifies inclusive start date in epoch seconds. received_after: Integer, Specifies inclusive received after date in epoch seconds. maxresults: Integer, Specifies maximum results to fetch. tweets \u00b6 tweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime tweets for the Monitor. full_tweets \u00b6 full_tweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime fulltweets for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. volume \u00b6 volume ( monitor_id : int , start : int = None , doc_type : List = None ) -> JSONDict Get the Realtime volume for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: List, specifies the document type to filter. volume_by_sentiment \u00b6 volume_by_sentiment ( monitor_id : int , start : int , doc_type : str ) -> JSONDict Get the Realtime volume by sentiment for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter. volume_by_emotion \u00b6 volume_by_emotion ( monitor_id : int , start : int , doc_type : str ) -> JSONDict Get the Realtime volume by emotion for the Monitor. Arguments monitor_id: Integer, the id of the monitor being requested. start: Integer, specifies inclusive start date in epoch seconds. doc_type: String, specifies the document type to filter.","title":"Realtime"},{"location":"Realtime/#realtime-api","text":"Class for working with Realtime Results API.","title":"Realtime API"},{"location":"Realtime/#example-usage","text":">>> from hexpy import HexpySession , RealtimeAPI >>> session = HexpySession . load_auth_from_file () >>> realtime_client = RealtimeAPI ( session ) >>> realtime_client . list ( team_id ) >>> session . close ()","title":"Example usage"},{"location":"Realtime/#methods","text":"","title":"Methods"},{"location":"Realtime/#list","text":"list ( team_id : int ) -> JSONDict Get the Monitors which are in Proteus","title":"list"},{"location":"Realtime/#configure","text":"configure ( monitor_id : int ) -> JSONDict Configure the Realtime evaluators for the Monitor.","title":"configure"},{"location":"Realtime/#enable","text":"enable ( monitor_id : int ) -> JSONDict Enable Realtime Data.","title":"enable"},{"location":"Realtime/#disbale","text":"disbale ( monitor_id : int ) -> JSONDict Disable Realtime Data.","title":"disbale"},{"location":"Realtime/#detail","text":"detail ( monitor_id : int ) -> JSONDict Get the Realtime evaluators details for the Monitor.","title":"detail"},{"location":"Realtime/#cashtags","text":"cashtags ( monitor_id : int , start : int = None , top : int = None ) -> JSONDict Get Cashtags associated to a Monitor.","title":"cashtags"},{"location":"Realtime/#hashtags","text":"hashtags ( monitor_id : int , start : int = None , top : int = None ) -> JSONDict Get Hashtags associated to a Monitor.","title":"hashtags"},{"location":"Realtime/#retweets","text":"retweets ( monitor_id : int ) -> JSONDict Get the Realtime retweets for the Monitor.","title":"retweets"},{"location":"Realtime/#full_retweets","text":"full_retweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime fullretweets for the Monitor.","title":"full_retweets"},{"location":"Realtime/#social_guids","text":"social_guids ( monitor_id : int , doc_type : str , start : int = None , received_after : int = None ) -> JSONDict Get the Realtime social guids for the Monitor.","title":"social_guids"},{"location":"Realtime/#tweets","text":"tweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime tweets for the Monitor.","title":"tweets"},{"location":"Realtime/#full_tweets","text":"full_tweets ( monitor_id : int , start : int = None ) -> JSONDict Get the Realtime fulltweets for the Monitor.","title":"full_tweets"},{"location":"Realtime/#volume","text":"volume ( monitor_id : int , start : int = None , doc_type : List = None ) -> JSONDict Get the Realtime volume for the Monitor.","title":"volume"},{"location":"Realtime/#volume_by_sentiment","text":"volume_by_sentiment ( monitor_id : int , start : int , doc_type : str ) -> JSONDict Get the Realtime volume by sentiment for the Monitor.","title":"volume_by_sentiment"},{"location":"Realtime/#volume_by_emotion","text":"volume_by_emotion ( monitor_id : int , start : int , doc_type : str ) -> JSONDict Get the Realtime volume by emotion for the Monitor.","title":"volume_by_emotion"},{"location":"Session/","text":"Session \u00b6 Creating a session and generating a token for API requests. Login using username. Optionally include password, or enter it at the prompt. >>> from hexpy import HexpySession >>> session = HexpySession . login ( username = \"username@gmail.com\" , password = \"secretpassword\" ) >>> session . save_token () # saving token to ~/.hexpy/token.json or >>> session = HexpySession . login ( username = \"username@email.com\" ) Enter password : ********* >>> session . save_token () or instantiate a session using a saved token >>> session = HexpySession ( token = \"previously_saved_token\" ) Create instance by loading token from file. Default is ~/.hexpy/token.json >>> session = HexpySession . load_auth_from_file () Create instance with context manager to close TCP session automatically when finished >>> with HexpySession . load_auth_from_file () as session : client = MonitorAPI ( session ) ... # use client to call API multiple times with same session >>> # session TCP connection is closed until next call to API Methods \u00b6 login \u00b6 login ( username : str , password : str = None , no_expiration : bool = False , force : bool = False ) -> HexpySession Instantiate class from username and password. Arguments username: account username. password: account password. no_expiration: True/False token with 24 expiration. save_token \u00b6 save_token ( path : str = None ) -> None Save authorization token. Arguments path: String, path to store API token. default is ~/.hexpy/token.json load_auth_from_file \u00b6 load_auth_from_file ( path : str = None ) -> HexpySession Instantiate class from previously saved token file. Arguments path: String, path to store API token. default is default is ~/.hexpy/token.json close \u00b6 close () -> None Close open TCP connection to API server.","title":"Session"},{"location":"Session/#session","text":"Creating a session and generating a token for API requests. Login using username. Optionally include password, or enter it at the prompt. >>> from hexpy import HexpySession >>> session = HexpySession . login ( username = \"username@gmail.com\" , password = \"secretpassword\" ) >>> session . save_token () # saving token to ~/.hexpy/token.json or >>> session = HexpySession . login ( username = \"username@email.com\" ) Enter password : ********* >>> session . save_token () or instantiate a session using a saved token >>> session = HexpySession ( token = \"previously_saved_token\" ) Create instance by loading token from file. Default is ~/.hexpy/token.json >>> session = HexpySession . load_auth_from_file () Create instance with context manager to close TCP session automatically when finished >>> with HexpySession . load_auth_from_file () as session : client = MonitorAPI ( session ) ... # use client to call API multiple times with same session >>> # session TCP connection is closed until next call to API","title":"Session"},{"location":"Session/#methods","text":"","title":"Methods"},{"location":"Session/#login","text":"login ( username : str , password : str = None , no_expiration : bool = False , force : bool = False ) -> HexpySession Instantiate class from username and password.","title":"login"},{"location":"Session/#save_token","text":"save_token ( path : str = None ) -> None Save authorization token.","title":"save_token"},{"location":"Session/#load_auth_from_file","text":"load_auth_from_file ( path : str = None ) -> HexpySession Instantiate class from previously saved token file.","title":"load_auth_from_file"},{"location":"Session/#close","text":"close () -> None Close open TCP connection to API server.","title":"close"},{"location":"Streams/","text":"Streams API \u00b6 Class for working with Streams API. Example usage \u00b6 >>> from hexpy import HexpySession , StreamsAPI >>> session = HexpySession . load_auth_from_file () >>> streams_client = StreamsAPI ( session ) >>> streams_client . stream_list ( team_id ) Methods \u00b6 posts \u00b6 posts ( stream_id : int , count : int = 100 ) -> JSONDict Return posts from a stream. Arguments: stream_id: Integer, the id of the stream containing the posts. count: Integer, the count of posts to retrieve from the stream, max = 100. stream_list \u00b6 stream_list ( team_id : int ) -> JSONDict List all available Streams for a team. Arguments team_id: Integer the id of the team. create_stream \u00b6 create_stream ( team_id : int , name : str ) -> JSONDict Create new stream for a team. System Admin Only. Arguments team_id: Integer, the id of the team to associate created stream with. name: String, the name to associate with the newly created stream. delete_stream \u00b6 delete_stream ( stream_id : int ) -> JSONDict Delete a stream. System Admin Only. Arguments stream_id: Integer, the id of the stream to be deleted. add_monitor_to_stream \u00b6 add_monitor_to_stream ( stream_id : int , monitor_id : int ) -> JSONDict Associate a monitor with a stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be modified. monitor_id: Integer, the id to be associated with the stream. remove_monitor_from_stream \u00b6 remove_monitor_from_stream ( stream_id : int , monitor_id : int ) -> JSONDict Remove association between monitor and stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be updated. monitor_id: Integer, the id to be removed from the stream. update_stream \u00b6 update_stream ( stream_id : int , name : str ) -> JSONDict Update name of stream. System Admin Only. Arguments stream_id: Integer, the id of stream to be updated. name: String, the new name to be associated with the stream.","title":"Streams"},{"location":"Streams/#streams-api","text":"Class for working with Streams API.","title":"Streams API"},{"location":"Streams/#example-usage","text":">>> from hexpy import HexpySession , StreamsAPI >>> session = HexpySession . load_auth_from_file () >>> streams_client = StreamsAPI ( session ) >>> streams_client . stream_list ( team_id )","title":"Example usage"},{"location":"Streams/#methods","text":"","title":"Methods"},{"location":"Streams/#posts","text":"posts ( stream_id : int , count : int = 100 ) -> JSONDict Return posts from a stream.","title":"posts"},{"location":"Streams/#stream_list","text":"stream_list ( team_id : int ) -> JSONDict List all available Streams for a team.","title":"stream_list"},{"location":"Streams/#create_stream","text":"create_stream ( team_id : int , name : str ) -> JSONDict Create new stream for a team. System Admin Only.","title":"create_stream"},{"location":"Streams/#delete_stream","text":"delete_stream ( stream_id : int ) -> JSONDict Delete a stream. System Admin Only.","title":"delete_stream"},{"location":"Streams/#add_monitor_to_stream","text":"add_monitor_to_stream ( stream_id : int , monitor_id : int ) -> JSONDict Associate a monitor with a stream. System Admin Only.","title":"add_monitor_to_stream"},{"location":"Streams/#remove_monitor_from_stream","text":"remove_monitor_from_stream ( stream_id : int , monitor_id : int ) -> JSONDict Remove association between monitor and stream. System Admin Only.","title":"remove_monitor_from_stream"},{"location":"Streams/#update_stream","text":"update_stream ( stream_id : int , name : str ) -> JSONDict Update name of stream. System Admin Only.","title":"update_stream"},{"location":"Upload/","text":"Upload API \u00b6 Class for working with the Custom Content Upload API. The Custom Content Upload endpoint enables the uploading of documents for analysis in the Forsight Platform. Users have uploaded survey responses, proprietary content, and other types of data not available in the Crimson Hexagon data library. To use this endpoint, please contact support and they will create a new custom content type for you. Reference Example Usage \u00b6 >>> from hexpy import HexpySession , ContentUploadAPI >>> from hexpy.models import UploadCollection , UploadItem >>> session = HexpySession . load_auth_from_file () >>> upload_client = ContentUploadAPI ( session ) >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } ] >>> data = UploadCollection ( items = items ) >>> upload_client . upload ( data ) Methods \u00b6 upload \u00b6 upload ( items : UploadCollection ) -> JSONDict Upload collection of documents to Crimson Hexagon platform. If greater than 1000 items passed, reverts to batch upload. Arguments items: validated instance of UploadCollection model batch_upload \u00b6 batch_upload ( items : UploadCollection ) -> JSONDict Batch upload collection of Custom Content to Crimson Hexagon platform in groups of 1000. Arguments items: validated instance of UploadCollection model custom_field_upload \u00b6 custom_field_upload ( document_type : int , batch : int , data : Sequence [ Dict [ str , Any ]]) -> JSONDict Upload content via the API w/ custom fields support. Arguments document_type: Integer, The id of the document type to which the uploading docs will belong batch: Integer, The id of the batch to which the uploading docs will belong. data: list of document dictionaries to upload. delete_content \u00b6 delete_content ( document_type : int ) -> JSONDict Content deletion via the API. Arguments documentType: Integer, The id of the document type to delete. removeResults: Boolean, If true, removes the results associated with the documentType. delete_content_batch \u00b6 delete_content_batch ( document_type : int , batch : int ) -> JSONDict Delete batch content via the API. Arguments documentType: Integer, The id of the document type to delete documents from. batch: String, The id of the document batch to delete. create_content_source \u00b6 create_content_source ( content_source ) -> JSONDict Content Source creation. delete_content_source \u00b6 delete_content_type ( document_type : int , remove_results : bool ) -> JSONDict Content Source deletion. list_content_sources \u00b6 list_content_sources ( team_id : int ) -> JSONDict Content Source list. Arguments team: Integer, The id of the team to which the listed content sources belong.","title":"Upload"},{"location":"Upload/#upload-api","text":"Class for working with the Custom Content Upload API. The Custom Content Upload endpoint enables the uploading of documents for analysis in the Forsight Platform. Users have uploaded survey responses, proprietary content, and other types of data not available in the Crimson Hexagon data library. To use this endpoint, please contact support and they will create a new custom content type for you. Reference","title":"Upload API"},{"location":"Upload/#example-usage","text":">>> from hexpy import HexpySession , ContentUploadAPI >>> from hexpy.models import UploadCollection , UploadItem >>> session = HexpySession . load_auth_from_file () >>> upload_client = ContentUploadAPI ( session ) >>> items = [ { \"title\" : \"Example Title\" , \"date\" : \"2010-01-26T16:14:00\" , \"author\" : \"me\" , \"url\" : \"http://www.crimsonhexagon.com/post1\" , \"contents\" : \"Example content\" , \"language\" : \"en\" , \"type\" : \"Your_Assigned_Content_Type_Name\" , \"geolocation\" : { \"id\" : \"USA.NY\" } } ] >>> data = UploadCollection ( items = items ) >>> upload_client . upload ( data )","title":"Example Usage"},{"location":"Upload/#methods","text":"","title":"Methods"},{"location":"Upload/#upload","text":"upload ( items : UploadCollection ) -> JSONDict Upload collection of documents to Crimson Hexagon platform. If greater than 1000 items passed, reverts to batch upload.","title":"upload"},{"location":"Upload/#batch_upload","text":"batch_upload ( items : UploadCollection ) -> JSONDict Batch upload collection of Custom Content to Crimson Hexagon platform in groups of 1000.","title":"batch_upload"},{"location":"Upload/#custom_field_upload","text":"custom_field_upload ( document_type : int , batch : int , data : Sequence [ Dict [ str , Any ]]) -> JSONDict Upload content via the API w/ custom fields support.","title":"custom_field_upload"},{"location":"Upload/#delete_content","text":"delete_content ( document_type : int ) -> JSONDict Content deletion via the API.","title":"delete_content"},{"location":"Upload/#delete_content_batch","text":"delete_content_batch ( document_type : int , batch : int ) -> JSONDict Delete batch content via the API.","title":"delete_content_batch"},{"location":"Upload/#create_content_source","text":"create_content_source ( content_source ) -> JSONDict Content Source creation.","title":"create_content_source"},{"location":"Upload/#delete_content_source","text":"delete_content_type ( document_type : int , remove_results : bool ) -> JSONDict Content Source deletion.","title":"delete_content_source"},{"location":"Upload/#list_content_sources","text":"list_content_sources ( team_id : int ) -> JSONDict Content Source list.","title":"list_content_sources"},{"location":"crimson_api_docs/","text":"Crimson Hexagon API Documentation \u00b6 API URL: https://api.crimsonhexagon.com/api Endpoints \u00b6 Analysis Request \u00b6 To submit an analysis task for asynchronous processing - Category: results /results - POST Parameters Response status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Fields: analysis , startDate , endDate , timezone , sources , keywords , languages , locations , gender , requestingContractInfo Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False Analysis Results \u00b6 To retrieve the status of the analysis task and the results - Category: results /results/{resultId} - GET Parameters Response status - Defines the status of the analysis. Refer to Response Statuses table for additional information Type: Status Restricted = False resultId - Defines the unique identifier by which the analysis status/results can be retrieved Type: long Restricted = False retrieveAt - Nullable. ISO8601 formatted date indicating a suggested time to re-attempt result retrieval if the status is WAITING Type: Date Restricted = False request - Defines the original request parameters made to invoke this analysis Type: ApiAnalysisTaskRequest Fields: analysis , startDate , endDate , timezone , sources , keywords , languages , locations , gender , requestingContractInfo Restricted = False resultsUri - Defines the URI that can be queried to retrieve the analysis status/results in the future Type: String Restricted = False contractInfo - If requested, the contract info after this request has been processed. Type: ApiAnalysisContractInfo Restricted = False resultId - Identificator of the task response Type: long Restricted = False status - Current status of analysis task Type: Status Restricted = False analysisResults - Analysis result Type: AnalysisResults Fields: volumeResults , sentimentResults , genderResult , ageResult , locationResult , siteResult , affinityResults , reach Restricted = False message - Result message Type: String Restricted = False request - Related task request Type: ApiAnalysisTaskRequest Fields: analysis , startDate , endDate , timezone , sources , keywords , languages , locations , gender , requestingContractInfo Restricted = False Authentication \u00b6 Generate authentication tokens for use in API requests - Category: admin /authenticate - GET Parameters username - Username of the requesting user Type: String Required = True password - Password of the requesting user Type: String Required = True force - If true, forces authentication token update for the requesting user Type: boolean Required = False noExpiration - If true, the authentication token returned will not expire Type: boolean Required = False Response auth - Authentication token Type: String Restricted = False expires - Token expiration date (24 hours from token creation). If noExpiration = true, this field will not be returned Type: Date Restricted = False Authors \u00b6 Information about Twitter authors in a monitor - Category: results /monitor/authors - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response authors - JSON array of zero or more authors objects that contain author-specific attributes Type: List Fields: startDate , endDate , countsByAuthor , numberOfAuthors , docsPerAuthor , totalImpressions Restricted = False Content Delete \u00b6 Delete batch content via the API - Category: admin /content/delete - POST Parameters documentType - The id of the document type to delete documents from Type: long Required = True batch - The id of the document batch to delete Type: String Required = True Response Content Delete \u00b6 Delete content via the API - Category: admin /content/delete - POST Parameters documentType - The id of the document type to delete documents from Type: long Required = True Response Content Source Create \u00b6 Content Source creation - Category: admin /content/sources - POST Parameters Response contentSource - Content Source Type: ContentSourceModel Fields: id , teamName , name , description , documents Restricted = False Content Source Delete \u00b6 Content Source deletion - Category: admin /content/sources - DELETE Parameters documentType - The id of the document type to delete Type: long Required = True Response Content Source List \u00b6 Content Source list - Category: admin /content/sources/list - GET Parameters team - The id of the team to which the listed content sources belong Type: Long Required = True Response contentSources - Content Sources Type: List Fields: id , teamName , name , description , documents Restricted = False Content Upload \u00b6 Upload content via the API - Category: admin /content/upload - POST Parameters Response uploadCount - The number of posts that were successfully uploaded Type: Integer Restricted = False DocumentsUploadedInLastTwentyFourHours - If requested, the number of documents this organization has uploaded in the last twenty four hours. Type: Long Restricted = False ContractedDocumentsWithinTwentyFourHours - If requested, the number of documents this organization can upload in a rolling twenty four hour period. Type: Long Restricted = False Content Upload Custom Fields Support \u00b6 Upload content via the API w/ custom fields support - Category: admin /content/upload - POST Parameters documentType - The id of the document type to which the uploading docs will belong Type: Long Required = True batch - The id of the batch to which the uploading docs will belong Type: String Required = False Response batchId - The id of the batch to which these docs belong Type: String Restricted = False Day and Time \u00b6 Volume information for a monitor aggregated by time of day or day of week) - Category: results /monitor/dayandtime - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True aggregatebyday - If true, volume information will be aggregated by day of the week instead of time of day Type: boolean Required = False uselocaltime - If true, volume aggregation will use the time local to the publishing author of a post when determining counts by day/time, instead of converting that time to the timezone of the selected monitor Type: boolean Required = False Response volumes - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , numberOfDocuments , volume Restricted = False Demographics - Age \u00b6 Daily volume information for age in a monitor - Category: results /monitor/demographics/age - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response ageCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , numberOfDocuments , ageCount Restricted = False Demographics - Gender \u00b6 Daily volume information for gender in a monitor - Category: results /monitor/demographics/gender - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response genderCounts - JSON array of zero or more objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , numberOfDocuments , genderCounts Restricted = False Facebook Admin Posts \u00b6 Daily likes, comments, and shares for individual admin posts made by a Facebook account in a Facebook social account monitor - Category: social /monitor/facebook/adminposts - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , adminPostMetrics Restricted = False Facebook Page Likes \u00b6 Total page likes as of the requested dates for a Facebook social monitor - Category: social /monitor/facebook/pagelikes - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: date , likes Restricted = False Facebook Total Activity \u00b6 Daily total likes, comments, and shares on admin and user posts for a Facebook account in a Facebook social monitor - Category: social /monitor/facebook/totalactivity - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , admin , user Restricted = False Geography - All Resources \u00b6 Returns all the available geolocation resources - Category: util /geography/info/all - GET Parameters Response resources - JSON array with the geography resources Type: List Fields: id , name , country , state , city , latitude , longitude Restricted = False Geography - Cities \u00b6 Returns all the available cities / urban areas in the given country - Category: util /geography/info/cities - GET Parameters country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response resources - JSON array with the geography resources Type: List Fields: id , name , country , state , city , latitude , longitude Restricted = False Geography - Countries \u00b6 Returns all the available countries - Category: util /geography/info/countries - GET Parameters Response resources - JSON array with the geography resources Type: List Fields: id , name , country , latitude , longitude Restricted = False Geography - States \u00b6 Returns all the available states / regions in the given country - Category: util /geography/info/states - GET Parameters country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response resources - JSON array with the geography resources Type: List Fields: id , name , country , state , latitude , longitude Restricted = False Get Monitor Creation Report \u00b6 Returns a list of Teams within an Organization and how many monitors were created during a given time period - Category: reports /report/monitorCreation - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n monitor creation report rows Type: List Fields: team_name , monitors_used , monitor_limit , monitors_created_past_month Restricted = False Get Social Site Report \u00b6 Returns a list of social sites and associated usernames for Teams within an Organization. Also indicates which of the social sites have failed and when - Category: reports /report/socialSites - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n social site report rows Type: List Fields: username , socialsite , team_name , creation_date , last_rate_limit_date , failed , failure_date Restricted = False Get User Activity Report \u00b6 Returns a list of users within an Organization including information on when they last logged into the platform, the last monitor they created, and the last monitor they viewed - Category: reports /report/userActivity - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n user activity report rows Type: List Fields: user_id , team_id , email , first_name , last_name , last_platform_login , team_name , monitors_viewed_past_month , monitors_created_past_month , last_team_visit Restricted = False Get User Invitation Report \u00b6 Returns a list of users within an Organization and which Team(s) they were invited to. Also indicates when the invitation was sent and when it was accepted - Category: reports /report/userInvitations - GET Parameters organizationId - The id of the organization being requested Type: long Required = True Response data - List of 0..n user invitation report rows Type: List Fields: email , team_name , create_edit , invite_user , heliosight , api_access , admin , date_sent , date_accepted Restricted = False Image Analysis Request \u00b6 To return list of class IDs and names with specified class type. - Category: results /imageanalysis/resources/classes/type - GET Parameters Response Image Analysis Request \u00b6 To return list of all class IDs and names. - Category: results /imageanalysis/resources/classes - GET Parameters Response Image analysis \u00b6 To return image classification data - Category: util /imageanalysis - GET Parameters url - Image URL Type: String Required = True Response imgData - Message object contains request parameters and image classification result Type: ImageAnalysisData Restricted = False Instagram Followers \u00b6 Total daily follower counts for Instagram social account monitors - Category: social /monitor/instagram/followers - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: date , followerCount Restricted = False Instagram Hashtags \u00b6 Total daily volume by Instagram hashtags for specific monitor - Category: social /monitor/instagram/hashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: date , hashtags Restricted = False Instagram Sent Media \u00b6 Daily likes, comments, and tags for individual media posted by an Instagram account in an Instagram social account monitor - Category: social /monitor/instagram/sentmedia - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , adminPostMetrics Restricted = False Instagram Total Activity \u00b6 Daily likes, comments, and shares for individual admin posts made by an Instagram account in an Instagram social account monitor - Category: social /monitor/instagram/totalactivity - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , admin Restricted = False Interest Affinities \u00b6 Aggregate affinities for the selected monitor over a given date range - Category: visualizations /monitor/interestaffinities - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True daily - If true, results returned from this endpoint will be trended daily instead of aggregated across the selected date range. Type: boolean Required = False documentsource - document source for affinities. valid params [TWITTER, TUMBLR] Type: String Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False affinityInfo - JSON array of affinity objects containing information about the top affinities for the date range selected Type: List Fields: id , name , relevancyScore , percentInMonitor , percentOnTwitter Restricted = False Monitor Audit \u00b6 Audit information about the selected monitor - Category: admin /monitor/audit - GET Parameters id - The id of the monitor to be audited Type: long Required = True Response auditInfo - JSON array of audit events pertaining to the selected monitor Type: List Fields: event , user , eventDate Restricted = False Monitor Detail \u00b6 Attributes of the specified monitor - Category: admin /monitor/detail - GET Parameters id - The id of the monitor being requested Type: long Required = True Response monitorDetail - JSON array of monitor details Type: MonitorDetailModel Fields: parentMonitorId , categories , emotions , id , name , description , type , enabled , resultsStart , resultsEnd , keywords , languages , geolocations , gender , sources , timezone , teamName , tags , subfilters Restricted = False Monitor Image Results \u00b6 Daily image results for a monitor - Category: results /monitor/imageresults - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True type - Specifies type of image classes, valid values [object, scene, action, logo] Type: String Required = False top - If defined, only the top number of results will be returned Type: Integer Required = False Response results - JSON array of zero or more daily image results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , creationDate , numberOfDocuments , numberOfImageDocuments , imageClasses Restricted = False Monitor List \u00b6 List of monitors available to the passed in username - Category: admin /monitor/list - GET Parameters team - The id of the team to which the listed monitors belong Type: Long Required = False Response monitors - JSON array of monitors viewable by the user Type: List Fields: id , name , description , type , enabled , resultsStart , resultsEnd , keywords , languages , geolocations , gender , sources , timezone , teamName , tags , subfilters Restricted = False Monitor Results \u00b6 Daily results for a monitor - Category: results /monitor/results - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True hideExcluded - If true, categories set as hidden will not be included in category proportion calculations Type: boolean Required = False Response results - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , creationDate , numberOfDocuments , numberOfRelevantDocuments , categories Restricted = False Monitor Results by City \u00b6 Returns all the monitor results grouped by the cities / urban areas in a given country (if given) - Category: results /monitor/geography/cities - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code, if not given all cities in the world will be returned Type: String Required = False Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Fields: info , volume , perMillion Restricted = False Monitor Results by Country \u00b6 Returns all the monitor results grouped by country - Category: results /monitor/geography/countries - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Fields: info , volume , perMillion Restricted = False Monitor Results by State \u00b6 Returns all the monitor results grouped by the country states / regions - Category: results /monitor/geography/states - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True country - Specifies the ISO 3166 3 letter country code Type: String Required = True Response startDate - Requested start date Type: Date Restricted = False endDate - Requested end date Type: Date Restricted = False totalVolume - Volume matching the defined geography filter Type: long Restricted = False data - JSON array of monitor geography result information Type: List Fields: info , volume , perMillion Restricted = False Monitor Training Posts \u00b6 Download training posts for a monitor - Category: admin /monitor/trainingposts - GET Parameters id - The id of the monitor being requested Type: long Required = True category - Category id to target training posts from a specific category Type: Long Required = False Response trainingPosts - JSON array of training posts for the selected monitor or category in a monitor Type: List Fields: categoryId , categoryName , categoryGroup , url , date , author , contents , title , type Restricted = False Posts \u00b6 Information about posts in a monitor - Category: visualizations /monitor/posts - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False extendLimit - If true, increases the limit of returned posts from 500 per call to 10,000 per call Type: boolean Required = False fullContents - If true, the contents field will return the original, complete post contents instead of truncating around search terms Type: boolean Required = False geotagged - If true, returns only geotagged documents matching and the given filter, if false or undefined any post matching the given filter Type: boolean Required = False Response posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Fields: location , geolocation , language , authorPosts , authorsFollowing , authorsFollowers , authorGender , trainingPost , assignedCategoryId , assignedEmotionId , categoryScores , emotionScores , imageInfo , customFields , batchId , url , date , author , contents , title , type Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False Realtime Cashtags \u00b6 Get Cashtags associated to a Monitor - Category: monitors /realtime/monitor/cashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N cashtags to retrieve Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Configure \u00b6 Configure the Realtime evaluators for the Monitor - Category: monitors /realtime/monitor/configure - POST Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Details \u00b6 Get the Realtime evaluators details for the Monitor - Category: monitors /realtime/monitor/detail - GET Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Disable \u00b6 Disable Realtime Data - Category: monitors /realtime/monitor/disable - GET Parameters id - The id of the monitor being requested Type: long Required = True Response Realtime Enable \u00b6 Enable Realtime Data - Category: monitors /realtime/monitor/enable - GET Parameters id - The id of the monitor being requested Type: long Required = True Response Realtime FullRetweets \u00b6 Get the Realtime fulretweets for the Monitor - Category: monitors /realtime/monitor/fullretweets - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime FullTweets \u00b6 Get the Realtime fulltweets for the Monitor - Category: monitors /realtime/monitor/fulltweets - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Hashtags \u00b6 Get Hashtags associated to a Monitor - Category: monitors /realtime/monitor/hashtags - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False top - The top N hashtags to retrieve Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Monitor List \u00b6 Get the Monitors which are in Proteus - Category: monitors /realtime/monitor/list - GET Parameters team - The id of the team to which the listed monitors belong Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Retweets \u00b6 Get the Realtime retweets for the Monitor - Category: monitors /realtime/monitor/retweets - GET Parameters id - The id of the monitor being requested Type: long Required = True Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime SocialGuids \u00b6 Get the Realtime social guids for the Monitor - Category: monitors /realtime/monitor/socialguids - GET Parameters id - The id of the monitor being requested Type: long Required = True type - Specifies the document type Type: String Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False receivedafter - Specifies inclusive receivedafter date in epoch seconds Type: Long Required = False maxresults - Specifies maximum results to fetch Type: Integer Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Tweets \u00b6 Get the Realtime tweets for the Monitor - Category: monitors /realtime/monitor/tweets - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume \u00b6 Get the Realtime volume for the Monitor - Category: monitors /realtime/monitor/volume - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume by Emotion \u00b6 Get the Realtime volume by emotion for the Monitor - Category: monitors /realtime/monitor/volumebyemotion - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Realtime Volume by Sentiment \u00b6 Get the Realtime volume by sentiment for the Monitor - Category: monitors /realtime/monitor/volumebysentiment - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in epoch seconds Type: Long Required = False type - Specifies the document type to filter Type: List Required = False Response realtimeData - JSON object of monitor realtime data Type: Map Restricted = False Stream Add Monitor \u00b6 Stream Add Monitor Association - Category: admin /stream/{streamid}/monitor/{monitorid} - POST Parameters streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be created Type: Long Required = True Response Stream Create \u00b6 Stream creation - Category: admin /stream - POST Parameters Response stream - Stream information Type: StreamModel Fields: id , name , teamName , monitors Restricted = False path - Stream path Type: String Restricted = False Stream Delete \u00b6 Stream deletion - Category: admin /stream/{streamid} - DELETE Parameters streamId - The id of the stream to delete Type: Long Required = True Response Stream List \u00b6 List of streams available to the passed in username - Category: admin /stream/list - GET Parameters teamid - The id of the team to which the listed streams belong Type: Long Required = False Response streams - JSON array of streams viewable by the user Type: List Fields: id , name , teamName , monitors Restricted = False Stream Posts \u00b6 Information about posts in a stream - Category: results /stream/{streamid}/posts - GET Parameters streamId - The id of the stream to which the realtime information belongs Type: Long Required = True count - The maximum number of posts to fetch from the stream Type: Integer Required = False Response posts - JSON array of zero or more post objects that contain post-specific attributes Type: List Fields: location , geolocation , language , authorPosts , authorsFollowing , authorsFollowers , authorGender , trainingPost , assignedCategoryId , assignedEmotionId , categoryScores , emotionScores , imageInfo , customFields , batchId , url , date , author , contents , title , type Restricted = False totalPostsAvailable - The number of posts stored for this monitor that match the query. Dates in the date range selected that have more than 10 thousand posts will be sampled. You may perform extrapolation calculations to approximate the total number of unsampled posts using the results counts in the Monitor Results endpoint. Type: int Restricted = False Stream Remove Monitor \u00b6 Stream Remove Monitor Association - Category: admin /stream/{streamid}/monitor/{monitorid} - DELETE Parameters streamId - The id of the stream Type: Long Required = True monitorId - The id of the monitor to which the association will be removed Type: Long Required = True Response Stream Update Monitor \u00b6 Stream Update Monitor Data - Category: admin /stream/{streamid} - POST Parameters streamId - The id of the stream Type: Long Required = True Response Team List \u00b6 List of teams accessible to the current user - Category: admin /team/list - GET Parameters Response teams - JSON array of teams accessible by the user Type: List Fields: id , name Restricted = False Top Sites and Content Sources \u00b6 Content source breakdown and top sites - Category: results /monitor/sources - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response contentSources - JSON array of zero or more content sources objects that contain results for each date requested Type: List Fields: startDate , endDate , topSites , sources Restricted = False Topic Clustering \u00b6 XML data that can be used to generate clustering visualizations using third-party software - Category: visualizations /monitor/topics - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False Response clustering - XML string for generating visualizations Type: String Restricted = False Topic Waves \u00b6 Topic waves information for a monitor - Category: visualizations /monitor/topicwaves - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False totalTopicsVolume - Total Volume for the topics Type: long Restricted = False topics - JSON array of 1..n topics volume information for grouped periods Type: List Fields: name , totalVolume , volume Restricted = False Training Document Upload \u00b6 Train monitors via the API - Category: util /monitor/train - POST Parameters id - The id of the monitor being trained Type: long Required = True Response message - Success response indicating a training post has been sucessfully uploaded Type: String Restricted = False Twitter Engagement Metrics \u00b6 Engagement metrics for Twitter content in a monitor - Category: results /monitor/twittermetrics - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , topHashtags , topMentions , topRetweets Restricted = False Twitter Followers \u00b6 Total daily follower counts for Twitter Social Account monitors - Category: social /monitor/twittersocial/followers - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: date , followers Restricted = False Twitter Sent Posts \u00b6 Daily retweets, replies, and impressions for individual posts made by a Twitter account in a Twitter social account monitor - Category: social /monitor/twittersocial/sentposts - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , sentPostMetrics , totalImpressions Restricted = False Twitter Total Engagement \u00b6 Daily retweets, replies, and mentions for a targeted Twitter account in a Twitter social account monitor - Category: social /monitor/twittersocial/totalengagement - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True Response dailyResults - JSON array of zero or more daily results objects that contain endpoint-specific attributes Type: List Fields: startDate , endDate , mentions , replies , retweets Restricted = False Volume \u00b6 Volume of total posts in a monitor - Category: results /monitor/volume - GET Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True groupBy - Specifies how the volume data over the date range will be grouped. Valid values: [HOURLY, DAILY, WEEKLY, MONTHLY]. Defaults to DAILY. Grouping requires a date range of at least 1 full unit; e.g., WEEKLY requires a date range of at least 1 week. Grouping only returns full units so the range may be truncated. e.g., 2017-01-15 to 2017-03-15 with MONTHLY grouping will return a date range of 2017-02-01 to 2017-03-01. A monitor must have complete results for the specified date range. If any day in the range is missing results an error will be returned. Type: String Required = False Response startDate - Inclusive start date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False endDate - Exclusive end date in dashboard time for this result - ISO 8601 format yyyy-MM-dd'T'HH:mm:ss Type: Date Restricted = False timezone - IANA timezone identifier specifying the timezone for all dates in the response Type: String Restricted = False groupBy - Defines the grouping for the volume information Type: String Restricted = False numberOfDocuments - Total volume for this period Type: long Restricted = False volume - JSON array of 1..n volume information for grouped periods Type: List Fields: startDate , endDate , numberOfDocuments Restricted = False Word Cloud \u00b6 Word frequency information for posts in a monitor - Category: visualizations /monitor/wordcloud - GET || POST Parameters id - The id of the monitor being requested Type: long Required = True start - Specifies inclusive start date in YYYY-MM-DD Type: Date Required = True end - Specifies exclusive end date in YYYY-MM-DD Type: Date Required = True MISSING - Optional JSON payload to filter response Type: MonitorPostsFilter Required = False filter - Pipe-separated list of field:value pairs used to filter results by given parameters Type: String Required = False Response data - Map of the top 300 terms appearing in a monitor to their frequency in that monitor Type: Map Restricted = False","title":"Crimson API Documentation"},{"location":"crimson_api_docs/#crimson-hexagon-api-documentation","text":"API URL: https://api.crimsonhexagon.com/api","title":"Crimson Hexagon API Documentation"},{"location":"crimson_api_docs/#endpoints","text":"","title":"Endpoints"},{"location":"crimson_api_docs/#analysis-request","text":"","title":"Analysis Request"},{"location":"crimson_api_docs/#analysis-results","text":"","title":"Analysis Results"},{"location":"crimson_api_docs/#authentication","text":"","title":"Authentication"},{"location":"crimson_api_docs/#authors","text":"","title":"Authors"},{"location":"crimson_api_docs/#content-delete","text":"","title":"Content Delete"},{"location":"crimson_api_docs/#content-delete_1","text":"","title":"Content Delete"},{"location":"crimson_api_docs/#content-source-create","text":"","title":"Content Source Create"},{"location":"crimson_api_docs/#content-source-delete","text":"","title":"Content Source Delete"},{"location":"crimson_api_docs/#content-source-list","text":"","title":"Content Source List"},{"location":"crimson_api_docs/#content-upload","text":"","title":"Content Upload"},{"location":"crimson_api_docs/#content-upload-custom-fields-support","text":"","title":"Content Upload Custom Fields Support"},{"location":"crimson_api_docs/#day-and-time","text":"","title":"Day and Time"},{"location":"crimson_api_docs/#demographics-age","text":"","title":"Demographics - Age"},{"location":"crimson_api_docs/#demographics-gender","text":"","title":"Demographics - Gender"},{"location":"crimson_api_docs/#facebook-admin-posts","text":"","title":"Facebook Admin Posts"},{"location":"crimson_api_docs/#facebook-page-likes","text":"","title":"Facebook Page Likes"},{"location":"crimson_api_docs/#facebook-total-activity","text":"","title":"Facebook Total Activity"},{"location":"crimson_api_docs/#geography-all-resources","text":"","title":"Geography - All Resources"},{"location":"crimson_api_docs/#geography-cities","text":"","title":"Geography - Cities"},{"location":"crimson_api_docs/#geography-countries","text":"","title":"Geography - Countries"},{"location":"crimson_api_docs/#geography-states","text":"","title":"Geography - States"},{"location":"crimson_api_docs/#get-monitor-creation-report","text":"","title":"Get Monitor Creation Report"},{"location":"crimson_api_docs/#get-social-site-report","text":"","title":"Get Social Site Report"},{"location":"crimson_api_docs/#get-user-activity-report","text":"","title":"Get User Activity Report"},{"location":"crimson_api_docs/#get-user-invitation-report","text":"","title":"Get User Invitation Report"},{"location":"crimson_api_docs/#image-analysis-request","text":"","title":"Image Analysis Request"},{"location":"crimson_api_docs/#image-analysis-request_1","text":"","title":"Image Analysis Request"},{"location":"crimson_api_docs/#image-analysis","text":"","title":"Image analysis"},{"location":"crimson_api_docs/#instagram-followers","text":"","title":"Instagram Followers"},{"location":"crimson_api_docs/#instagram-hashtags","text":"","title":"Instagram Hashtags"},{"location":"crimson_api_docs/#instagram-sent-media","text":"","title":"Instagram Sent Media"},{"location":"crimson_api_docs/#instagram-total-activity","text":"","title":"Instagram Total Activity"},{"location":"crimson_api_docs/#interest-affinities","text":"","title":"Interest Affinities"},{"location":"crimson_api_docs/#monitor-audit","text":"","title":"Monitor Audit"},{"location":"crimson_api_docs/#monitor-detail","text":"","title":"Monitor Detail"},{"location":"crimson_api_docs/#monitor-image-results","text":"","title":"Monitor Image Results"},{"location":"crimson_api_docs/#monitor-list","text":"","title":"Monitor List"},{"location":"crimson_api_docs/#monitor-results","text":"","title":"Monitor Results"},{"location":"crimson_api_docs/#monitor-results-by-city","text":"","title":"Monitor Results by City"},{"location":"crimson_api_docs/#monitor-results-by-country","text":"","title":"Monitor Results by Country"},{"location":"crimson_api_docs/#monitor-results-by-state","text":"","title":"Monitor Results by State"},{"location":"crimson_api_docs/#monitor-training-posts","text":"","title":"Monitor Training Posts"},{"location":"crimson_api_docs/#posts","text":"","title":"Posts"},{"location":"crimson_api_docs/#realtime-cashtags","text":"","title":"Realtime Cashtags"},{"location":"crimson_api_docs/#realtime-configure","text":"","title":"Realtime Configure"},{"location":"crimson_api_docs/#realtime-details","text":"","title":"Realtime Details"},{"location":"crimson_api_docs/#realtime-disable","text":"","title":"Realtime Disable"},{"location":"crimson_api_docs/#realtime-enable","text":"","title":"Realtime Enable"},{"location":"crimson_api_docs/#realtime-fullretweets","text":"","title":"Realtime FullRetweets"},{"location":"crimson_api_docs/#realtime-fulltweets","text":"","title":"Realtime FullTweets"},{"location":"crimson_api_docs/#realtime-hashtags","text":"","title":"Realtime Hashtags"},{"location":"crimson_api_docs/#realtime-monitor-list","text":"","title":"Realtime Monitor List"},{"location":"crimson_api_docs/#realtime-retweets","text":"","title":"Realtime Retweets"},{"location":"crimson_api_docs/#realtime-socialguids","text":"","title":"Realtime SocialGuids"},{"location":"crimson_api_docs/#realtime-tweets","text":"","title":"Realtime Tweets"},{"location":"crimson_api_docs/#realtime-volume","text":"","title":"Realtime Volume"},{"location":"crimson_api_docs/#realtime-volume-by-emotion","text":"","title":"Realtime Volume by Emotion"},{"location":"crimson_api_docs/#realtime-volume-by-sentiment","text":"","title":"Realtime Volume by Sentiment"},{"location":"crimson_api_docs/#stream-add-monitor","text":"","title":"Stream Add Monitor"},{"location":"crimson_api_docs/#stream-create","text":"","title":"Stream Create"},{"location":"crimson_api_docs/#stream-delete","text":"","title":"Stream Delete"},{"location":"crimson_api_docs/#stream-list","text":"","title":"Stream List"},{"location":"crimson_api_docs/#stream-posts","text":"","title":"Stream Posts"},{"location":"crimson_api_docs/#stream-remove-monitor","text":"","title":"Stream Remove Monitor"},{"location":"crimson_api_docs/#stream-update-monitor","text":"","title":"Stream Update Monitor"},{"location":"crimson_api_docs/#team-list","text":"","title":"Team List"},{"location":"crimson_api_docs/#top-sites-and-content-sources","text":"","title":"Top Sites and Content Sources"},{"location":"crimson_api_docs/#topic-clustering","text":"","title":"Topic Clustering"},{"location":"crimson_api_docs/#topic-waves","text":"","title":"Topic Waves"},{"location":"crimson_api_docs/#training-document-upload","text":"","title":"Training Document Upload"},{"location":"crimson_api_docs/#twitter-engagement-metrics","text":"","title":"Twitter Engagement Metrics"},{"location":"crimson_api_docs/#twitter-followers","text":"","title":"Twitter Followers"},{"location":"crimson_api_docs/#twitter-sent-posts","text":"","title":"Twitter Sent Posts"},{"location":"crimson_api_docs/#twitter-total-engagement","text":"","title":"Twitter Total Engagement"},{"location":"crimson_api_docs/#volume","text":"","title":"Volume"},{"location":"crimson_api_docs/#word-cloud","text":"","title":"Word Cloud"}]}